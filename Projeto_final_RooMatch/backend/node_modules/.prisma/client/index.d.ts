
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model House
 * 
 */
export type House = $Result.DefaultSelection<Prisma.$HousePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model TaskReview
 * 
 */
export type TaskReview = $Result.DefaultSelection<Prisma.$TaskReviewPayload>
/**
 * Model Buyout
 * 
 */
export type Buyout = $Result.DefaultSelection<Prisma.$BuyoutPayload>
/**
 * Model Punishment
 * 
 */
export type Punishment = $Result.DefaultSelection<Prisma.$PunishmentPayload>
/**
 * Model History
 * 
 */
export type History = $Result.DefaultSelection<Prisma.$HistoryPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model PaymentShare
 * 
 */
export type PaymentShare = $Result.DefaultSelection<Prisma.$PaymentSharePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const HouseStatus: {
  APPROVED: 'APPROVED',
  PENDING: 'PENDING',
  REJECTED: 'REJECTED'
};

export type HouseStatus = (typeof HouseStatus)[keyof typeof HouseStatus]


export const TaskFrequency: {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY'
};

export type TaskFrequency = (typeof TaskFrequency)[keyof typeof TaskFrequency]


export const TaskStatus: {
  PENDING: 'PENDING',
  AWAITING_REVIEW: 'AWAITING_REVIEW',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REDO: 'REDO',
  BOUGHT_OUT: 'BOUGHT_OUT'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const AccountType: {
  FIXED: 'FIXED',
  FLOATING: 'FLOATING'
};

export type AccountType = (typeof AccountType)[keyof typeof AccountType]


export const HistoryEventType: {
  TASK_COMPLETED: 'TASK_COMPLETED',
  TASK_FAILED: 'TASK_FAILED',
  PUNISHMENT_APPLIED: 'PUNISHMENT_APPLIED',
  SCORE_ADJUSTMENT: 'SCORE_ADJUSTMENT',
  ACCOUNT_PAID: 'ACCOUNT_PAID'
};

export type HistoryEventType = (typeof HistoryEventType)[keyof typeof HistoryEventType]

}

export type HouseStatus = $Enums.HouseStatus

export const HouseStatus: typeof $Enums.HouseStatus

export type TaskFrequency = $Enums.TaskFrequency

export const TaskFrequency: typeof $Enums.TaskFrequency

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

export type AccountType = $Enums.AccountType

export const AccountType: typeof $Enums.AccountType

export type HistoryEventType = $Enums.HistoryEventType

export const HistoryEventType: typeof $Enums.HistoryEventType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Profiles
 * const profiles = await prisma.profile.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Profiles
   * const profiles = await prisma.profile.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.house`: Exposes CRUD operations for the **House** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Houses
    * const houses = await prisma.house.findMany()
    * ```
    */
  get house(): Prisma.HouseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taskReview`: Exposes CRUD operations for the **TaskReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskReviews
    * const taskReviews = await prisma.taskReview.findMany()
    * ```
    */
  get taskReview(): Prisma.TaskReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.buyout`: Exposes CRUD operations for the **Buyout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buyouts
    * const buyouts = await prisma.buyout.findMany()
    * ```
    */
  get buyout(): Prisma.BuyoutDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.punishment`: Exposes CRUD operations for the **Punishment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Punishments
    * const punishments = await prisma.punishment.findMany()
    * ```
    */
  get punishment(): Prisma.PunishmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.history`: Exposes CRUD operations for the **History** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Histories
    * const histories = await prisma.history.findMany()
    * ```
    */
  get history(): Prisma.HistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentShare`: Exposes CRUD operations for the **PaymentShare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentShares
    * const paymentShares = await prisma.paymentShare.findMany()
    * ```
    */
  get paymentShare(): Prisma.PaymentShareDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.1
   * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Profile: 'Profile',
    House: 'House',
    User: 'User',
    Task: 'Task',
    TaskReview: 'TaskReview',
    Buyout: 'Buyout',
    Punishment: 'Punishment',
    History: 'History',
    Account: 'Account',
    PaymentShare: 'PaymentShare'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "profile" | "house" | "user" | "task" | "taskReview" | "buyout" | "punishment" | "history" | "account" | "paymentShare"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      House: {
        payload: Prisma.$HousePayload<ExtArgs>
        fields: Prisma.HouseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HouseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HouseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          findFirst: {
            args: Prisma.HouseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HouseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          findMany: {
            args: Prisma.HouseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload>[]
          }
          create: {
            args: Prisma.HouseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          createMany: {
            args: Prisma.HouseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HouseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload>[]
          }
          delete: {
            args: Prisma.HouseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          update: {
            args: Prisma.HouseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          deleteMany: {
            args: Prisma.HouseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HouseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HouseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload>[]
          }
          upsert: {
            args: Prisma.HouseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          aggregate: {
            args: Prisma.HouseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHouse>
          }
          groupBy: {
            args: Prisma.HouseGroupByArgs<ExtArgs>
            result: $Utils.Optional<HouseGroupByOutputType>[]
          }
          count: {
            args: Prisma.HouseCountArgs<ExtArgs>
            result: $Utils.Optional<HouseCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      TaskReview: {
        payload: Prisma.$TaskReviewPayload<ExtArgs>
        fields: Prisma.TaskReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload>
          }
          findFirst: {
            args: Prisma.TaskReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload>
          }
          findMany: {
            args: Prisma.TaskReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload>[]
          }
          create: {
            args: Prisma.TaskReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload>
          }
          createMany: {
            args: Prisma.TaskReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload>[]
          }
          delete: {
            args: Prisma.TaskReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload>
          }
          update: {
            args: Prisma.TaskReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload>
          }
          deleteMany: {
            args: Prisma.TaskReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload>[]
          }
          upsert: {
            args: Prisma.TaskReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskReviewPayload>
          }
          aggregate: {
            args: Prisma.TaskReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskReview>
          }
          groupBy: {
            args: Prisma.TaskReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskReviewCountArgs<ExtArgs>
            result: $Utils.Optional<TaskReviewCountAggregateOutputType> | number
          }
        }
      }
      Buyout: {
        payload: Prisma.$BuyoutPayload<ExtArgs>
        fields: Prisma.BuyoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuyoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload>
          }
          findFirst: {
            args: Prisma.BuyoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload>
          }
          findMany: {
            args: Prisma.BuyoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload>[]
          }
          create: {
            args: Prisma.BuyoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload>
          }
          createMany: {
            args: Prisma.BuyoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BuyoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload>[]
          }
          delete: {
            args: Prisma.BuyoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload>
          }
          update: {
            args: Prisma.BuyoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload>
          }
          deleteMany: {
            args: Prisma.BuyoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuyoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BuyoutUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload>[]
          }
          upsert: {
            args: Prisma.BuyoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyoutPayload>
          }
          aggregate: {
            args: Prisma.BuyoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuyout>
          }
          groupBy: {
            args: Prisma.BuyoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuyoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyoutCountArgs<ExtArgs>
            result: $Utils.Optional<BuyoutCountAggregateOutputType> | number
          }
        }
      }
      Punishment: {
        payload: Prisma.$PunishmentPayload<ExtArgs>
        fields: Prisma.PunishmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PunishmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PunishmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload>
          }
          findFirst: {
            args: Prisma.PunishmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PunishmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload>
          }
          findMany: {
            args: Prisma.PunishmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload>[]
          }
          create: {
            args: Prisma.PunishmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload>
          }
          createMany: {
            args: Prisma.PunishmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PunishmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload>[]
          }
          delete: {
            args: Prisma.PunishmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload>
          }
          update: {
            args: Prisma.PunishmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload>
          }
          deleteMany: {
            args: Prisma.PunishmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PunishmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PunishmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload>[]
          }
          upsert: {
            args: Prisma.PunishmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PunishmentPayload>
          }
          aggregate: {
            args: Prisma.PunishmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePunishment>
          }
          groupBy: {
            args: Prisma.PunishmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PunishmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PunishmentCountArgs<ExtArgs>
            result: $Utils.Optional<PunishmentCountAggregateOutputType> | number
          }
        }
      }
      History: {
        payload: Prisma.$HistoryPayload<ExtArgs>
        fields: Prisma.HistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          findFirst: {
            args: Prisma.HistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          findMany: {
            args: Prisma.HistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>[]
          }
          create: {
            args: Prisma.HistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          createMany: {
            args: Prisma.HistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>[]
          }
          delete: {
            args: Prisma.HistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          update: {
            args: Prisma.HistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          deleteMany: {
            args: Prisma.HistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>[]
          }
          upsert: {
            args: Prisma.HistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          aggregate: {
            args: Prisma.HistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistory>
          }
          groupBy: {
            args: Prisma.HistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoryCountArgs<ExtArgs>
            result: $Utils.Optional<HistoryCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      PaymentShare: {
        payload: Prisma.$PaymentSharePayload<ExtArgs>
        fields: Prisma.PaymentShareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentShareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentShareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload>
          }
          findFirst: {
            args: Prisma.PaymentShareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentShareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload>
          }
          findMany: {
            args: Prisma.PaymentShareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload>[]
          }
          create: {
            args: Prisma.PaymentShareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload>
          }
          createMany: {
            args: Prisma.PaymentShareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentShareCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload>[]
          }
          delete: {
            args: Prisma.PaymentShareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload>
          }
          update: {
            args: Prisma.PaymentShareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload>
          }
          deleteMany: {
            args: Prisma.PaymentShareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentShareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentShareUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload>[]
          }
          upsert: {
            args: Prisma.PaymentShareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSharePayload>
          }
          aggregate: {
            args: Prisma.PaymentShareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentShare>
          }
          groupBy: {
            args: Prisma.PaymentShareGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentShareGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentShareCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentShareCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    profile?: ProfileOmit
    house?: HouseOmit
    user?: UserOmit
    task?: TaskOmit
    taskReview?: TaskReviewOmit
    buyout?: BuyoutOmit
    punishment?: PunishmentOmit
    history?: HistoryOmit
    account?: AccountOmit
    paymentShare?: PaymentShareOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    users: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ProfileCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type HouseCountOutputType
   */

  export type HouseCountOutputType = {
    members: number
    tasks: number
    accounts: number
    punishments: number
    history: number
  }

  export type HouseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | HouseCountOutputTypeCountMembersArgs
    tasks?: boolean | HouseCountOutputTypeCountTasksArgs
    accounts?: boolean | HouseCountOutputTypeCountAccountsArgs
    punishments?: boolean | HouseCountOutputTypeCountPunishmentsArgs
    history?: boolean | HouseCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * HouseCountOutputType without action
   */
  export type HouseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HouseCountOutputType
     */
    select?: HouseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HouseCountOutputType without action
   */
  export type HouseCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * HouseCountOutputType without action
   */
  export type HouseCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * HouseCountOutputType without action
   */
  export type HouseCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * HouseCountOutputType without action
   */
  export type HouseCountOutputTypeCountPunishmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PunishmentWhereInput
  }

  /**
   * HouseCountOutputType without action
   */
  export type HouseCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    house_admin: number
    tasks_responsible: number
    task_reviews: number
    buyouts: number
    accounts_paid: number
    payment_shares: number
    history: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house_admin?: boolean | UserCountOutputTypeCountHouse_adminArgs
    tasks_responsible?: boolean | UserCountOutputTypeCountTasks_responsibleArgs
    task_reviews?: boolean | UserCountOutputTypeCountTask_reviewsArgs
    buyouts?: boolean | UserCountOutputTypeCountBuyoutsArgs
    accounts_paid?: boolean | UserCountOutputTypeCountAccounts_paidArgs
    payment_shares?: boolean | UserCountOutputTypeCountPayment_sharesArgs
    history?: boolean | UserCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHouse_adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTasks_responsibleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTask_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBuyoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyoutWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccounts_paidArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPayment_sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentShareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    reviews: number
    buyouts: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | TaskCountOutputTypeCountReviewsArgs
    buyouts?: boolean | TaskCountOutputTypeCountBuyoutsArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskReviewWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountBuyoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyoutWhereInput
  }


  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    payment_shares: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_shares?: boolean | AccountCountOutputTypeCountPayment_sharesArgs
  }

  // Custom InputTypes
  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountPayment_sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentShareWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: number
    name: string
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | Profile$usersArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Profile$usersArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Profile$usersArgs<ExtArgs> = {}>(args?: Subset<T, Profile$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'Int'>
    readonly name: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile.users
   */
  export type Profile$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model House
   */

  export type AggregateHouse = {
    _count: HouseCountAggregateOutputType | null
    _avg: HouseAvgAggregateOutputType | null
    _sum: HouseSumAggregateOutputType | null
    _min: HouseMinAggregateOutputType | null
    _max: HouseMaxAggregateOutputType | null
  }

  export type HouseAvgAggregateOutputType = {
    id: number | null
    admin_id: number | null
  }

  export type HouseSumAggregateOutputType = {
    id: number | null
    admin_id: number | null
  }

  export type HouseMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    admin_id: number | null
  }

  export type HouseMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    admin_id: number | null
  }

  export type HouseCountAggregateOutputType = {
    id: number
    name: number
    code: number
    admin_id: number
    _all: number
  }


  export type HouseAvgAggregateInputType = {
    id?: true
    admin_id?: true
  }

  export type HouseSumAggregateInputType = {
    id?: true
    admin_id?: true
  }

  export type HouseMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    admin_id?: true
  }

  export type HouseMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    admin_id?: true
  }

  export type HouseCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    admin_id?: true
    _all?: true
  }

  export type HouseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which House to aggregate.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: HouseOrderByWithRelationInput | HouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Houses
    **/
    _count?: true | HouseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseMaxAggregateInputType
  }

  export type GetHouseAggregateType<T extends HouseAggregateArgs> = {
        [P in keyof T & keyof AggregateHouse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHouse[P]>
      : GetScalarType<T[P], AggregateHouse[P]>
  }




  export type HouseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseWhereInput
    orderBy?: HouseOrderByWithAggregationInput | HouseOrderByWithAggregationInput[]
    by: HouseScalarFieldEnum[] | HouseScalarFieldEnum
    having?: HouseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseCountAggregateInputType | true
    _avg?: HouseAvgAggregateInputType
    _sum?: HouseSumAggregateInputType
    _min?: HouseMinAggregateInputType
    _max?: HouseMaxAggregateInputType
  }

  export type HouseGroupByOutputType = {
    id: number
    name: string
    code: string
    admin_id: number
    _count: HouseCountAggregateOutputType | null
    _avg: HouseAvgAggregateOutputType | null
    _sum: HouseSumAggregateOutputType | null
    _min: HouseMinAggregateOutputType | null
    _max: HouseMaxAggregateOutputType | null
  }

  type GetHouseGroupByPayload<T extends HouseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HouseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseGroupByOutputType[P]>
            : GetScalarType<T[P], HouseGroupByOutputType[P]>
        }
      >
    >


  export type HouseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    admin_id?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
    members?: boolean | House$membersArgs<ExtArgs>
    tasks?: boolean | House$tasksArgs<ExtArgs>
    accounts?: boolean | House$accountsArgs<ExtArgs>
    punishments?: boolean | House$punishmentsArgs<ExtArgs>
    history?: boolean | House$historyArgs<ExtArgs>
    _count?: boolean | HouseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["house"]>

  export type HouseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    admin_id?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["house"]>

  export type HouseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    admin_id?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["house"]>

  export type HouseSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    admin_id?: boolean
  }

  export type HouseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "admin_id", ExtArgs["result"]["house"]>
  export type HouseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
    members?: boolean | House$membersArgs<ExtArgs>
    tasks?: boolean | House$tasksArgs<ExtArgs>
    accounts?: boolean | House$accountsArgs<ExtArgs>
    punishments?: boolean | House$punishmentsArgs<ExtArgs>
    history?: boolean | House$historyArgs<ExtArgs>
    _count?: boolean | HouseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HouseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HouseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HousePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "House"
    objects: {
      admin: Prisma.$UserPayload<ExtArgs>
      members: Prisma.$UserPayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      punishments: Prisma.$PunishmentPayload<ExtArgs>[]
      history: Prisma.$HistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string
      admin_id: number
    }, ExtArgs["result"]["house"]>
    composites: {}
  }

  type HouseGetPayload<S extends boolean | null | undefined | HouseDefaultArgs> = $Result.GetResult<Prisma.$HousePayload, S>

  type HouseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HouseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HouseCountAggregateInputType | true
    }

  export interface HouseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['House'], meta: { name: 'House' } }
    /**
     * Find zero or one House that matches the filter.
     * @param {HouseFindUniqueArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HouseFindUniqueArgs>(args: SelectSubset<T, HouseFindUniqueArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one House that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HouseFindUniqueOrThrowArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HouseFindUniqueOrThrowArgs>(args: SelectSubset<T, HouseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first House that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindFirstArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HouseFindFirstArgs>(args?: SelectSubset<T, HouseFindFirstArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first House that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindFirstOrThrowArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HouseFindFirstOrThrowArgs>(args?: SelectSubset<T, HouseFindFirstOrThrowArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Houses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Houses
     * const houses = await prisma.house.findMany()
     * 
     * // Get first 10 Houses
     * const houses = await prisma.house.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const houseWithIdOnly = await prisma.house.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HouseFindManyArgs>(args?: SelectSubset<T, HouseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a House.
     * @param {HouseCreateArgs} args - Arguments to create a House.
     * @example
     * // Create one House
     * const House = await prisma.house.create({
     *   data: {
     *     // ... data to create a House
     *   }
     * })
     * 
     */
    create<T extends HouseCreateArgs>(args: SelectSubset<T, HouseCreateArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Houses.
     * @param {HouseCreateManyArgs} args - Arguments to create many Houses.
     * @example
     * // Create many Houses
     * const house = await prisma.house.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HouseCreateManyArgs>(args?: SelectSubset<T, HouseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Houses and returns the data saved in the database.
     * @param {HouseCreateManyAndReturnArgs} args - Arguments to create many Houses.
     * @example
     * // Create many Houses
     * const house = await prisma.house.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Houses and only return the `id`
     * const houseWithIdOnly = await prisma.house.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HouseCreateManyAndReturnArgs>(args?: SelectSubset<T, HouseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a House.
     * @param {HouseDeleteArgs} args - Arguments to delete one House.
     * @example
     * // Delete one House
     * const House = await prisma.house.delete({
     *   where: {
     *     // ... filter to delete one House
     *   }
     * })
     * 
     */
    delete<T extends HouseDeleteArgs>(args: SelectSubset<T, HouseDeleteArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one House.
     * @param {HouseUpdateArgs} args - Arguments to update one House.
     * @example
     * // Update one House
     * const house = await prisma.house.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HouseUpdateArgs>(args: SelectSubset<T, HouseUpdateArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Houses.
     * @param {HouseDeleteManyArgs} args - Arguments to filter Houses to delete.
     * @example
     * // Delete a few Houses
     * const { count } = await prisma.house.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HouseDeleteManyArgs>(args?: SelectSubset<T, HouseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Houses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Houses
     * const house = await prisma.house.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HouseUpdateManyArgs>(args: SelectSubset<T, HouseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Houses and returns the data updated in the database.
     * @param {HouseUpdateManyAndReturnArgs} args - Arguments to update many Houses.
     * @example
     * // Update many Houses
     * const house = await prisma.house.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Houses and only return the `id`
     * const houseWithIdOnly = await prisma.house.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HouseUpdateManyAndReturnArgs>(args: SelectSubset<T, HouseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one House.
     * @param {HouseUpsertArgs} args - Arguments to update or create a House.
     * @example
     * // Update or create a House
     * const house = await prisma.house.upsert({
     *   create: {
     *     // ... data to create a House
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the House we want to update
     *   }
     * })
     */
    upsert<T extends HouseUpsertArgs>(args: SelectSubset<T, HouseUpsertArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Houses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseCountArgs} args - Arguments to filter Houses to count.
     * @example
     * // Count the number of Houses
     * const count = await prisma.house.count({
     *   where: {
     *     // ... the filter for the Houses we want to count
     *   }
     * })
    **/
    count<T extends HouseCountArgs>(
      args?: Subset<T, HouseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a House.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseAggregateArgs>(args: Subset<T, HouseAggregateArgs>): Prisma.PrismaPromise<GetHouseAggregateType<T>>

    /**
     * Group by House.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseGroupByArgs['orderBy'] }
        : { orderBy?: HouseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the House model
   */
  readonly fields: HouseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for House.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HouseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    members<T extends House$membersArgs<ExtArgs> = {}>(args?: Subset<T, House$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks<T extends House$tasksArgs<ExtArgs> = {}>(args?: Subset<T, House$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends House$accountsArgs<ExtArgs> = {}>(args?: Subset<T, House$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    punishments<T extends House$punishmentsArgs<ExtArgs> = {}>(args?: Subset<T, House$punishmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    history<T extends House$historyArgs<ExtArgs> = {}>(args?: Subset<T, House$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the House model
   */
  interface HouseFieldRefs {
    readonly id: FieldRef<"House", 'Int'>
    readonly name: FieldRef<"House", 'String'>
    readonly code: FieldRef<"House", 'String'>
    readonly admin_id: FieldRef<"House", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * House findUnique
   */
  export type HouseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter, which House to fetch.
     */
    where: HouseWhereUniqueInput
  }

  /**
   * House findUniqueOrThrow
   */
  export type HouseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter, which House to fetch.
     */
    where: HouseWhereUniqueInput
  }

  /**
   * House findFirst
   */
  export type HouseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter, which House to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: HouseOrderByWithRelationInput | HouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Houses.
     */
    distinct?: HouseScalarFieldEnum | HouseScalarFieldEnum[]
  }

  /**
   * House findFirstOrThrow
   */
  export type HouseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter, which House to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: HouseOrderByWithRelationInput | HouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Houses.
     */
    distinct?: HouseScalarFieldEnum | HouseScalarFieldEnum[]
  }

  /**
   * House findMany
   */
  export type HouseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter, which Houses to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: HouseOrderByWithRelationInput | HouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    distinct?: HouseScalarFieldEnum | HouseScalarFieldEnum[]
  }

  /**
   * House create
   */
  export type HouseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * The data needed to create a House.
     */
    data: XOR<HouseCreateInput, HouseUncheckedCreateInput>
  }

  /**
   * House createMany
   */
  export type HouseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Houses.
     */
    data: HouseCreateManyInput | HouseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * House createManyAndReturn
   */
  export type HouseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * The data used to create many Houses.
     */
    data: HouseCreateManyInput | HouseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * House update
   */
  export type HouseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * The data needed to update a House.
     */
    data: XOR<HouseUpdateInput, HouseUncheckedUpdateInput>
    /**
     * Choose, which House to update.
     */
    where: HouseWhereUniqueInput
  }

  /**
   * House updateMany
   */
  export type HouseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Houses.
     */
    data: XOR<HouseUpdateManyMutationInput, HouseUncheckedUpdateManyInput>
    /**
     * Filter which Houses to update
     */
    where?: HouseWhereInput
    /**
     * Limit how many Houses to update.
     */
    limit?: number
  }

  /**
   * House updateManyAndReturn
   */
  export type HouseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * The data used to update Houses.
     */
    data: XOR<HouseUpdateManyMutationInput, HouseUncheckedUpdateManyInput>
    /**
     * Filter which Houses to update
     */
    where?: HouseWhereInput
    /**
     * Limit how many Houses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * House upsert
   */
  export type HouseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * The filter to search for the House to update in case it exists.
     */
    where: HouseWhereUniqueInput
    /**
     * In case the House found by the `where` argument doesn't exist, create a new House with this data.
     */
    create: XOR<HouseCreateInput, HouseUncheckedCreateInput>
    /**
     * In case the House was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseUpdateInput, HouseUncheckedUpdateInput>
  }

  /**
   * House delete
   */
  export type HouseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter which House to delete.
     */
    where: HouseWhereUniqueInput
  }

  /**
   * House deleteMany
   */
  export type HouseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Houses to delete
     */
    where?: HouseWhereInput
    /**
     * Limit how many Houses to delete.
     */
    limit?: number
  }

  /**
   * House.members
   */
  export type House$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * House.tasks
   */
  export type House$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * House.accounts
   */
  export type House$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * House.punishments
   */
  export type House$punishmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
    where?: PunishmentWhereInput
    orderBy?: PunishmentOrderByWithRelationInput | PunishmentOrderByWithRelationInput[]
    cursor?: PunishmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PunishmentScalarFieldEnum | PunishmentScalarFieldEnum[]
  }

  /**
   * House.history
   */
  export type House$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    cursor?: HistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }

  /**
   * House without action
   */
  export type HouseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    profile_id: number | null
    house_id: number | null
    score: number | null
    star_avg: Decimal | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    profile_id: number | null
    house_id: number | null
    score: number | null
    star_avg: Decimal | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password_hash: string | null
    profile_id: number | null
    house_id: number | null
    house_status: $Enums.HouseStatus | null
    score: number | null
    star_avg: Decimal | null
    avatar_color: string | null
    created_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password_hash: string | null
    profile_id: number | null
    house_id: number | null
    house_status: $Enums.HouseStatus | null
    score: number | null
    star_avg: Decimal | null
    avatar_color: string | null
    created_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password_hash: number
    profile_id: number
    house_id: number
    house_status: number
    score: number
    star_avg: number
    avatar_color: number
    created_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    profile_id?: true
    house_id?: true
    score?: true
    star_avg?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    profile_id?: true
    house_id?: true
    score?: true
    star_avg?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    profile_id?: true
    house_id?: true
    house_status?: true
    score?: true
    star_avg?: true
    avatar_color?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    profile_id?: true
    house_id?: true
    house_status?: true
    score?: true
    star_avg?: true
    avatar_color?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    profile_id?: true
    house_id?: true
    house_status?: true
    score?: true
    star_avg?: true
    avatar_color?: true
    created_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_id: number | null
    house_status: $Enums.HouseStatus
    score: number
    star_avg: Decimal | null
    avatar_color: string | null
    created_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    profile_id?: boolean
    house_id?: boolean
    house_status?: boolean
    score?: boolean
    star_avg?: boolean
    avatar_color?: boolean
    created_at?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    house?: boolean | User$houseArgs<ExtArgs>
    house_admin?: boolean | User$house_adminArgs<ExtArgs>
    tasks_responsible?: boolean | User$tasks_responsibleArgs<ExtArgs>
    task_reviews?: boolean | User$task_reviewsArgs<ExtArgs>
    buyouts?: boolean | User$buyoutsArgs<ExtArgs>
    accounts_paid?: boolean | User$accounts_paidArgs<ExtArgs>
    payment_shares?: boolean | User$payment_sharesArgs<ExtArgs>
    history?: boolean | User$historyArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    profile_id?: boolean
    house_id?: boolean
    house_status?: boolean
    score?: boolean
    star_avg?: boolean
    avatar_color?: boolean
    created_at?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    house?: boolean | User$houseArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    profile_id?: boolean
    house_id?: boolean
    house_status?: boolean
    score?: boolean
    star_avg?: boolean
    avatar_color?: boolean
    created_at?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    house?: boolean | User$houseArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    profile_id?: boolean
    house_id?: boolean
    house_status?: boolean
    score?: boolean
    star_avg?: boolean
    avatar_color?: boolean
    created_at?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password_hash" | "profile_id" | "house_id" | "house_status" | "score" | "star_avg" | "avatar_color" | "created_at", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    house?: boolean | User$houseArgs<ExtArgs>
    house_admin?: boolean | User$house_adminArgs<ExtArgs>
    tasks_responsible?: boolean | User$tasks_responsibleArgs<ExtArgs>
    task_reviews?: boolean | User$task_reviewsArgs<ExtArgs>
    buyouts?: boolean | User$buyoutsArgs<ExtArgs>
    accounts_paid?: boolean | User$accounts_paidArgs<ExtArgs>
    payment_shares?: boolean | User$payment_sharesArgs<ExtArgs>
    history?: boolean | User$historyArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    house?: boolean | User$houseArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    house?: boolean | User$houseArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs>
      house: Prisma.$HousePayload<ExtArgs> | null
      house_admin: Prisma.$HousePayload<ExtArgs>[]
      tasks_responsible: Prisma.$TaskPayload<ExtArgs>[]
      task_reviews: Prisma.$TaskReviewPayload<ExtArgs>[]
      buyouts: Prisma.$BuyoutPayload<ExtArgs>[]
      accounts_paid: Prisma.$AccountPayload<ExtArgs>[]
      payment_shares: Prisma.$PaymentSharePayload<ExtArgs>[]
      history: Prisma.$HistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password_hash: string
      profile_id: number
      house_id: number | null
      house_status: $Enums.HouseStatus
      score: number
      star_avg: Prisma.Decimal | null
      avatar_color: string | null
      created_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    house<T extends User$houseArgs<ExtArgs> = {}>(args?: Subset<T, User$houseArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    house_admin<T extends User$house_adminArgs<ExtArgs> = {}>(args?: Subset<T, User$house_adminArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasks_responsible<T extends User$tasks_responsibleArgs<ExtArgs> = {}>(args?: Subset<T, User$tasks_responsibleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    task_reviews<T extends User$task_reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$task_reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    buyouts<T extends User$buyoutsArgs<ExtArgs> = {}>(args?: Subset<T, User$buyoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts_paid<T extends User$accounts_paidArgs<ExtArgs> = {}>(args?: Subset<T, User$accounts_paidArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payment_shares<T extends User$payment_sharesArgs<ExtArgs> = {}>(args?: Subset<T, User$payment_sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    history<T extends User$historyArgs<ExtArgs> = {}>(args?: Subset<T, User$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password_hash: FieldRef<"User", 'String'>
    readonly profile_id: FieldRef<"User", 'Int'>
    readonly house_id: FieldRef<"User", 'Int'>
    readonly house_status: FieldRef<"User", 'HouseStatus'>
    readonly score: FieldRef<"User", 'Int'>
    readonly star_avg: FieldRef<"User", 'Decimal'>
    readonly avatar_color: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.house
   */
  export type User$houseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    where?: HouseWhereInput
  }

  /**
   * User.house_admin
   */
  export type User$house_adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the House
     */
    omit?: HouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    where?: HouseWhereInput
    orderBy?: HouseOrderByWithRelationInput | HouseOrderByWithRelationInput[]
    cursor?: HouseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HouseScalarFieldEnum | HouseScalarFieldEnum[]
  }

  /**
   * User.tasks_responsible
   */
  export type User$tasks_responsibleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.task_reviews
   */
  export type User$task_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    where?: TaskReviewWhereInput
    orderBy?: TaskReviewOrderByWithRelationInput | TaskReviewOrderByWithRelationInput[]
    cursor?: TaskReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskReviewScalarFieldEnum | TaskReviewScalarFieldEnum[]
  }

  /**
   * User.buyouts
   */
  export type User$buyoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    where?: BuyoutWhereInput
    orderBy?: BuyoutOrderByWithRelationInput | BuyoutOrderByWithRelationInput[]
    cursor?: BuyoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyoutScalarFieldEnum | BuyoutScalarFieldEnum[]
  }

  /**
   * User.accounts_paid
   */
  export type User$accounts_paidArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.payment_shares
   */
  export type User$payment_sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    where?: PaymentShareWhereInput
    orderBy?: PaymentShareOrderByWithRelationInput | PaymentShareOrderByWithRelationInput[]
    cursor?: PaymentShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentShareScalarFieldEnum | PaymentShareScalarFieldEnum[]
  }

  /**
   * User.history
   */
  export type User$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    cursor?: HistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    id: number | null
    house_id: number | null
    points: number | null
    responsible_id: number | null
    star_average: Decimal | null
  }

  export type TaskSumAggregateOutputType = {
    id: number | null
    house_id: number | null
    points: number | null
    responsible_id: number | null
    star_average: Decimal | null
  }

  export type TaskMinAggregateOutputType = {
    id: number | null
    house_id: number | null
    title: string | null
    description: string | null
    frequency: $Enums.TaskFrequency | null
    points: number | null
    responsible_id: number | null
    due_date: Date | null
    status: $Enums.TaskStatus | null
    can_buy_out: boolean | null
    star_average: Decimal | null
  }

  export type TaskMaxAggregateOutputType = {
    id: number | null
    house_id: number | null
    title: string | null
    description: string | null
    frequency: $Enums.TaskFrequency | null
    points: number | null
    responsible_id: number | null
    due_date: Date | null
    status: $Enums.TaskStatus | null
    can_buy_out: boolean | null
    star_average: Decimal | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    house_id: number
    title: number
    description: number
    frequency: number
    points: number
    responsible_id: number
    due_date: number
    status: number
    can_buy_out: number
    star_average: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    id?: true
    house_id?: true
    points?: true
    responsible_id?: true
    star_average?: true
  }

  export type TaskSumAggregateInputType = {
    id?: true
    house_id?: true
    points?: true
    responsible_id?: true
    star_average?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    house_id?: true
    title?: true
    description?: true
    frequency?: true
    points?: true
    responsible_id?: true
    due_date?: true
    status?: true
    can_buy_out?: true
    star_average?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    house_id?: true
    title?: true
    description?: true
    frequency?: true
    points?: true
    responsible_id?: true
    due_date?: true
    status?: true
    can_buy_out?: true
    star_average?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    house_id?: true
    title?: true
    description?: true
    frequency?: true
    points?: true
    responsible_id?: true
    due_date?: true
    status?: true
    can_buy_out?: true
    star_average?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: number
    house_id: number
    title: string
    description: string | null
    frequency: $Enums.TaskFrequency
    points: number
    responsible_id: number | null
    due_date: Date
    status: $Enums.TaskStatus
    can_buy_out: boolean
    star_average: Decimal | null
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    title?: boolean
    description?: boolean
    frequency?: boolean
    points?: boolean
    responsible_id?: boolean
    due_date?: boolean
    status?: boolean
    can_buy_out?: boolean
    star_average?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
    responsible?: boolean | Task$responsibleArgs<ExtArgs>
    reviews?: boolean | Task$reviewsArgs<ExtArgs>
    buyouts?: boolean | Task$buyoutsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    title?: boolean
    description?: boolean
    frequency?: boolean
    points?: boolean
    responsible_id?: boolean
    due_date?: boolean
    status?: boolean
    can_buy_out?: boolean
    star_average?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
    responsible?: boolean | Task$responsibleArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    title?: boolean
    description?: boolean
    frequency?: boolean
    points?: boolean
    responsible_id?: boolean
    due_date?: boolean
    status?: boolean
    can_buy_out?: boolean
    star_average?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
    responsible?: boolean | Task$responsibleArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    house_id?: boolean
    title?: boolean
    description?: boolean
    frequency?: boolean
    points?: boolean
    responsible_id?: boolean
    due_date?: boolean
    status?: boolean
    can_buy_out?: boolean
    star_average?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "house_id" | "title" | "description" | "frequency" | "points" | "responsible_id" | "due_date" | "status" | "can_buy_out" | "star_average", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
    responsible?: boolean | Task$responsibleArgs<ExtArgs>
    reviews?: boolean | Task$reviewsArgs<ExtArgs>
    buyouts?: boolean | Task$buyoutsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
    responsible?: boolean | Task$responsibleArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
    responsible?: boolean | Task$responsibleArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      house: Prisma.$HousePayload<ExtArgs>
      responsible: Prisma.$UserPayload<ExtArgs> | null
      reviews: Prisma.$TaskReviewPayload<ExtArgs>[]
      buyouts: Prisma.$BuyoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      house_id: number
      title: string
      description: string | null
      frequency: $Enums.TaskFrequency
      points: number
      responsible_id: number | null
      due_date: Date
      status: $Enums.TaskStatus
      can_buy_out: boolean
      star_average: Prisma.Decimal | null
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    house<T extends HouseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseDefaultArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    responsible<T extends Task$responsibleArgs<ExtArgs> = {}>(args?: Subset<T, Task$responsibleArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reviews<T extends Task$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Task$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    buyouts<T extends Task$buyoutsArgs<ExtArgs> = {}>(args?: Subset<T, Task$buyoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'Int'>
    readonly house_id: FieldRef<"Task", 'Int'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly frequency: FieldRef<"Task", 'TaskFrequency'>
    readonly points: FieldRef<"Task", 'Int'>
    readonly responsible_id: FieldRef<"Task", 'Int'>
    readonly due_date: FieldRef<"Task", 'DateTime'>
    readonly status: FieldRef<"Task", 'TaskStatus'>
    readonly can_buy_out: FieldRef<"Task", 'Boolean'>
    readonly star_average: FieldRef<"Task", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.responsible
   */
  export type Task$responsibleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Task.reviews
   */
  export type Task$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    where?: TaskReviewWhereInput
    orderBy?: TaskReviewOrderByWithRelationInput | TaskReviewOrderByWithRelationInput[]
    cursor?: TaskReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskReviewScalarFieldEnum | TaskReviewScalarFieldEnum[]
  }

  /**
   * Task.buyouts
   */
  export type Task$buyoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    where?: BuyoutWhereInput
    orderBy?: BuyoutOrderByWithRelationInput | BuyoutOrderByWithRelationInput[]
    cursor?: BuyoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyoutScalarFieldEnum | BuyoutScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model TaskReview
   */

  export type AggregateTaskReview = {
    _count: TaskReviewCountAggregateOutputType | null
    _avg: TaskReviewAvgAggregateOutputType | null
    _sum: TaskReviewSumAggregateOutputType | null
    _min: TaskReviewMinAggregateOutputType | null
    _max: TaskReviewMaxAggregateOutputType | null
  }

  export type TaskReviewAvgAggregateOutputType = {
    task_id: number | null
    reviewer_id: number | null
    stars: number | null
  }

  export type TaskReviewSumAggregateOutputType = {
    task_id: number | null
    reviewer_id: number | null
    stars: number | null
  }

  export type TaskReviewMinAggregateOutputType = {
    task_id: number | null
    reviewer_id: number | null
    stars: number | null
  }

  export type TaskReviewMaxAggregateOutputType = {
    task_id: number | null
    reviewer_id: number | null
    stars: number | null
  }

  export type TaskReviewCountAggregateOutputType = {
    task_id: number
    reviewer_id: number
    stars: number
    _all: number
  }


  export type TaskReviewAvgAggregateInputType = {
    task_id?: true
    reviewer_id?: true
    stars?: true
  }

  export type TaskReviewSumAggregateInputType = {
    task_id?: true
    reviewer_id?: true
    stars?: true
  }

  export type TaskReviewMinAggregateInputType = {
    task_id?: true
    reviewer_id?: true
    stars?: true
  }

  export type TaskReviewMaxAggregateInputType = {
    task_id?: true
    reviewer_id?: true
    stars?: true
  }

  export type TaskReviewCountAggregateInputType = {
    task_id?: true
    reviewer_id?: true
    stars?: true
    _all?: true
  }

  export type TaskReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskReview to aggregate.
     */
    where?: TaskReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskReviews to fetch.
     */
    orderBy?: TaskReviewOrderByWithRelationInput | TaskReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskReviews
    **/
    _count?: true | TaskReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskReviewMaxAggregateInputType
  }

  export type GetTaskReviewAggregateType<T extends TaskReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskReview[P]>
      : GetScalarType<T[P], AggregateTaskReview[P]>
  }




  export type TaskReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskReviewWhereInput
    orderBy?: TaskReviewOrderByWithAggregationInput | TaskReviewOrderByWithAggregationInput[]
    by: TaskReviewScalarFieldEnum[] | TaskReviewScalarFieldEnum
    having?: TaskReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskReviewCountAggregateInputType | true
    _avg?: TaskReviewAvgAggregateInputType
    _sum?: TaskReviewSumAggregateInputType
    _min?: TaskReviewMinAggregateInputType
    _max?: TaskReviewMaxAggregateInputType
  }

  export type TaskReviewGroupByOutputType = {
    task_id: number
    reviewer_id: number
    stars: number
    _count: TaskReviewCountAggregateOutputType | null
    _avg: TaskReviewAvgAggregateOutputType | null
    _sum: TaskReviewSumAggregateOutputType | null
    _min: TaskReviewMinAggregateOutputType | null
    _max: TaskReviewMaxAggregateOutputType | null
  }

  type GetTaskReviewGroupByPayload<T extends TaskReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskReviewGroupByOutputType[P]>
            : GetScalarType<T[P], TaskReviewGroupByOutputType[P]>
        }
      >
    >


  export type TaskReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    task_id?: boolean
    reviewer_id?: boolean
    stars?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskReview"]>

  export type TaskReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    task_id?: boolean
    reviewer_id?: boolean
    stars?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskReview"]>

  export type TaskReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    task_id?: boolean
    reviewer_id?: boolean
    stars?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskReview"]>

  export type TaskReviewSelectScalar = {
    task_id?: boolean
    reviewer_id?: boolean
    stars?: boolean
  }

  export type TaskReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"task_id" | "reviewer_id" | "stars", ExtArgs["result"]["taskReview"]>
  export type TaskReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TaskReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TaskReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TaskReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskReview"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>
      reviewer: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      task_id: number
      reviewer_id: number
      stars: number
    }, ExtArgs["result"]["taskReview"]>
    composites: {}
  }

  type TaskReviewGetPayload<S extends boolean | null | undefined | TaskReviewDefaultArgs> = $Result.GetResult<Prisma.$TaskReviewPayload, S>

  type TaskReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskReviewCountAggregateInputType | true
    }

  export interface TaskReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskReview'], meta: { name: 'TaskReview' } }
    /**
     * Find zero or one TaskReview that matches the filter.
     * @param {TaskReviewFindUniqueArgs} args - Arguments to find a TaskReview
     * @example
     * // Get one TaskReview
     * const taskReview = await prisma.taskReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskReviewFindUniqueArgs>(args: SelectSubset<T, TaskReviewFindUniqueArgs<ExtArgs>>): Prisma__TaskReviewClient<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TaskReview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskReviewFindUniqueOrThrowArgs} args - Arguments to find a TaskReview
     * @example
     * // Get one TaskReview
     * const taskReview = await prisma.taskReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskReviewClient<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskReviewFindFirstArgs} args - Arguments to find a TaskReview
     * @example
     * // Get one TaskReview
     * const taskReview = await prisma.taskReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskReviewFindFirstArgs>(args?: SelectSubset<T, TaskReviewFindFirstArgs<ExtArgs>>): Prisma__TaskReviewClient<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaskReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskReviewFindFirstOrThrowArgs} args - Arguments to find a TaskReview
     * @example
     * // Get one TaskReview
     * const taskReview = await prisma.taskReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskReviewClient<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TaskReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskReviews
     * const taskReviews = await prisma.taskReview.findMany()
     * 
     * // Get first 10 TaskReviews
     * const taskReviews = await prisma.taskReview.findMany({ take: 10 })
     * 
     * // Only select the `task_id`
     * const taskReviewWithTask_idOnly = await prisma.taskReview.findMany({ select: { task_id: true } })
     * 
     */
    findMany<T extends TaskReviewFindManyArgs>(args?: SelectSubset<T, TaskReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TaskReview.
     * @param {TaskReviewCreateArgs} args - Arguments to create a TaskReview.
     * @example
     * // Create one TaskReview
     * const TaskReview = await prisma.taskReview.create({
     *   data: {
     *     // ... data to create a TaskReview
     *   }
     * })
     * 
     */
    create<T extends TaskReviewCreateArgs>(args: SelectSubset<T, TaskReviewCreateArgs<ExtArgs>>): Prisma__TaskReviewClient<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TaskReviews.
     * @param {TaskReviewCreateManyArgs} args - Arguments to create many TaskReviews.
     * @example
     * // Create many TaskReviews
     * const taskReview = await prisma.taskReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskReviewCreateManyArgs>(args?: SelectSubset<T, TaskReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskReviews and returns the data saved in the database.
     * @param {TaskReviewCreateManyAndReturnArgs} args - Arguments to create many TaskReviews.
     * @example
     * // Create many TaskReviews
     * const taskReview = await prisma.taskReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskReviews and only return the `task_id`
     * const taskReviewWithTask_idOnly = await prisma.taskReview.createManyAndReturn({
     *   select: { task_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TaskReview.
     * @param {TaskReviewDeleteArgs} args - Arguments to delete one TaskReview.
     * @example
     * // Delete one TaskReview
     * const TaskReview = await prisma.taskReview.delete({
     *   where: {
     *     // ... filter to delete one TaskReview
     *   }
     * })
     * 
     */
    delete<T extends TaskReviewDeleteArgs>(args: SelectSubset<T, TaskReviewDeleteArgs<ExtArgs>>): Prisma__TaskReviewClient<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TaskReview.
     * @param {TaskReviewUpdateArgs} args - Arguments to update one TaskReview.
     * @example
     * // Update one TaskReview
     * const taskReview = await prisma.taskReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskReviewUpdateArgs>(args: SelectSubset<T, TaskReviewUpdateArgs<ExtArgs>>): Prisma__TaskReviewClient<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TaskReviews.
     * @param {TaskReviewDeleteManyArgs} args - Arguments to filter TaskReviews to delete.
     * @example
     * // Delete a few TaskReviews
     * const { count } = await prisma.taskReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskReviewDeleteManyArgs>(args?: SelectSubset<T, TaskReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskReviews
     * const taskReview = await prisma.taskReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskReviewUpdateManyArgs>(args: SelectSubset<T, TaskReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskReviews and returns the data updated in the database.
     * @param {TaskReviewUpdateManyAndReturnArgs} args - Arguments to update many TaskReviews.
     * @example
     * // Update many TaskReviews
     * const taskReview = await prisma.taskReview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaskReviews and only return the `task_id`
     * const taskReviewWithTask_idOnly = await prisma.taskReview.updateManyAndReturn({
     *   select: { task_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TaskReview.
     * @param {TaskReviewUpsertArgs} args - Arguments to update or create a TaskReview.
     * @example
     * // Update or create a TaskReview
     * const taskReview = await prisma.taskReview.upsert({
     *   create: {
     *     // ... data to create a TaskReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskReview we want to update
     *   }
     * })
     */
    upsert<T extends TaskReviewUpsertArgs>(args: SelectSubset<T, TaskReviewUpsertArgs<ExtArgs>>): Prisma__TaskReviewClient<$Result.GetResult<Prisma.$TaskReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TaskReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskReviewCountArgs} args - Arguments to filter TaskReviews to count.
     * @example
     * // Count the number of TaskReviews
     * const count = await prisma.taskReview.count({
     *   where: {
     *     // ... the filter for the TaskReviews we want to count
     *   }
     * })
    **/
    count<T extends TaskReviewCountArgs>(
      args?: Subset<T, TaskReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskReviewAggregateArgs>(args: Subset<T, TaskReviewAggregateArgs>): Prisma.PrismaPromise<GetTaskReviewAggregateType<T>>

    /**
     * Group by TaskReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskReviewGroupByArgs['orderBy'] }
        : { orderBy?: TaskReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskReview model
   */
  readonly fields: TaskReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviewer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskReview model
   */
  interface TaskReviewFieldRefs {
    readonly task_id: FieldRef<"TaskReview", 'Int'>
    readonly reviewer_id: FieldRef<"TaskReview", 'Int'>
    readonly stars: FieldRef<"TaskReview", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TaskReview findUnique
   */
  export type TaskReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    /**
     * Filter, which TaskReview to fetch.
     */
    where: TaskReviewWhereUniqueInput
  }

  /**
   * TaskReview findUniqueOrThrow
   */
  export type TaskReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    /**
     * Filter, which TaskReview to fetch.
     */
    where: TaskReviewWhereUniqueInput
  }

  /**
   * TaskReview findFirst
   */
  export type TaskReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    /**
     * Filter, which TaskReview to fetch.
     */
    where?: TaskReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskReviews to fetch.
     */
    orderBy?: TaskReviewOrderByWithRelationInput | TaskReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskReviews.
     */
    cursor?: TaskReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskReviews.
     */
    distinct?: TaskReviewScalarFieldEnum | TaskReviewScalarFieldEnum[]
  }

  /**
   * TaskReview findFirstOrThrow
   */
  export type TaskReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    /**
     * Filter, which TaskReview to fetch.
     */
    where?: TaskReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskReviews to fetch.
     */
    orderBy?: TaskReviewOrderByWithRelationInput | TaskReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskReviews.
     */
    cursor?: TaskReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskReviews.
     */
    distinct?: TaskReviewScalarFieldEnum | TaskReviewScalarFieldEnum[]
  }

  /**
   * TaskReview findMany
   */
  export type TaskReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    /**
     * Filter, which TaskReviews to fetch.
     */
    where?: TaskReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskReviews to fetch.
     */
    orderBy?: TaskReviewOrderByWithRelationInput | TaskReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskReviews.
     */
    cursor?: TaskReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskReviews.
     */
    skip?: number
    distinct?: TaskReviewScalarFieldEnum | TaskReviewScalarFieldEnum[]
  }

  /**
   * TaskReview create
   */
  export type TaskReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a TaskReview.
     */
    data: XOR<TaskReviewCreateInput, TaskReviewUncheckedCreateInput>
  }

  /**
   * TaskReview createMany
   */
  export type TaskReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskReviews.
     */
    data: TaskReviewCreateManyInput | TaskReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskReview createManyAndReturn
   */
  export type TaskReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * The data used to create many TaskReviews.
     */
    data: TaskReviewCreateManyInput | TaskReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskReview update
   */
  export type TaskReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a TaskReview.
     */
    data: XOR<TaskReviewUpdateInput, TaskReviewUncheckedUpdateInput>
    /**
     * Choose, which TaskReview to update.
     */
    where: TaskReviewWhereUniqueInput
  }

  /**
   * TaskReview updateMany
   */
  export type TaskReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskReviews.
     */
    data: XOR<TaskReviewUpdateManyMutationInput, TaskReviewUncheckedUpdateManyInput>
    /**
     * Filter which TaskReviews to update
     */
    where?: TaskReviewWhereInput
    /**
     * Limit how many TaskReviews to update.
     */
    limit?: number
  }

  /**
   * TaskReview updateManyAndReturn
   */
  export type TaskReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * The data used to update TaskReviews.
     */
    data: XOR<TaskReviewUpdateManyMutationInput, TaskReviewUncheckedUpdateManyInput>
    /**
     * Filter which TaskReviews to update
     */
    where?: TaskReviewWhereInput
    /**
     * Limit how many TaskReviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskReview upsert
   */
  export type TaskReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the TaskReview to update in case it exists.
     */
    where: TaskReviewWhereUniqueInput
    /**
     * In case the TaskReview found by the `where` argument doesn't exist, create a new TaskReview with this data.
     */
    create: XOR<TaskReviewCreateInput, TaskReviewUncheckedCreateInput>
    /**
     * In case the TaskReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskReviewUpdateInput, TaskReviewUncheckedUpdateInput>
  }

  /**
   * TaskReview delete
   */
  export type TaskReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
    /**
     * Filter which TaskReview to delete.
     */
    where: TaskReviewWhereUniqueInput
  }

  /**
   * TaskReview deleteMany
   */
  export type TaskReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskReviews to delete
     */
    where?: TaskReviewWhereInput
    /**
     * Limit how many TaskReviews to delete.
     */
    limit?: number
  }

  /**
   * TaskReview without action
   */
  export type TaskReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskReview
     */
    select?: TaskReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskReview
     */
    omit?: TaskReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskReviewInclude<ExtArgs> | null
  }


  /**
   * Model Buyout
   */

  export type AggregateBuyout = {
    _count: BuyoutCountAggregateOutputType | null
    _avg: BuyoutAvgAggregateOutputType | null
    _sum: BuyoutSumAggregateOutputType | null
    _min: BuyoutMinAggregateOutputType | null
    _max: BuyoutMaxAggregateOutputType | null
  }

  export type BuyoutAvgAggregateOutputType = {
    user_id: number | null
    task_id: number | null
  }

  export type BuyoutSumAggregateOutputType = {
    user_id: number | null
    task_id: number | null
  }

  export type BuyoutMinAggregateOutputType = {
    user_id: number | null
    task_id: number | null
    cycle_start_date: Date | null
  }

  export type BuyoutMaxAggregateOutputType = {
    user_id: number | null
    task_id: number | null
    cycle_start_date: Date | null
  }

  export type BuyoutCountAggregateOutputType = {
    user_id: number
    task_id: number
    cycle_start_date: number
    _all: number
  }


  export type BuyoutAvgAggregateInputType = {
    user_id?: true
    task_id?: true
  }

  export type BuyoutSumAggregateInputType = {
    user_id?: true
    task_id?: true
  }

  export type BuyoutMinAggregateInputType = {
    user_id?: true
    task_id?: true
    cycle_start_date?: true
  }

  export type BuyoutMaxAggregateInputType = {
    user_id?: true
    task_id?: true
    cycle_start_date?: true
  }

  export type BuyoutCountAggregateInputType = {
    user_id?: true
    task_id?: true
    cycle_start_date?: true
    _all?: true
  }

  export type BuyoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buyout to aggregate.
     */
    where?: BuyoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyouts to fetch.
     */
    orderBy?: BuyoutOrderByWithRelationInput | BuyoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buyouts
    **/
    _count?: true | BuyoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuyoutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuyoutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyoutMaxAggregateInputType
  }

  export type GetBuyoutAggregateType<T extends BuyoutAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyout[P]>
      : GetScalarType<T[P], AggregateBuyout[P]>
  }




  export type BuyoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyoutWhereInput
    orderBy?: BuyoutOrderByWithAggregationInput | BuyoutOrderByWithAggregationInput[]
    by: BuyoutScalarFieldEnum[] | BuyoutScalarFieldEnum
    having?: BuyoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyoutCountAggregateInputType | true
    _avg?: BuyoutAvgAggregateInputType
    _sum?: BuyoutSumAggregateInputType
    _min?: BuyoutMinAggregateInputType
    _max?: BuyoutMaxAggregateInputType
  }

  export type BuyoutGroupByOutputType = {
    user_id: number
    task_id: number
    cycle_start_date: Date
    _count: BuyoutCountAggregateOutputType | null
    _avg: BuyoutAvgAggregateOutputType | null
    _sum: BuyoutSumAggregateOutputType | null
    _min: BuyoutMinAggregateOutputType | null
    _max: BuyoutMaxAggregateOutputType | null
  }

  type GetBuyoutGroupByPayload<T extends BuyoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyoutGroupByOutputType[P]>
            : GetScalarType<T[P], BuyoutGroupByOutputType[P]>
        }
      >
    >


  export type BuyoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    task_id?: boolean
    cycle_start_date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyout"]>

  export type BuyoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    task_id?: boolean
    cycle_start_date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyout"]>

  export type BuyoutSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    task_id?: boolean
    cycle_start_date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyout"]>

  export type BuyoutSelectScalar = {
    user_id?: boolean
    task_id?: boolean
    cycle_start_date?: boolean
  }

  export type BuyoutOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_id" | "task_id" | "cycle_start_date", ExtArgs["result"]["buyout"]>
  export type BuyoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }
  export type BuyoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }
  export type BuyoutIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }

  export type $BuyoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Buyout"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      task: Prisma.$TaskPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      task_id: number
      cycle_start_date: Date
    }, ExtArgs["result"]["buyout"]>
    composites: {}
  }

  type BuyoutGetPayload<S extends boolean | null | undefined | BuyoutDefaultArgs> = $Result.GetResult<Prisma.$BuyoutPayload, S>

  type BuyoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuyoutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuyoutCountAggregateInputType | true
    }

  export interface BuyoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Buyout'], meta: { name: 'Buyout' } }
    /**
     * Find zero or one Buyout that matches the filter.
     * @param {BuyoutFindUniqueArgs} args - Arguments to find a Buyout
     * @example
     * // Get one Buyout
     * const buyout = await prisma.buyout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuyoutFindUniqueArgs>(args: SelectSubset<T, BuyoutFindUniqueArgs<ExtArgs>>): Prisma__BuyoutClient<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Buyout that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuyoutFindUniqueOrThrowArgs} args - Arguments to find a Buyout
     * @example
     * // Get one Buyout
     * const buyout = await prisma.buyout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuyoutFindUniqueOrThrowArgs>(args: SelectSubset<T, BuyoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuyoutClient<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Buyout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyoutFindFirstArgs} args - Arguments to find a Buyout
     * @example
     * // Get one Buyout
     * const buyout = await prisma.buyout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuyoutFindFirstArgs>(args?: SelectSubset<T, BuyoutFindFirstArgs<ExtArgs>>): Prisma__BuyoutClient<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Buyout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyoutFindFirstOrThrowArgs} args - Arguments to find a Buyout
     * @example
     * // Get one Buyout
     * const buyout = await prisma.buyout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuyoutFindFirstOrThrowArgs>(args?: SelectSubset<T, BuyoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuyoutClient<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Buyouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buyouts
     * const buyouts = await prisma.buyout.findMany()
     * 
     * // Get first 10 Buyouts
     * const buyouts = await prisma.buyout.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const buyoutWithUser_idOnly = await prisma.buyout.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends BuyoutFindManyArgs>(args?: SelectSubset<T, BuyoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Buyout.
     * @param {BuyoutCreateArgs} args - Arguments to create a Buyout.
     * @example
     * // Create one Buyout
     * const Buyout = await prisma.buyout.create({
     *   data: {
     *     // ... data to create a Buyout
     *   }
     * })
     * 
     */
    create<T extends BuyoutCreateArgs>(args: SelectSubset<T, BuyoutCreateArgs<ExtArgs>>): Prisma__BuyoutClient<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Buyouts.
     * @param {BuyoutCreateManyArgs} args - Arguments to create many Buyouts.
     * @example
     * // Create many Buyouts
     * const buyout = await prisma.buyout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuyoutCreateManyArgs>(args?: SelectSubset<T, BuyoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Buyouts and returns the data saved in the database.
     * @param {BuyoutCreateManyAndReturnArgs} args - Arguments to create many Buyouts.
     * @example
     * // Create many Buyouts
     * const buyout = await prisma.buyout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Buyouts and only return the `user_id`
     * const buyoutWithUser_idOnly = await prisma.buyout.createManyAndReturn({
     *   select: { user_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BuyoutCreateManyAndReturnArgs>(args?: SelectSubset<T, BuyoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Buyout.
     * @param {BuyoutDeleteArgs} args - Arguments to delete one Buyout.
     * @example
     * // Delete one Buyout
     * const Buyout = await prisma.buyout.delete({
     *   where: {
     *     // ... filter to delete one Buyout
     *   }
     * })
     * 
     */
    delete<T extends BuyoutDeleteArgs>(args: SelectSubset<T, BuyoutDeleteArgs<ExtArgs>>): Prisma__BuyoutClient<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Buyout.
     * @param {BuyoutUpdateArgs} args - Arguments to update one Buyout.
     * @example
     * // Update one Buyout
     * const buyout = await prisma.buyout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuyoutUpdateArgs>(args: SelectSubset<T, BuyoutUpdateArgs<ExtArgs>>): Prisma__BuyoutClient<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Buyouts.
     * @param {BuyoutDeleteManyArgs} args - Arguments to filter Buyouts to delete.
     * @example
     * // Delete a few Buyouts
     * const { count } = await prisma.buyout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuyoutDeleteManyArgs>(args?: SelectSubset<T, BuyoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buyouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buyouts
     * const buyout = await prisma.buyout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuyoutUpdateManyArgs>(args: SelectSubset<T, BuyoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buyouts and returns the data updated in the database.
     * @param {BuyoutUpdateManyAndReturnArgs} args - Arguments to update many Buyouts.
     * @example
     * // Update many Buyouts
     * const buyout = await prisma.buyout.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Buyouts and only return the `user_id`
     * const buyoutWithUser_idOnly = await prisma.buyout.updateManyAndReturn({
     *   select: { user_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BuyoutUpdateManyAndReturnArgs>(args: SelectSubset<T, BuyoutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Buyout.
     * @param {BuyoutUpsertArgs} args - Arguments to update or create a Buyout.
     * @example
     * // Update or create a Buyout
     * const buyout = await prisma.buyout.upsert({
     *   create: {
     *     // ... data to create a Buyout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buyout we want to update
     *   }
     * })
     */
    upsert<T extends BuyoutUpsertArgs>(args: SelectSubset<T, BuyoutUpsertArgs<ExtArgs>>): Prisma__BuyoutClient<$Result.GetResult<Prisma.$BuyoutPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Buyouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyoutCountArgs} args - Arguments to filter Buyouts to count.
     * @example
     * // Count the number of Buyouts
     * const count = await prisma.buyout.count({
     *   where: {
     *     // ... the filter for the Buyouts we want to count
     *   }
     * })
    **/
    count<T extends BuyoutCountArgs>(
      args?: Subset<T, BuyoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buyout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyoutAggregateArgs>(args: Subset<T, BuyoutAggregateArgs>): Prisma.PrismaPromise<GetBuyoutAggregateType<T>>

    /**
     * Group by Buyout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyoutGroupByArgs['orderBy'] }
        : { orderBy?: BuyoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Buyout model
   */
  readonly fields: BuyoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Buyout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuyoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Buyout model
   */
  interface BuyoutFieldRefs {
    readonly user_id: FieldRef<"Buyout", 'Int'>
    readonly task_id: FieldRef<"Buyout", 'Int'>
    readonly cycle_start_date: FieldRef<"Buyout", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Buyout findUnique
   */
  export type BuyoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    /**
     * Filter, which Buyout to fetch.
     */
    where: BuyoutWhereUniqueInput
  }

  /**
   * Buyout findUniqueOrThrow
   */
  export type BuyoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    /**
     * Filter, which Buyout to fetch.
     */
    where: BuyoutWhereUniqueInput
  }

  /**
   * Buyout findFirst
   */
  export type BuyoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    /**
     * Filter, which Buyout to fetch.
     */
    where?: BuyoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyouts to fetch.
     */
    orderBy?: BuyoutOrderByWithRelationInput | BuyoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyouts.
     */
    cursor?: BuyoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyouts.
     */
    distinct?: BuyoutScalarFieldEnum | BuyoutScalarFieldEnum[]
  }

  /**
   * Buyout findFirstOrThrow
   */
  export type BuyoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    /**
     * Filter, which Buyout to fetch.
     */
    where?: BuyoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyouts to fetch.
     */
    orderBy?: BuyoutOrderByWithRelationInput | BuyoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyouts.
     */
    cursor?: BuyoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyouts.
     */
    distinct?: BuyoutScalarFieldEnum | BuyoutScalarFieldEnum[]
  }

  /**
   * Buyout findMany
   */
  export type BuyoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    /**
     * Filter, which Buyouts to fetch.
     */
    where?: BuyoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyouts to fetch.
     */
    orderBy?: BuyoutOrderByWithRelationInput | BuyoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buyouts.
     */
    cursor?: BuyoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyouts.
     */
    skip?: number
    distinct?: BuyoutScalarFieldEnum | BuyoutScalarFieldEnum[]
  }

  /**
   * Buyout create
   */
  export type BuyoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    /**
     * The data needed to create a Buyout.
     */
    data: XOR<BuyoutCreateInput, BuyoutUncheckedCreateInput>
  }

  /**
   * Buyout createMany
   */
  export type BuyoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Buyouts.
     */
    data: BuyoutCreateManyInput | BuyoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Buyout createManyAndReturn
   */
  export type BuyoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * The data used to create many Buyouts.
     */
    data: BuyoutCreateManyInput | BuyoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Buyout update
   */
  export type BuyoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    /**
     * The data needed to update a Buyout.
     */
    data: XOR<BuyoutUpdateInput, BuyoutUncheckedUpdateInput>
    /**
     * Choose, which Buyout to update.
     */
    where: BuyoutWhereUniqueInput
  }

  /**
   * Buyout updateMany
   */
  export type BuyoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Buyouts.
     */
    data: XOR<BuyoutUpdateManyMutationInput, BuyoutUncheckedUpdateManyInput>
    /**
     * Filter which Buyouts to update
     */
    where?: BuyoutWhereInput
    /**
     * Limit how many Buyouts to update.
     */
    limit?: number
  }

  /**
   * Buyout updateManyAndReturn
   */
  export type BuyoutUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * The data used to update Buyouts.
     */
    data: XOR<BuyoutUpdateManyMutationInput, BuyoutUncheckedUpdateManyInput>
    /**
     * Filter which Buyouts to update
     */
    where?: BuyoutWhereInput
    /**
     * Limit how many Buyouts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Buyout upsert
   */
  export type BuyoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    /**
     * The filter to search for the Buyout to update in case it exists.
     */
    where: BuyoutWhereUniqueInput
    /**
     * In case the Buyout found by the `where` argument doesn't exist, create a new Buyout with this data.
     */
    create: XOR<BuyoutCreateInput, BuyoutUncheckedCreateInput>
    /**
     * In case the Buyout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyoutUpdateInput, BuyoutUncheckedUpdateInput>
  }

  /**
   * Buyout delete
   */
  export type BuyoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
    /**
     * Filter which Buyout to delete.
     */
    where: BuyoutWhereUniqueInput
  }

  /**
   * Buyout deleteMany
   */
  export type BuyoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buyouts to delete
     */
    where?: BuyoutWhereInput
    /**
     * Limit how many Buyouts to delete.
     */
    limit?: number
  }

  /**
   * Buyout without action
   */
  export type BuyoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyout
     */
    select?: BuyoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyout
     */
    omit?: BuyoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyoutInclude<ExtArgs> | null
  }


  /**
   * Model Punishment
   */

  export type AggregatePunishment = {
    _count: PunishmentCountAggregateOutputType | null
    _avg: PunishmentAvgAggregateOutputType | null
    _sum: PunishmentSumAggregateOutputType | null
    _min: PunishmentMinAggregateOutputType | null
    _max: PunishmentMaxAggregateOutputType | null
  }

  export type PunishmentAvgAggregateOutputType = {
    id: number | null
    house_id: number | null
    penalty_points: number | null
  }

  export type PunishmentSumAggregateOutputType = {
    id: number | null
    house_id: number | null
    penalty_points: number | null
  }

  export type PunishmentMinAggregateOutputType = {
    id: number | null
    house_id: number | null
    description: string | null
    penalty_points: number | null
    is_active: boolean | null
    created_at: Date | null
  }

  export type PunishmentMaxAggregateOutputType = {
    id: number | null
    house_id: number | null
    description: string | null
    penalty_points: number | null
    is_active: boolean | null
    created_at: Date | null
  }

  export type PunishmentCountAggregateOutputType = {
    id: number
    house_id: number
    description: number
    penalty_points: number
    is_active: number
    created_at: number
    _all: number
  }


  export type PunishmentAvgAggregateInputType = {
    id?: true
    house_id?: true
    penalty_points?: true
  }

  export type PunishmentSumAggregateInputType = {
    id?: true
    house_id?: true
    penalty_points?: true
  }

  export type PunishmentMinAggregateInputType = {
    id?: true
    house_id?: true
    description?: true
    penalty_points?: true
    is_active?: true
    created_at?: true
  }

  export type PunishmentMaxAggregateInputType = {
    id?: true
    house_id?: true
    description?: true
    penalty_points?: true
    is_active?: true
    created_at?: true
  }

  export type PunishmentCountAggregateInputType = {
    id?: true
    house_id?: true
    description?: true
    penalty_points?: true
    is_active?: true
    created_at?: true
    _all?: true
  }

  export type PunishmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Punishment to aggregate.
     */
    where?: PunishmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Punishments to fetch.
     */
    orderBy?: PunishmentOrderByWithRelationInput | PunishmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PunishmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Punishments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Punishments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Punishments
    **/
    _count?: true | PunishmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PunishmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PunishmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PunishmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PunishmentMaxAggregateInputType
  }

  export type GetPunishmentAggregateType<T extends PunishmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePunishment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePunishment[P]>
      : GetScalarType<T[P], AggregatePunishment[P]>
  }




  export type PunishmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PunishmentWhereInput
    orderBy?: PunishmentOrderByWithAggregationInput | PunishmentOrderByWithAggregationInput[]
    by: PunishmentScalarFieldEnum[] | PunishmentScalarFieldEnum
    having?: PunishmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PunishmentCountAggregateInputType | true
    _avg?: PunishmentAvgAggregateInputType
    _sum?: PunishmentSumAggregateInputType
    _min?: PunishmentMinAggregateInputType
    _max?: PunishmentMaxAggregateInputType
  }

  export type PunishmentGroupByOutputType = {
    id: number
    house_id: number
    description: string
    penalty_points: number
    is_active: boolean
    created_at: Date
    _count: PunishmentCountAggregateOutputType | null
    _avg: PunishmentAvgAggregateOutputType | null
    _sum: PunishmentSumAggregateOutputType | null
    _min: PunishmentMinAggregateOutputType | null
    _max: PunishmentMaxAggregateOutputType | null
  }

  type GetPunishmentGroupByPayload<T extends PunishmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PunishmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PunishmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PunishmentGroupByOutputType[P]>
            : GetScalarType<T[P], PunishmentGroupByOutputType[P]>
        }
      >
    >


  export type PunishmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    description?: boolean
    penalty_points?: boolean
    is_active?: boolean
    created_at?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["punishment"]>

  export type PunishmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    description?: boolean
    penalty_points?: boolean
    is_active?: boolean
    created_at?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["punishment"]>

  export type PunishmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    description?: boolean
    penalty_points?: boolean
    is_active?: boolean
    created_at?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["punishment"]>

  export type PunishmentSelectScalar = {
    id?: boolean
    house_id?: boolean
    description?: boolean
    penalty_points?: boolean
    is_active?: boolean
    created_at?: boolean
  }

  export type PunishmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "house_id" | "description" | "penalty_points" | "is_active" | "created_at", ExtArgs["result"]["punishment"]>
  export type PunishmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
  }
  export type PunishmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
  }
  export type PunishmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
  }

  export type $PunishmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Punishment"
    objects: {
      house: Prisma.$HousePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      house_id: number
      description: string
      penalty_points: number
      is_active: boolean
      created_at: Date
    }, ExtArgs["result"]["punishment"]>
    composites: {}
  }

  type PunishmentGetPayload<S extends boolean | null | undefined | PunishmentDefaultArgs> = $Result.GetResult<Prisma.$PunishmentPayload, S>

  type PunishmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PunishmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PunishmentCountAggregateInputType | true
    }

  export interface PunishmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Punishment'], meta: { name: 'Punishment' } }
    /**
     * Find zero or one Punishment that matches the filter.
     * @param {PunishmentFindUniqueArgs} args - Arguments to find a Punishment
     * @example
     * // Get one Punishment
     * const punishment = await prisma.punishment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PunishmentFindUniqueArgs>(args: SelectSubset<T, PunishmentFindUniqueArgs<ExtArgs>>): Prisma__PunishmentClient<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Punishment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PunishmentFindUniqueOrThrowArgs} args - Arguments to find a Punishment
     * @example
     * // Get one Punishment
     * const punishment = await prisma.punishment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PunishmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PunishmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PunishmentClient<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Punishment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunishmentFindFirstArgs} args - Arguments to find a Punishment
     * @example
     * // Get one Punishment
     * const punishment = await prisma.punishment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PunishmentFindFirstArgs>(args?: SelectSubset<T, PunishmentFindFirstArgs<ExtArgs>>): Prisma__PunishmentClient<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Punishment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunishmentFindFirstOrThrowArgs} args - Arguments to find a Punishment
     * @example
     * // Get one Punishment
     * const punishment = await prisma.punishment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PunishmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PunishmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PunishmentClient<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Punishments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunishmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Punishments
     * const punishments = await prisma.punishment.findMany()
     * 
     * // Get first 10 Punishments
     * const punishments = await prisma.punishment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const punishmentWithIdOnly = await prisma.punishment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PunishmentFindManyArgs>(args?: SelectSubset<T, PunishmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Punishment.
     * @param {PunishmentCreateArgs} args - Arguments to create a Punishment.
     * @example
     * // Create one Punishment
     * const Punishment = await prisma.punishment.create({
     *   data: {
     *     // ... data to create a Punishment
     *   }
     * })
     * 
     */
    create<T extends PunishmentCreateArgs>(args: SelectSubset<T, PunishmentCreateArgs<ExtArgs>>): Prisma__PunishmentClient<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Punishments.
     * @param {PunishmentCreateManyArgs} args - Arguments to create many Punishments.
     * @example
     * // Create many Punishments
     * const punishment = await prisma.punishment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PunishmentCreateManyArgs>(args?: SelectSubset<T, PunishmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Punishments and returns the data saved in the database.
     * @param {PunishmentCreateManyAndReturnArgs} args - Arguments to create many Punishments.
     * @example
     * // Create many Punishments
     * const punishment = await prisma.punishment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Punishments and only return the `id`
     * const punishmentWithIdOnly = await prisma.punishment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PunishmentCreateManyAndReturnArgs>(args?: SelectSubset<T, PunishmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Punishment.
     * @param {PunishmentDeleteArgs} args - Arguments to delete one Punishment.
     * @example
     * // Delete one Punishment
     * const Punishment = await prisma.punishment.delete({
     *   where: {
     *     // ... filter to delete one Punishment
     *   }
     * })
     * 
     */
    delete<T extends PunishmentDeleteArgs>(args: SelectSubset<T, PunishmentDeleteArgs<ExtArgs>>): Prisma__PunishmentClient<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Punishment.
     * @param {PunishmentUpdateArgs} args - Arguments to update one Punishment.
     * @example
     * // Update one Punishment
     * const punishment = await prisma.punishment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PunishmentUpdateArgs>(args: SelectSubset<T, PunishmentUpdateArgs<ExtArgs>>): Prisma__PunishmentClient<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Punishments.
     * @param {PunishmentDeleteManyArgs} args - Arguments to filter Punishments to delete.
     * @example
     * // Delete a few Punishments
     * const { count } = await prisma.punishment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PunishmentDeleteManyArgs>(args?: SelectSubset<T, PunishmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Punishments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunishmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Punishments
     * const punishment = await prisma.punishment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PunishmentUpdateManyArgs>(args: SelectSubset<T, PunishmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Punishments and returns the data updated in the database.
     * @param {PunishmentUpdateManyAndReturnArgs} args - Arguments to update many Punishments.
     * @example
     * // Update many Punishments
     * const punishment = await prisma.punishment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Punishments and only return the `id`
     * const punishmentWithIdOnly = await prisma.punishment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PunishmentUpdateManyAndReturnArgs>(args: SelectSubset<T, PunishmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Punishment.
     * @param {PunishmentUpsertArgs} args - Arguments to update or create a Punishment.
     * @example
     * // Update or create a Punishment
     * const punishment = await prisma.punishment.upsert({
     *   create: {
     *     // ... data to create a Punishment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Punishment we want to update
     *   }
     * })
     */
    upsert<T extends PunishmentUpsertArgs>(args: SelectSubset<T, PunishmentUpsertArgs<ExtArgs>>): Prisma__PunishmentClient<$Result.GetResult<Prisma.$PunishmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Punishments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunishmentCountArgs} args - Arguments to filter Punishments to count.
     * @example
     * // Count the number of Punishments
     * const count = await prisma.punishment.count({
     *   where: {
     *     // ... the filter for the Punishments we want to count
     *   }
     * })
    **/
    count<T extends PunishmentCountArgs>(
      args?: Subset<T, PunishmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PunishmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Punishment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunishmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PunishmentAggregateArgs>(args: Subset<T, PunishmentAggregateArgs>): Prisma.PrismaPromise<GetPunishmentAggregateType<T>>

    /**
     * Group by Punishment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PunishmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PunishmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PunishmentGroupByArgs['orderBy'] }
        : { orderBy?: PunishmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PunishmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPunishmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Punishment model
   */
  readonly fields: PunishmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Punishment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PunishmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    house<T extends HouseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseDefaultArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Punishment model
   */
  interface PunishmentFieldRefs {
    readonly id: FieldRef<"Punishment", 'Int'>
    readonly house_id: FieldRef<"Punishment", 'Int'>
    readonly description: FieldRef<"Punishment", 'String'>
    readonly penalty_points: FieldRef<"Punishment", 'Int'>
    readonly is_active: FieldRef<"Punishment", 'Boolean'>
    readonly created_at: FieldRef<"Punishment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Punishment findUnique
   */
  export type PunishmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
    /**
     * Filter, which Punishment to fetch.
     */
    where: PunishmentWhereUniqueInput
  }

  /**
   * Punishment findUniqueOrThrow
   */
  export type PunishmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
    /**
     * Filter, which Punishment to fetch.
     */
    where: PunishmentWhereUniqueInput
  }

  /**
   * Punishment findFirst
   */
  export type PunishmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
    /**
     * Filter, which Punishment to fetch.
     */
    where?: PunishmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Punishments to fetch.
     */
    orderBy?: PunishmentOrderByWithRelationInput | PunishmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Punishments.
     */
    cursor?: PunishmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Punishments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Punishments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Punishments.
     */
    distinct?: PunishmentScalarFieldEnum | PunishmentScalarFieldEnum[]
  }

  /**
   * Punishment findFirstOrThrow
   */
  export type PunishmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
    /**
     * Filter, which Punishment to fetch.
     */
    where?: PunishmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Punishments to fetch.
     */
    orderBy?: PunishmentOrderByWithRelationInput | PunishmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Punishments.
     */
    cursor?: PunishmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Punishments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Punishments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Punishments.
     */
    distinct?: PunishmentScalarFieldEnum | PunishmentScalarFieldEnum[]
  }

  /**
   * Punishment findMany
   */
  export type PunishmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
    /**
     * Filter, which Punishments to fetch.
     */
    where?: PunishmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Punishments to fetch.
     */
    orderBy?: PunishmentOrderByWithRelationInput | PunishmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Punishments.
     */
    cursor?: PunishmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Punishments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Punishments.
     */
    skip?: number
    distinct?: PunishmentScalarFieldEnum | PunishmentScalarFieldEnum[]
  }

  /**
   * Punishment create
   */
  export type PunishmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Punishment.
     */
    data: XOR<PunishmentCreateInput, PunishmentUncheckedCreateInput>
  }

  /**
   * Punishment createMany
   */
  export type PunishmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Punishments.
     */
    data: PunishmentCreateManyInput | PunishmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Punishment createManyAndReturn
   */
  export type PunishmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * The data used to create many Punishments.
     */
    data: PunishmentCreateManyInput | PunishmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Punishment update
   */
  export type PunishmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Punishment.
     */
    data: XOR<PunishmentUpdateInput, PunishmentUncheckedUpdateInput>
    /**
     * Choose, which Punishment to update.
     */
    where: PunishmentWhereUniqueInput
  }

  /**
   * Punishment updateMany
   */
  export type PunishmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Punishments.
     */
    data: XOR<PunishmentUpdateManyMutationInput, PunishmentUncheckedUpdateManyInput>
    /**
     * Filter which Punishments to update
     */
    where?: PunishmentWhereInput
    /**
     * Limit how many Punishments to update.
     */
    limit?: number
  }

  /**
   * Punishment updateManyAndReturn
   */
  export type PunishmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * The data used to update Punishments.
     */
    data: XOR<PunishmentUpdateManyMutationInput, PunishmentUncheckedUpdateManyInput>
    /**
     * Filter which Punishments to update
     */
    where?: PunishmentWhereInput
    /**
     * Limit how many Punishments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Punishment upsert
   */
  export type PunishmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Punishment to update in case it exists.
     */
    where: PunishmentWhereUniqueInput
    /**
     * In case the Punishment found by the `where` argument doesn't exist, create a new Punishment with this data.
     */
    create: XOR<PunishmentCreateInput, PunishmentUncheckedCreateInput>
    /**
     * In case the Punishment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PunishmentUpdateInput, PunishmentUncheckedUpdateInput>
  }

  /**
   * Punishment delete
   */
  export type PunishmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
    /**
     * Filter which Punishment to delete.
     */
    where: PunishmentWhereUniqueInput
  }

  /**
   * Punishment deleteMany
   */
  export type PunishmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Punishments to delete
     */
    where?: PunishmentWhereInput
    /**
     * Limit how many Punishments to delete.
     */
    limit?: number
  }

  /**
   * Punishment without action
   */
  export type PunishmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Punishment
     */
    select?: PunishmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Punishment
     */
    omit?: PunishmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PunishmentInclude<ExtArgs> | null
  }


  /**
   * Model History
   */

  export type AggregateHistory = {
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  export type HistoryAvgAggregateOutputType = {
    id: number | null
    house_id: number | null
    user_id: number | null
  }

  export type HistorySumAggregateOutputType = {
    id: number | null
    house_id: number | null
    user_id: number | null
  }

  export type HistoryMinAggregateOutputType = {
    id: number | null
    house_id: number | null
    user_id: number | null
    event_type: $Enums.HistoryEventType | null
    description: string | null
    created_at: Date | null
  }

  export type HistoryMaxAggregateOutputType = {
    id: number | null
    house_id: number | null
    user_id: number | null
    event_type: $Enums.HistoryEventType | null
    description: string | null
    created_at: Date | null
  }

  export type HistoryCountAggregateOutputType = {
    id: number
    house_id: number
    user_id: number
    event_type: number
    description: number
    created_at: number
    _all: number
  }


  export type HistoryAvgAggregateInputType = {
    id?: true
    house_id?: true
    user_id?: true
  }

  export type HistorySumAggregateInputType = {
    id?: true
    house_id?: true
    user_id?: true
  }

  export type HistoryMinAggregateInputType = {
    id?: true
    house_id?: true
    user_id?: true
    event_type?: true
    description?: true
    created_at?: true
  }

  export type HistoryMaxAggregateInputType = {
    id?: true
    house_id?: true
    user_id?: true
    event_type?: true
    description?: true
    created_at?: true
  }

  export type HistoryCountAggregateInputType = {
    id?: true
    house_id?: true
    user_id?: true
    event_type?: true
    description?: true
    created_at?: true
    _all?: true
  }

  export type HistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which History to aggregate.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Histories
    **/
    _count?: true | HistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoryMaxAggregateInputType
  }

  export type GetHistoryAggregateType<T extends HistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistory[P]>
      : GetScalarType<T[P], AggregateHistory[P]>
  }




  export type HistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithAggregationInput | HistoryOrderByWithAggregationInput[]
    by: HistoryScalarFieldEnum[] | HistoryScalarFieldEnum
    having?: HistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoryCountAggregateInputType | true
    _avg?: HistoryAvgAggregateInputType
    _sum?: HistorySumAggregateInputType
    _min?: HistoryMinAggregateInputType
    _max?: HistoryMaxAggregateInputType
  }

  export type HistoryGroupByOutputType = {
    id: number
    house_id: number
    user_id: number | null
    event_type: $Enums.HistoryEventType
    description: string
    created_at: Date
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  type GetHistoryGroupByPayload<T extends HistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoryGroupByOutputType[P]>
            : GetScalarType<T[P], HistoryGroupByOutputType[P]>
        }
      >
    >


  export type HistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    user_id?: boolean
    event_type?: boolean
    description?: boolean
    created_at?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
    user?: boolean | History$userArgs<ExtArgs>
  }, ExtArgs["result"]["history"]>

  export type HistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    user_id?: boolean
    event_type?: boolean
    description?: boolean
    created_at?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
    user?: boolean | History$userArgs<ExtArgs>
  }, ExtArgs["result"]["history"]>

  export type HistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    user_id?: boolean
    event_type?: boolean
    description?: boolean
    created_at?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
    user?: boolean | History$userArgs<ExtArgs>
  }, ExtArgs["result"]["history"]>

  export type HistorySelectScalar = {
    id?: boolean
    house_id?: boolean
    user_id?: boolean
    event_type?: boolean
    description?: boolean
    created_at?: boolean
  }

  export type HistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "house_id" | "user_id" | "event_type" | "description" | "created_at", ExtArgs["result"]["history"]>
  export type HistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
    user?: boolean | History$userArgs<ExtArgs>
  }
  export type HistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
    user?: boolean | History$userArgs<ExtArgs>
  }
  export type HistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
    user?: boolean | History$userArgs<ExtArgs>
  }

  export type $HistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "History"
    objects: {
      house: Prisma.$HousePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      house_id: number
      user_id: number | null
      event_type: $Enums.HistoryEventType
      description: string
      created_at: Date
    }, ExtArgs["result"]["history"]>
    composites: {}
  }

  type HistoryGetPayload<S extends boolean | null | undefined | HistoryDefaultArgs> = $Result.GetResult<Prisma.$HistoryPayload, S>

  type HistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HistoryCountAggregateInputType | true
    }

  export interface HistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['History'], meta: { name: 'History' } }
    /**
     * Find zero or one History that matches the filter.
     * @param {HistoryFindUniqueArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HistoryFindUniqueArgs>(args: SelectSubset<T, HistoryFindUniqueArgs<ExtArgs>>): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one History that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HistoryFindUniqueOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, HistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first History that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HistoryFindFirstArgs>(args?: SelectSubset<T, HistoryFindFirstArgs<ExtArgs>>): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first History that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, HistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Histories
     * const histories = await prisma.history.findMany()
     * 
     * // Get first 10 Histories
     * const histories = await prisma.history.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historyWithIdOnly = await prisma.history.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HistoryFindManyArgs>(args?: SelectSubset<T, HistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a History.
     * @param {HistoryCreateArgs} args - Arguments to create a History.
     * @example
     * // Create one History
     * const History = await prisma.history.create({
     *   data: {
     *     // ... data to create a History
     *   }
     * })
     * 
     */
    create<T extends HistoryCreateArgs>(args: SelectSubset<T, HistoryCreateArgs<ExtArgs>>): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Histories.
     * @param {HistoryCreateManyArgs} args - Arguments to create many Histories.
     * @example
     * // Create many Histories
     * const history = await prisma.history.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HistoryCreateManyArgs>(args?: SelectSubset<T, HistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Histories and returns the data saved in the database.
     * @param {HistoryCreateManyAndReturnArgs} args - Arguments to create many Histories.
     * @example
     * // Create many Histories
     * const history = await prisma.history.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Histories and only return the `id`
     * const historyWithIdOnly = await prisma.history.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, HistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a History.
     * @param {HistoryDeleteArgs} args - Arguments to delete one History.
     * @example
     * // Delete one History
     * const History = await prisma.history.delete({
     *   where: {
     *     // ... filter to delete one History
     *   }
     * })
     * 
     */
    delete<T extends HistoryDeleteArgs>(args: SelectSubset<T, HistoryDeleteArgs<ExtArgs>>): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one History.
     * @param {HistoryUpdateArgs} args - Arguments to update one History.
     * @example
     * // Update one History
     * const history = await prisma.history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HistoryUpdateArgs>(args: SelectSubset<T, HistoryUpdateArgs<ExtArgs>>): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Histories.
     * @param {HistoryDeleteManyArgs} args - Arguments to filter Histories to delete.
     * @example
     * // Delete a few Histories
     * const { count } = await prisma.history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HistoryDeleteManyArgs>(args?: SelectSubset<T, HistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Histories
     * const history = await prisma.history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HistoryUpdateManyArgs>(args: SelectSubset<T, HistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Histories and returns the data updated in the database.
     * @param {HistoryUpdateManyAndReturnArgs} args - Arguments to update many Histories.
     * @example
     * // Update many Histories
     * const history = await prisma.history.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Histories and only return the `id`
     * const historyWithIdOnly = await prisma.history.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, HistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one History.
     * @param {HistoryUpsertArgs} args - Arguments to update or create a History.
     * @example
     * // Update or create a History
     * const history = await prisma.history.upsert({
     *   create: {
     *     // ... data to create a History
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the History we want to update
     *   }
     * })
     */
    upsert<T extends HistoryUpsertArgs>(args: SelectSubset<T, HistoryUpsertArgs<ExtArgs>>): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryCountArgs} args - Arguments to filter Histories to count.
     * @example
     * // Count the number of Histories
     * const count = await prisma.history.count({
     *   where: {
     *     // ... the filter for the Histories we want to count
     *   }
     * })
    **/
    count<T extends HistoryCountArgs>(
      args?: Subset<T, HistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoryAggregateArgs>(args: Subset<T, HistoryAggregateArgs>): Prisma.PrismaPromise<GetHistoryAggregateType<T>>

    /**
     * Group by History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoryGroupByArgs['orderBy'] }
        : { orderBy?: HistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the History model
   */
  readonly fields: HistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for History.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    house<T extends HouseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseDefaultArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends History$userArgs<ExtArgs> = {}>(args?: Subset<T, History$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the History model
   */
  interface HistoryFieldRefs {
    readonly id: FieldRef<"History", 'Int'>
    readonly house_id: FieldRef<"History", 'Int'>
    readonly user_id: FieldRef<"History", 'Int'>
    readonly event_type: FieldRef<"History", 'HistoryEventType'>
    readonly description: FieldRef<"History", 'String'>
    readonly created_at: FieldRef<"History", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * History findUnique
   */
  export type HistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }

  /**
   * History findUniqueOrThrow
   */
  export type HistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }

  /**
   * History findFirst
   */
  export type HistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }

  /**
   * History findFirstOrThrow
   */
  export type HistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }

  /**
   * History findMany
   */
  export type HistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which Histories to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }

  /**
   * History create
   */
  export type HistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a History.
     */
    data: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
  }

  /**
   * History createMany
   */
  export type HistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Histories.
     */
    data: HistoryCreateManyInput | HistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * History createManyAndReturn
   */
  export type HistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * The data used to create many Histories.
     */
    data: HistoryCreateManyInput | HistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * History update
   */
  export type HistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a History.
     */
    data: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
    /**
     * Choose, which History to update.
     */
    where: HistoryWhereUniqueInput
  }

  /**
   * History updateMany
   */
  export type HistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Histories.
     */
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyInput>
    /**
     * Filter which Histories to update
     */
    where?: HistoryWhereInput
    /**
     * Limit how many Histories to update.
     */
    limit?: number
  }

  /**
   * History updateManyAndReturn
   */
  export type HistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * The data used to update Histories.
     */
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyInput>
    /**
     * Filter which Histories to update
     */
    where?: HistoryWhereInput
    /**
     * Limit how many Histories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * History upsert
   */
  export type HistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the History to update in case it exists.
     */
    where: HistoryWhereUniqueInput
    /**
     * In case the History found by the `where` argument doesn't exist, create a new History with this data.
     */
    create: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
    /**
     * In case the History was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
  }

  /**
   * History delete
   */
  export type HistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter which History to delete.
     */
    where: HistoryWhereUniqueInput
  }

  /**
   * History deleteMany
   */
  export type HistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Histories to delete
     */
    where?: HistoryWhereInput
    /**
     * Limit how many Histories to delete.
     */
    limit?: number
  }

  /**
   * History.user
   */
  export type History$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * History without action
   */
  export type HistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number | null
    house_id: number | null
    amount: Decimal | null
    paid_by_id: number | null
  }

  export type AccountSumAggregateOutputType = {
    id: number | null
    house_id: number | null
    amount: Decimal | null
    paid_by_id: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: number | null
    house_id: number | null
    name: string | null
    type: $Enums.AccountType | null
    amount: Decimal | null
    due_date: Date | null
    paid_by_id: number | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number | null
    house_id: number | null
    name: string | null
    type: $Enums.AccountType | null
    amount: Decimal | null
    due_date: Date | null
    paid_by_id: number | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    house_id: number
    name: number
    type: number
    amount: number
    due_date: number
    paid_by_id: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
    house_id?: true
    amount?: true
    paid_by_id?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
    house_id?: true
    amount?: true
    paid_by_id?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    house_id?: true
    name?: true
    type?: true
    amount?: true
    due_date?: true
    paid_by_id?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    house_id?: true
    name?: true
    type?: true
    amount?: true
    due_date?: true
    paid_by_id?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    house_id?: true
    name?: true
    type?: true
    amount?: true
    due_date?: true
    paid_by_id?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: number
    house_id: number
    name: string
    type: $Enums.AccountType
    amount: Decimal
    due_date: Date
    paid_by_id: number
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    name?: boolean
    type?: boolean
    amount?: boolean
    due_date?: boolean
    paid_by_id?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
    paid_by?: boolean | UserDefaultArgs<ExtArgs>
    payment_shares?: boolean | Account$payment_sharesArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    name?: boolean
    type?: boolean
    amount?: boolean
    due_date?: boolean
    paid_by_id?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
    paid_by?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    house_id?: boolean
    name?: boolean
    type?: boolean
    amount?: boolean
    due_date?: boolean
    paid_by_id?: boolean
    house?: boolean | HouseDefaultArgs<ExtArgs>
    paid_by?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    house_id?: boolean
    name?: boolean
    type?: boolean
    amount?: boolean
    due_date?: boolean
    paid_by_id?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "house_id" | "name" | "type" | "amount" | "due_date" | "paid_by_id", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
    paid_by?: boolean | UserDefaultArgs<ExtArgs>
    payment_shares?: boolean | Account$payment_sharesArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
    paid_by?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    house?: boolean | HouseDefaultArgs<ExtArgs>
    paid_by?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      house: Prisma.$HousePayload<ExtArgs>
      paid_by: Prisma.$UserPayload<ExtArgs>
      payment_shares: Prisma.$PaymentSharePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      house_id: number
      name: string
      type: $Enums.AccountType
      amount: Prisma.Decimal
      due_date: Date
      paid_by_id: number
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    house<T extends HouseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HouseDefaultArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    paid_by<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payment_shares<T extends Account$payment_sharesArgs<ExtArgs> = {}>(args?: Subset<T, Account$payment_sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'Int'>
    readonly house_id: FieldRef<"Account", 'Int'>
    readonly name: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'AccountType'>
    readonly amount: FieldRef<"Account", 'Decimal'>
    readonly due_date: FieldRef<"Account", 'DateTime'>
    readonly paid_by_id: FieldRef<"Account", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account.payment_shares
   */
  export type Account$payment_sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    where?: PaymentShareWhereInput
    orderBy?: PaymentShareOrderByWithRelationInput | PaymentShareOrderByWithRelationInput[]
    cursor?: PaymentShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentShareScalarFieldEnum | PaymentShareScalarFieldEnum[]
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model PaymentShare
   */

  export type AggregatePaymentShare = {
    _count: PaymentShareCountAggregateOutputType | null
    _avg: PaymentShareAvgAggregateOutputType | null
    _sum: PaymentShareSumAggregateOutputType | null
    _min: PaymentShareMinAggregateOutputType | null
    _max: PaymentShareMaxAggregateOutputType | null
  }

  export type PaymentShareAvgAggregateOutputType = {
    account_id: number | null
    user_id: number | null
    share_amount: Decimal | null
  }

  export type PaymentShareSumAggregateOutputType = {
    account_id: number | null
    user_id: number | null
    share_amount: Decimal | null
  }

  export type PaymentShareMinAggregateOutputType = {
    account_id: number | null
    user_id: number | null
    share_amount: Decimal | null
    is_paid: boolean | null
  }

  export type PaymentShareMaxAggregateOutputType = {
    account_id: number | null
    user_id: number | null
    share_amount: Decimal | null
    is_paid: boolean | null
  }

  export type PaymentShareCountAggregateOutputType = {
    account_id: number
    user_id: number
    share_amount: number
    is_paid: number
    _all: number
  }


  export type PaymentShareAvgAggregateInputType = {
    account_id?: true
    user_id?: true
    share_amount?: true
  }

  export type PaymentShareSumAggregateInputType = {
    account_id?: true
    user_id?: true
    share_amount?: true
  }

  export type PaymentShareMinAggregateInputType = {
    account_id?: true
    user_id?: true
    share_amount?: true
    is_paid?: true
  }

  export type PaymentShareMaxAggregateInputType = {
    account_id?: true
    user_id?: true
    share_amount?: true
    is_paid?: true
  }

  export type PaymentShareCountAggregateInputType = {
    account_id?: true
    user_id?: true
    share_amount?: true
    is_paid?: true
    _all?: true
  }

  export type PaymentShareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentShare to aggregate.
     */
    where?: PaymentShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentShares to fetch.
     */
    orderBy?: PaymentShareOrderByWithRelationInput | PaymentShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentShares
    **/
    _count?: true | PaymentShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentShareAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentShareSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentShareMaxAggregateInputType
  }

  export type GetPaymentShareAggregateType<T extends PaymentShareAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentShare[P]>
      : GetScalarType<T[P], AggregatePaymentShare[P]>
  }




  export type PaymentShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentShareWhereInput
    orderBy?: PaymentShareOrderByWithAggregationInput | PaymentShareOrderByWithAggregationInput[]
    by: PaymentShareScalarFieldEnum[] | PaymentShareScalarFieldEnum
    having?: PaymentShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentShareCountAggregateInputType | true
    _avg?: PaymentShareAvgAggregateInputType
    _sum?: PaymentShareSumAggregateInputType
    _min?: PaymentShareMinAggregateInputType
    _max?: PaymentShareMaxAggregateInputType
  }

  export type PaymentShareGroupByOutputType = {
    account_id: number
    user_id: number
    share_amount: Decimal
    is_paid: boolean
    _count: PaymentShareCountAggregateOutputType | null
    _avg: PaymentShareAvgAggregateOutputType | null
    _sum: PaymentShareSumAggregateOutputType | null
    _min: PaymentShareMinAggregateOutputType | null
    _max: PaymentShareMaxAggregateOutputType | null
  }

  type GetPaymentShareGroupByPayload<T extends PaymentShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentShareGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentShareGroupByOutputType[P]>
        }
      >
    >


  export type PaymentShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    account_id?: boolean
    user_id?: boolean
    share_amount?: boolean
    is_paid?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentShare"]>

  export type PaymentShareSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    account_id?: boolean
    user_id?: boolean
    share_amount?: boolean
    is_paid?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentShare"]>

  export type PaymentShareSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    account_id?: boolean
    user_id?: boolean
    share_amount?: boolean
    is_paid?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentShare"]>

  export type PaymentShareSelectScalar = {
    account_id?: boolean
    user_id?: boolean
    share_amount?: boolean
    is_paid?: boolean
  }

  export type PaymentShareOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"account_id" | "user_id" | "share_amount" | "is_paid", ExtArgs["result"]["paymentShare"]>
  export type PaymentShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PaymentShareIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PaymentShareIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PaymentSharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentShare"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      account_id: number
      user_id: number
      share_amount: Prisma.Decimal
      is_paid: boolean
    }, ExtArgs["result"]["paymentShare"]>
    composites: {}
  }

  type PaymentShareGetPayload<S extends boolean | null | undefined | PaymentShareDefaultArgs> = $Result.GetResult<Prisma.$PaymentSharePayload, S>

  type PaymentShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentShareFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentShareCountAggregateInputType | true
    }

  export interface PaymentShareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentShare'], meta: { name: 'PaymentShare' } }
    /**
     * Find zero or one PaymentShare that matches the filter.
     * @param {PaymentShareFindUniqueArgs} args - Arguments to find a PaymentShare
     * @example
     * // Get one PaymentShare
     * const paymentShare = await prisma.paymentShare.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentShareFindUniqueArgs>(args: SelectSubset<T, PaymentShareFindUniqueArgs<ExtArgs>>): Prisma__PaymentShareClient<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaymentShare that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentShareFindUniqueOrThrowArgs} args - Arguments to find a PaymentShare
     * @example
     * // Get one PaymentShare
     * const paymentShare = await prisma.paymentShare.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentShareFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentShareClient<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentShare that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentShareFindFirstArgs} args - Arguments to find a PaymentShare
     * @example
     * // Get one PaymentShare
     * const paymentShare = await prisma.paymentShare.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentShareFindFirstArgs>(args?: SelectSubset<T, PaymentShareFindFirstArgs<ExtArgs>>): Prisma__PaymentShareClient<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentShare that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentShareFindFirstOrThrowArgs} args - Arguments to find a PaymentShare
     * @example
     * // Get one PaymentShare
     * const paymentShare = await prisma.paymentShare.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentShareFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentShareFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentShareClient<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentShares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentShareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentShares
     * const paymentShares = await prisma.paymentShare.findMany()
     * 
     * // Get first 10 PaymentShares
     * const paymentShares = await prisma.paymentShare.findMany({ take: 10 })
     * 
     * // Only select the `account_id`
     * const paymentShareWithAccount_idOnly = await prisma.paymentShare.findMany({ select: { account_id: true } })
     * 
     */
    findMany<T extends PaymentShareFindManyArgs>(args?: SelectSubset<T, PaymentShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaymentShare.
     * @param {PaymentShareCreateArgs} args - Arguments to create a PaymentShare.
     * @example
     * // Create one PaymentShare
     * const PaymentShare = await prisma.paymentShare.create({
     *   data: {
     *     // ... data to create a PaymentShare
     *   }
     * })
     * 
     */
    create<T extends PaymentShareCreateArgs>(args: SelectSubset<T, PaymentShareCreateArgs<ExtArgs>>): Prisma__PaymentShareClient<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaymentShares.
     * @param {PaymentShareCreateManyArgs} args - Arguments to create many PaymentShares.
     * @example
     * // Create many PaymentShares
     * const paymentShare = await prisma.paymentShare.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentShareCreateManyArgs>(args?: SelectSubset<T, PaymentShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentShares and returns the data saved in the database.
     * @param {PaymentShareCreateManyAndReturnArgs} args - Arguments to create many PaymentShares.
     * @example
     * // Create many PaymentShares
     * const paymentShare = await prisma.paymentShare.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentShares and only return the `account_id`
     * const paymentShareWithAccount_idOnly = await prisma.paymentShare.createManyAndReturn({
     *   select: { account_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentShareCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentShareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PaymentShare.
     * @param {PaymentShareDeleteArgs} args - Arguments to delete one PaymentShare.
     * @example
     * // Delete one PaymentShare
     * const PaymentShare = await prisma.paymentShare.delete({
     *   where: {
     *     // ... filter to delete one PaymentShare
     *   }
     * })
     * 
     */
    delete<T extends PaymentShareDeleteArgs>(args: SelectSubset<T, PaymentShareDeleteArgs<ExtArgs>>): Prisma__PaymentShareClient<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaymentShare.
     * @param {PaymentShareUpdateArgs} args - Arguments to update one PaymentShare.
     * @example
     * // Update one PaymentShare
     * const paymentShare = await prisma.paymentShare.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentShareUpdateArgs>(args: SelectSubset<T, PaymentShareUpdateArgs<ExtArgs>>): Prisma__PaymentShareClient<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaymentShares.
     * @param {PaymentShareDeleteManyArgs} args - Arguments to filter PaymentShares to delete.
     * @example
     * // Delete a few PaymentShares
     * const { count } = await prisma.paymentShare.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentShareDeleteManyArgs>(args?: SelectSubset<T, PaymentShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentShares
     * const paymentShare = await prisma.paymentShare.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentShareUpdateManyArgs>(args: SelectSubset<T, PaymentShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentShares and returns the data updated in the database.
     * @param {PaymentShareUpdateManyAndReturnArgs} args - Arguments to update many PaymentShares.
     * @example
     * // Update many PaymentShares
     * const paymentShare = await prisma.paymentShare.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PaymentShares and only return the `account_id`
     * const paymentShareWithAccount_idOnly = await prisma.paymentShare.updateManyAndReturn({
     *   select: { account_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentShareUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentShareUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PaymentShare.
     * @param {PaymentShareUpsertArgs} args - Arguments to update or create a PaymentShare.
     * @example
     * // Update or create a PaymentShare
     * const paymentShare = await prisma.paymentShare.upsert({
     *   create: {
     *     // ... data to create a PaymentShare
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentShare we want to update
     *   }
     * })
     */
    upsert<T extends PaymentShareUpsertArgs>(args: SelectSubset<T, PaymentShareUpsertArgs<ExtArgs>>): Prisma__PaymentShareClient<$Result.GetResult<Prisma.$PaymentSharePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PaymentShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentShareCountArgs} args - Arguments to filter PaymentShares to count.
     * @example
     * // Count the number of PaymentShares
     * const count = await prisma.paymentShare.count({
     *   where: {
     *     // ... the filter for the PaymentShares we want to count
     *   }
     * })
    **/
    count<T extends PaymentShareCountArgs>(
      args?: Subset<T, PaymentShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentShareAggregateArgs>(args: Subset<T, PaymentShareAggregateArgs>): Prisma.PrismaPromise<GetPaymentShareAggregateType<T>>

    /**
     * Group by PaymentShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentShareGroupByArgs['orderBy'] }
        : { orderBy?: PaymentShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentShare model
   */
  readonly fields: PaymentShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentShare.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentShareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentShare model
   */
  interface PaymentShareFieldRefs {
    readonly account_id: FieldRef<"PaymentShare", 'Int'>
    readonly user_id: FieldRef<"PaymentShare", 'Int'>
    readonly share_amount: FieldRef<"PaymentShare", 'Decimal'>
    readonly is_paid: FieldRef<"PaymentShare", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PaymentShare findUnique
   */
  export type PaymentShareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    /**
     * Filter, which PaymentShare to fetch.
     */
    where: PaymentShareWhereUniqueInput
  }

  /**
   * PaymentShare findUniqueOrThrow
   */
  export type PaymentShareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    /**
     * Filter, which PaymentShare to fetch.
     */
    where: PaymentShareWhereUniqueInput
  }

  /**
   * PaymentShare findFirst
   */
  export type PaymentShareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    /**
     * Filter, which PaymentShare to fetch.
     */
    where?: PaymentShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentShares to fetch.
     */
    orderBy?: PaymentShareOrderByWithRelationInput | PaymentShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentShares.
     */
    cursor?: PaymentShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentShares.
     */
    distinct?: PaymentShareScalarFieldEnum | PaymentShareScalarFieldEnum[]
  }

  /**
   * PaymentShare findFirstOrThrow
   */
  export type PaymentShareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    /**
     * Filter, which PaymentShare to fetch.
     */
    where?: PaymentShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentShares to fetch.
     */
    orderBy?: PaymentShareOrderByWithRelationInput | PaymentShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentShares.
     */
    cursor?: PaymentShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentShares.
     */
    distinct?: PaymentShareScalarFieldEnum | PaymentShareScalarFieldEnum[]
  }

  /**
   * PaymentShare findMany
   */
  export type PaymentShareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    /**
     * Filter, which PaymentShares to fetch.
     */
    where?: PaymentShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentShares to fetch.
     */
    orderBy?: PaymentShareOrderByWithRelationInput | PaymentShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentShares.
     */
    cursor?: PaymentShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentShares.
     */
    skip?: number
    distinct?: PaymentShareScalarFieldEnum | PaymentShareScalarFieldEnum[]
  }

  /**
   * PaymentShare create
   */
  export type PaymentShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentShare.
     */
    data: XOR<PaymentShareCreateInput, PaymentShareUncheckedCreateInput>
  }

  /**
   * PaymentShare createMany
   */
  export type PaymentShareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentShares.
     */
    data: PaymentShareCreateManyInput | PaymentShareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentShare createManyAndReturn
   */
  export type PaymentShareCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * The data used to create many PaymentShares.
     */
    data: PaymentShareCreateManyInput | PaymentShareCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentShare update
   */
  export type PaymentShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentShare.
     */
    data: XOR<PaymentShareUpdateInput, PaymentShareUncheckedUpdateInput>
    /**
     * Choose, which PaymentShare to update.
     */
    where: PaymentShareWhereUniqueInput
  }

  /**
   * PaymentShare updateMany
   */
  export type PaymentShareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentShares.
     */
    data: XOR<PaymentShareUpdateManyMutationInput, PaymentShareUncheckedUpdateManyInput>
    /**
     * Filter which PaymentShares to update
     */
    where?: PaymentShareWhereInput
    /**
     * Limit how many PaymentShares to update.
     */
    limit?: number
  }

  /**
   * PaymentShare updateManyAndReturn
   */
  export type PaymentShareUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * The data used to update PaymentShares.
     */
    data: XOR<PaymentShareUpdateManyMutationInput, PaymentShareUncheckedUpdateManyInput>
    /**
     * Filter which PaymentShares to update
     */
    where?: PaymentShareWhereInput
    /**
     * Limit how many PaymentShares to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentShare upsert
   */
  export type PaymentShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentShare to update in case it exists.
     */
    where: PaymentShareWhereUniqueInput
    /**
     * In case the PaymentShare found by the `where` argument doesn't exist, create a new PaymentShare with this data.
     */
    create: XOR<PaymentShareCreateInput, PaymentShareUncheckedCreateInput>
    /**
     * In case the PaymentShare was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentShareUpdateInput, PaymentShareUncheckedUpdateInput>
  }

  /**
   * PaymentShare delete
   */
  export type PaymentShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
    /**
     * Filter which PaymentShare to delete.
     */
    where: PaymentShareWhereUniqueInput
  }

  /**
   * PaymentShare deleteMany
   */
  export type PaymentShareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentShares to delete
     */
    where?: PaymentShareWhereInput
    /**
     * Limit how many PaymentShares to delete.
     */
    limit?: number
  }

  /**
   * PaymentShare without action
   */
  export type PaymentShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentShare
     */
    select?: PaymentShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentShare
     */
    omit?: PaymentShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentShareInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const HouseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    admin_id: 'admin_id'
  };

  export type HouseScalarFieldEnum = (typeof HouseScalarFieldEnum)[keyof typeof HouseScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password_hash: 'password_hash',
    profile_id: 'profile_id',
    house_id: 'house_id',
    house_status: 'house_status',
    score: 'score',
    star_avg: 'star_avg',
    avatar_color: 'avatar_color',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    house_id: 'house_id',
    title: 'title',
    description: 'description',
    frequency: 'frequency',
    points: 'points',
    responsible_id: 'responsible_id',
    due_date: 'due_date',
    status: 'status',
    can_buy_out: 'can_buy_out',
    star_average: 'star_average'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const TaskReviewScalarFieldEnum: {
    task_id: 'task_id',
    reviewer_id: 'reviewer_id',
    stars: 'stars'
  };

  export type TaskReviewScalarFieldEnum = (typeof TaskReviewScalarFieldEnum)[keyof typeof TaskReviewScalarFieldEnum]


  export const BuyoutScalarFieldEnum: {
    user_id: 'user_id',
    task_id: 'task_id',
    cycle_start_date: 'cycle_start_date'
  };

  export type BuyoutScalarFieldEnum = (typeof BuyoutScalarFieldEnum)[keyof typeof BuyoutScalarFieldEnum]


  export const PunishmentScalarFieldEnum: {
    id: 'id',
    house_id: 'house_id',
    description: 'description',
    penalty_points: 'penalty_points',
    is_active: 'is_active',
    created_at: 'created_at'
  };

  export type PunishmentScalarFieldEnum = (typeof PunishmentScalarFieldEnum)[keyof typeof PunishmentScalarFieldEnum]


  export const HistoryScalarFieldEnum: {
    id: 'id',
    house_id: 'house_id',
    user_id: 'user_id',
    event_type: 'event_type',
    description: 'description',
    created_at: 'created_at'
  };

  export type HistoryScalarFieldEnum = (typeof HistoryScalarFieldEnum)[keyof typeof HistoryScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    house_id: 'house_id',
    name: 'name',
    type: 'type',
    amount: 'amount',
    due_date: 'due_date',
    paid_by_id: 'paid_by_id'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const PaymentShareScalarFieldEnum: {
    account_id: 'account_id',
    user_id: 'user_id',
    share_amount: 'share_amount',
    is_paid: 'is_paid'
  };

  export type PaymentShareScalarFieldEnum = (typeof PaymentShareScalarFieldEnum)[keyof typeof PaymentShareScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'HouseStatus'
   */
  export type EnumHouseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HouseStatus'>
    


  /**
   * Reference to a field of type 'HouseStatus[]'
   */
  export type ListEnumHouseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HouseStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TaskFrequency'
   */
  export type EnumTaskFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskFrequency'>
    


  /**
   * Reference to a field of type 'TaskFrequency[]'
   */
  export type ListEnumTaskFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskFrequency[]'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'HistoryEventType'
   */
  export type EnumHistoryEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HistoryEventType'>
    


  /**
   * Reference to a field of type 'HistoryEventType[]'
   */
  export type ListEnumHistoryEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HistoryEventType[]'>
    


  /**
   * Reference to a field of type 'AccountType'
   */
  export type EnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType'>
    


  /**
   * Reference to a field of type 'AccountType[]'
   */
  export type ListEnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: IntFilter<"Profile"> | number
    name?: StringFilter<"Profile"> | string
    users?: UserListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "name">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profile"> | number
    name?: StringWithAggregatesFilter<"Profile"> | string
  }

  export type HouseWhereInput = {
    AND?: HouseWhereInput | HouseWhereInput[]
    OR?: HouseWhereInput[]
    NOT?: HouseWhereInput | HouseWhereInput[]
    id?: IntFilter<"House"> | number
    name?: StringFilter<"House"> | string
    code?: StringFilter<"House"> | string
    admin_id?: IntFilter<"House"> | number
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
    members?: UserListRelationFilter
    tasks?: TaskListRelationFilter
    accounts?: AccountListRelationFilter
    punishments?: PunishmentListRelationFilter
    history?: HistoryListRelationFilter
  }

  export type HouseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    admin_id?: SortOrder
    admin?: UserOrderByWithRelationInput
    members?: UserOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    punishments?: PunishmentOrderByRelationAggregateInput
    history?: HistoryOrderByRelationAggregateInput
  }

  export type HouseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: HouseWhereInput | HouseWhereInput[]
    OR?: HouseWhereInput[]
    NOT?: HouseWhereInput | HouseWhereInput[]
    name?: StringFilter<"House"> | string
    admin_id?: IntFilter<"House"> | number
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
    members?: UserListRelationFilter
    tasks?: TaskListRelationFilter
    accounts?: AccountListRelationFilter
    punishments?: PunishmentListRelationFilter
    history?: HistoryListRelationFilter
  }, "id" | "code">

  export type HouseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    admin_id?: SortOrder
    _count?: HouseCountOrderByAggregateInput
    _avg?: HouseAvgOrderByAggregateInput
    _max?: HouseMaxOrderByAggregateInput
    _min?: HouseMinOrderByAggregateInput
    _sum?: HouseSumOrderByAggregateInput
  }

  export type HouseScalarWhereWithAggregatesInput = {
    AND?: HouseScalarWhereWithAggregatesInput | HouseScalarWhereWithAggregatesInput[]
    OR?: HouseScalarWhereWithAggregatesInput[]
    NOT?: HouseScalarWhereWithAggregatesInput | HouseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"House"> | number
    name?: StringWithAggregatesFilter<"House"> | string
    code?: StringWithAggregatesFilter<"House"> | string
    admin_id?: IntWithAggregatesFilter<"House"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    profile_id?: IntFilter<"User"> | number
    house_id?: IntNullableFilter<"User"> | number | null
    house_status?: EnumHouseStatusFilter<"User"> | $Enums.HouseStatus
    score?: IntFilter<"User"> | number
    star_avg?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    avatar_color?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    house?: XOR<HouseNullableScalarRelationFilter, HouseWhereInput> | null
    house_admin?: HouseListRelationFilter
    tasks_responsible?: TaskListRelationFilter
    task_reviews?: TaskReviewListRelationFilter
    buyouts?: BuyoutListRelationFilter
    accounts_paid?: AccountListRelationFilter
    payment_shares?: PaymentShareListRelationFilter
    history?: HistoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    profile_id?: SortOrder
    house_id?: SortOrderInput | SortOrder
    house_status?: SortOrder
    score?: SortOrder
    star_avg?: SortOrderInput | SortOrder
    avatar_color?: SortOrderInput | SortOrder
    created_at?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    house?: HouseOrderByWithRelationInput
    house_admin?: HouseOrderByRelationAggregateInput
    tasks_responsible?: TaskOrderByRelationAggregateInput
    task_reviews?: TaskReviewOrderByRelationAggregateInput
    buyouts?: BuyoutOrderByRelationAggregateInput
    accounts_paid?: AccountOrderByRelationAggregateInput
    payment_shares?: PaymentShareOrderByRelationAggregateInput
    history?: HistoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    profile_id?: IntFilter<"User"> | number
    house_id?: IntNullableFilter<"User"> | number | null
    house_status?: EnumHouseStatusFilter<"User"> | $Enums.HouseStatus
    score?: IntFilter<"User"> | number
    star_avg?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    avatar_color?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    house?: XOR<HouseNullableScalarRelationFilter, HouseWhereInput> | null
    house_admin?: HouseListRelationFilter
    tasks_responsible?: TaskListRelationFilter
    task_reviews?: TaskReviewListRelationFilter
    buyouts?: BuyoutListRelationFilter
    accounts_paid?: AccountListRelationFilter
    payment_shares?: PaymentShareListRelationFilter
    history?: HistoryListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    profile_id?: SortOrder
    house_id?: SortOrderInput | SortOrder
    house_status?: SortOrder
    score?: SortOrder
    star_avg?: SortOrderInput | SortOrder
    avatar_color?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password_hash?: StringWithAggregatesFilter<"User"> | string
    profile_id?: IntWithAggregatesFilter<"User"> | number
    house_id?: IntNullableWithAggregatesFilter<"User"> | number | null
    house_status?: EnumHouseStatusWithAggregatesFilter<"User"> | $Enums.HouseStatus
    score?: IntWithAggregatesFilter<"User"> | number
    star_avg?: DecimalNullableWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    avatar_color?: StringNullableWithAggregatesFilter<"User"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: IntFilter<"Task"> | number
    house_id?: IntFilter<"Task"> | number
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    frequency?: EnumTaskFrequencyFilter<"Task"> | $Enums.TaskFrequency
    points?: IntFilter<"Task"> | number
    responsible_id?: IntNullableFilter<"Task"> | number | null
    due_date?: DateTimeFilter<"Task"> | Date | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    can_buy_out?: BoolFilter<"Task"> | boolean
    star_average?: DecimalNullableFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
    house?: XOR<HouseScalarRelationFilter, HouseWhereInput>
    responsible?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reviews?: TaskReviewListRelationFilter
    buyouts?: BuyoutListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    house_id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    frequency?: SortOrder
    points?: SortOrder
    responsible_id?: SortOrderInput | SortOrder
    due_date?: SortOrder
    status?: SortOrder
    can_buy_out?: SortOrder
    star_average?: SortOrderInput | SortOrder
    house?: HouseOrderByWithRelationInput
    responsible?: UserOrderByWithRelationInput
    reviews?: TaskReviewOrderByRelationAggregateInput
    buyouts?: BuyoutOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    house_id?: IntFilter<"Task"> | number
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    frequency?: EnumTaskFrequencyFilter<"Task"> | $Enums.TaskFrequency
    points?: IntFilter<"Task"> | number
    responsible_id?: IntNullableFilter<"Task"> | number | null
    due_date?: DateTimeFilter<"Task"> | Date | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    can_buy_out?: BoolFilter<"Task"> | boolean
    star_average?: DecimalNullableFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
    house?: XOR<HouseScalarRelationFilter, HouseWhereInput>
    responsible?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reviews?: TaskReviewListRelationFilter
    buyouts?: BuyoutListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    house_id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    frequency?: SortOrder
    points?: SortOrder
    responsible_id?: SortOrderInput | SortOrder
    due_date?: SortOrder
    status?: SortOrder
    can_buy_out?: SortOrder
    star_average?: SortOrderInput | SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Task"> | number
    house_id?: IntWithAggregatesFilter<"Task"> | number
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    frequency?: EnumTaskFrequencyWithAggregatesFilter<"Task"> | $Enums.TaskFrequency
    points?: IntWithAggregatesFilter<"Task"> | number
    responsible_id?: IntNullableWithAggregatesFilter<"Task"> | number | null
    due_date?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    status?: EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus
    can_buy_out?: BoolWithAggregatesFilter<"Task"> | boolean
    star_average?: DecimalNullableWithAggregatesFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
  }

  export type TaskReviewWhereInput = {
    AND?: TaskReviewWhereInput | TaskReviewWhereInput[]
    OR?: TaskReviewWhereInput[]
    NOT?: TaskReviewWhereInput | TaskReviewWhereInput[]
    task_id?: IntFilter<"TaskReview"> | number
    reviewer_id?: IntFilter<"TaskReview"> | number
    stars?: IntFilter<"TaskReview"> | number
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    reviewer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TaskReviewOrderByWithRelationInput = {
    task_id?: SortOrder
    reviewer_id?: SortOrder
    stars?: SortOrder
    task?: TaskOrderByWithRelationInput
    reviewer?: UserOrderByWithRelationInput
  }

  export type TaskReviewWhereUniqueInput = Prisma.AtLeast<{
    task_id_reviewer_id?: TaskReviewTask_idReviewer_idCompoundUniqueInput
    AND?: TaskReviewWhereInput | TaskReviewWhereInput[]
    OR?: TaskReviewWhereInput[]
    NOT?: TaskReviewWhereInput | TaskReviewWhereInput[]
    task_id?: IntFilter<"TaskReview"> | number
    reviewer_id?: IntFilter<"TaskReview"> | number
    stars?: IntFilter<"TaskReview"> | number
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    reviewer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "task_id_reviewer_id">

  export type TaskReviewOrderByWithAggregationInput = {
    task_id?: SortOrder
    reviewer_id?: SortOrder
    stars?: SortOrder
    _count?: TaskReviewCountOrderByAggregateInput
    _avg?: TaskReviewAvgOrderByAggregateInput
    _max?: TaskReviewMaxOrderByAggregateInput
    _min?: TaskReviewMinOrderByAggregateInput
    _sum?: TaskReviewSumOrderByAggregateInput
  }

  export type TaskReviewScalarWhereWithAggregatesInput = {
    AND?: TaskReviewScalarWhereWithAggregatesInput | TaskReviewScalarWhereWithAggregatesInput[]
    OR?: TaskReviewScalarWhereWithAggregatesInput[]
    NOT?: TaskReviewScalarWhereWithAggregatesInput | TaskReviewScalarWhereWithAggregatesInput[]
    task_id?: IntWithAggregatesFilter<"TaskReview"> | number
    reviewer_id?: IntWithAggregatesFilter<"TaskReview"> | number
    stars?: IntWithAggregatesFilter<"TaskReview"> | number
  }

  export type BuyoutWhereInput = {
    AND?: BuyoutWhereInput | BuyoutWhereInput[]
    OR?: BuyoutWhereInput[]
    NOT?: BuyoutWhereInput | BuyoutWhereInput[]
    user_id?: IntFilter<"Buyout"> | number
    task_id?: IntFilter<"Buyout"> | number
    cycle_start_date?: DateTimeFilter<"Buyout"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
  }

  export type BuyoutOrderByWithRelationInput = {
    user_id?: SortOrder
    task_id?: SortOrder
    cycle_start_date?: SortOrder
    user?: UserOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
  }

  export type BuyoutWhereUniqueInput = Prisma.AtLeast<{
    user_id_task_id_cycle_start_date?: BuyoutUser_idTask_idCycle_start_dateCompoundUniqueInput
    AND?: BuyoutWhereInput | BuyoutWhereInput[]
    OR?: BuyoutWhereInput[]
    NOT?: BuyoutWhereInput | BuyoutWhereInput[]
    user_id?: IntFilter<"Buyout"> | number
    task_id?: IntFilter<"Buyout"> | number
    cycle_start_date?: DateTimeFilter<"Buyout"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
  }, "user_id_task_id_cycle_start_date">

  export type BuyoutOrderByWithAggregationInput = {
    user_id?: SortOrder
    task_id?: SortOrder
    cycle_start_date?: SortOrder
    _count?: BuyoutCountOrderByAggregateInput
    _avg?: BuyoutAvgOrderByAggregateInput
    _max?: BuyoutMaxOrderByAggregateInput
    _min?: BuyoutMinOrderByAggregateInput
    _sum?: BuyoutSumOrderByAggregateInput
  }

  export type BuyoutScalarWhereWithAggregatesInput = {
    AND?: BuyoutScalarWhereWithAggregatesInput | BuyoutScalarWhereWithAggregatesInput[]
    OR?: BuyoutScalarWhereWithAggregatesInput[]
    NOT?: BuyoutScalarWhereWithAggregatesInput | BuyoutScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"Buyout"> | number
    task_id?: IntWithAggregatesFilter<"Buyout"> | number
    cycle_start_date?: DateTimeWithAggregatesFilter<"Buyout"> | Date | string
  }

  export type PunishmentWhereInput = {
    AND?: PunishmentWhereInput | PunishmentWhereInput[]
    OR?: PunishmentWhereInput[]
    NOT?: PunishmentWhereInput | PunishmentWhereInput[]
    id?: IntFilter<"Punishment"> | number
    house_id?: IntFilter<"Punishment"> | number
    description?: StringFilter<"Punishment"> | string
    penalty_points?: IntFilter<"Punishment"> | number
    is_active?: BoolFilter<"Punishment"> | boolean
    created_at?: DateTimeFilter<"Punishment"> | Date | string
    house?: XOR<HouseScalarRelationFilter, HouseWhereInput>
  }

  export type PunishmentOrderByWithRelationInput = {
    id?: SortOrder
    house_id?: SortOrder
    description?: SortOrder
    penalty_points?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    house?: HouseOrderByWithRelationInput
  }

  export type PunishmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PunishmentWhereInput | PunishmentWhereInput[]
    OR?: PunishmentWhereInput[]
    NOT?: PunishmentWhereInput | PunishmentWhereInput[]
    house_id?: IntFilter<"Punishment"> | number
    description?: StringFilter<"Punishment"> | string
    penalty_points?: IntFilter<"Punishment"> | number
    is_active?: BoolFilter<"Punishment"> | boolean
    created_at?: DateTimeFilter<"Punishment"> | Date | string
    house?: XOR<HouseScalarRelationFilter, HouseWhereInput>
  }, "id">

  export type PunishmentOrderByWithAggregationInput = {
    id?: SortOrder
    house_id?: SortOrder
    description?: SortOrder
    penalty_points?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    _count?: PunishmentCountOrderByAggregateInput
    _avg?: PunishmentAvgOrderByAggregateInput
    _max?: PunishmentMaxOrderByAggregateInput
    _min?: PunishmentMinOrderByAggregateInput
    _sum?: PunishmentSumOrderByAggregateInput
  }

  export type PunishmentScalarWhereWithAggregatesInput = {
    AND?: PunishmentScalarWhereWithAggregatesInput | PunishmentScalarWhereWithAggregatesInput[]
    OR?: PunishmentScalarWhereWithAggregatesInput[]
    NOT?: PunishmentScalarWhereWithAggregatesInput | PunishmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Punishment"> | number
    house_id?: IntWithAggregatesFilter<"Punishment"> | number
    description?: StringWithAggregatesFilter<"Punishment"> | string
    penalty_points?: IntWithAggregatesFilter<"Punishment"> | number
    is_active?: BoolWithAggregatesFilter<"Punishment"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Punishment"> | Date | string
  }

  export type HistoryWhereInput = {
    AND?: HistoryWhereInput | HistoryWhereInput[]
    OR?: HistoryWhereInput[]
    NOT?: HistoryWhereInput | HistoryWhereInput[]
    id?: IntFilter<"History"> | number
    house_id?: IntFilter<"History"> | number
    user_id?: IntNullableFilter<"History"> | number | null
    event_type?: EnumHistoryEventTypeFilter<"History"> | $Enums.HistoryEventType
    description?: StringFilter<"History"> | string
    created_at?: DateTimeFilter<"History"> | Date | string
    house?: XOR<HouseScalarRelationFilter, HouseWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type HistoryOrderByWithRelationInput = {
    id?: SortOrder
    house_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    event_type?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    house?: HouseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type HistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HistoryWhereInput | HistoryWhereInput[]
    OR?: HistoryWhereInput[]
    NOT?: HistoryWhereInput | HistoryWhereInput[]
    house_id?: IntFilter<"History"> | number
    user_id?: IntNullableFilter<"History"> | number | null
    event_type?: EnumHistoryEventTypeFilter<"History"> | $Enums.HistoryEventType
    description?: StringFilter<"History"> | string
    created_at?: DateTimeFilter<"History"> | Date | string
    house?: XOR<HouseScalarRelationFilter, HouseWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type HistoryOrderByWithAggregationInput = {
    id?: SortOrder
    house_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    event_type?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    _count?: HistoryCountOrderByAggregateInput
    _avg?: HistoryAvgOrderByAggregateInput
    _max?: HistoryMaxOrderByAggregateInput
    _min?: HistoryMinOrderByAggregateInput
    _sum?: HistorySumOrderByAggregateInput
  }

  export type HistoryScalarWhereWithAggregatesInput = {
    AND?: HistoryScalarWhereWithAggregatesInput | HistoryScalarWhereWithAggregatesInput[]
    OR?: HistoryScalarWhereWithAggregatesInput[]
    NOT?: HistoryScalarWhereWithAggregatesInput | HistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"History"> | number
    house_id?: IntWithAggregatesFilter<"History"> | number
    user_id?: IntNullableWithAggregatesFilter<"History"> | number | null
    event_type?: EnumHistoryEventTypeWithAggregatesFilter<"History"> | $Enums.HistoryEventType
    description?: StringWithAggregatesFilter<"History"> | string
    created_at?: DateTimeWithAggregatesFilter<"History"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: IntFilter<"Account"> | number
    house_id?: IntFilter<"Account"> | number
    name?: StringFilter<"Account"> | string
    type?: EnumAccountTypeFilter<"Account"> | $Enums.AccountType
    amount?: DecimalFilter<"Account"> | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFilter<"Account"> | Date | string
    paid_by_id?: IntFilter<"Account"> | number
    house?: XOR<HouseScalarRelationFilter, HouseWhereInput>
    paid_by?: XOR<UserScalarRelationFilter, UserWhereInput>
    payment_shares?: PaymentShareListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    house_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    due_date?: SortOrder
    paid_by_id?: SortOrder
    house?: HouseOrderByWithRelationInput
    paid_by?: UserOrderByWithRelationInput
    payment_shares?: PaymentShareOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    house_id?: IntFilter<"Account"> | number
    name?: StringFilter<"Account"> | string
    type?: EnumAccountTypeFilter<"Account"> | $Enums.AccountType
    amount?: DecimalFilter<"Account"> | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFilter<"Account"> | Date | string
    paid_by_id?: IntFilter<"Account"> | number
    house?: XOR<HouseScalarRelationFilter, HouseWhereInput>
    paid_by?: XOR<UserScalarRelationFilter, UserWhereInput>
    payment_shares?: PaymentShareListRelationFilter
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    house_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    due_date?: SortOrder
    paid_by_id?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Account"> | number
    house_id?: IntWithAggregatesFilter<"Account"> | number
    name?: StringWithAggregatesFilter<"Account"> | string
    type?: EnumAccountTypeWithAggregatesFilter<"Account"> | $Enums.AccountType
    amount?: DecimalWithAggregatesFilter<"Account"> | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    paid_by_id?: IntWithAggregatesFilter<"Account"> | number
  }

  export type PaymentShareWhereInput = {
    AND?: PaymentShareWhereInput | PaymentShareWhereInput[]
    OR?: PaymentShareWhereInput[]
    NOT?: PaymentShareWhereInput | PaymentShareWhereInput[]
    account_id?: IntFilter<"PaymentShare"> | number
    user_id?: IntFilter<"PaymentShare"> | number
    share_amount?: DecimalFilter<"PaymentShare"> | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFilter<"PaymentShare"> | boolean
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PaymentShareOrderByWithRelationInput = {
    account_id?: SortOrder
    user_id?: SortOrder
    share_amount?: SortOrder
    is_paid?: SortOrder
    account?: AccountOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type PaymentShareWhereUniqueInput = Prisma.AtLeast<{
    account_id_user_id?: PaymentShareAccount_idUser_idCompoundUniqueInput
    AND?: PaymentShareWhereInput | PaymentShareWhereInput[]
    OR?: PaymentShareWhereInput[]
    NOT?: PaymentShareWhereInput | PaymentShareWhereInput[]
    account_id?: IntFilter<"PaymentShare"> | number
    user_id?: IntFilter<"PaymentShare"> | number
    share_amount?: DecimalFilter<"PaymentShare"> | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFilter<"PaymentShare"> | boolean
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "account_id_user_id">

  export type PaymentShareOrderByWithAggregationInput = {
    account_id?: SortOrder
    user_id?: SortOrder
    share_amount?: SortOrder
    is_paid?: SortOrder
    _count?: PaymentShareCountOrderByAggregateInput
    _avg?: PaymentShareAvgOrderByAggregateInput
    _max?: PaymentShareMaxOrderByAggregateInput
    _min?: PaymentShareMinOrderByAggregateInput
    _sum?: PaymentShareSumOrderByAggregateInput
  }

  export type PaymentShareScalarWhereWithAggregatesInput = {
    AND?: PaymentShareScalarWhereWithAggregatesInput | PaymentShareScalarWhereWithAggregatesInput[]
    OR?: PaymentShareScalarWhereWithAggregatesInput[]
    NOT?: PaymentShareScalarWhereWithAggregatesInput | PaymentShareScalarWhereWithAggregatesInput[]
    account_id?: IntWithAggregatesFilter<"PaymentShare"> | number
    user_id?: IntWithAggregatesFilter<"PaymentShare"> | number
    share_amount?: DecimalWithAggregatesFilter<"PaymentShare"> | Decimal | DecimalJsLike | number | string
    is_paid?: BoolWithAggregatesFilter<"PaymentShare"> | boolean
  }

  export type ProfileCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: number
    name: string
  }

  export type ProfileUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type HouseCreateInput = {
    name: string
    code: string
    admin: UserCreateNestedOneWithoutHouse_adminInput
    members?: UserCreateNestedManyWithoutHouseInput
    tasks?: TaskCreateNestedManyWithoutHouseInput
    accounts?: AccountCreateNestedManyWithoutHouseInput
    punishments?: PunishmentCreateNestedManyWithoutHouseInput
    history?: HistoryCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    admin_id: number
    members?: UserUncheckedCreateNestedManyWithoutHouseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutHouseInput
    accounts?: AccountUncheckedCreateNestedManyWithoutHouseInput
    punishments?: PunishmentUncheckedCreateNestedManyWithoutHouseInput
    history?: HistoryUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin?: UserUpdateOneRequiredWithoutHouse_adminNestedInput
    members?: UserUpdateManyWithoutHouseNestedInput
    tasks?: TaskUpdateManyWithoutHouseNestedInput
    accounts?: AccountUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUpdateManyWithoutHouseNestedInput
    history?: HistoryUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin_id?: IntFieldUpdateOperationsInput | number
    members?: UserUncheckedUpdateManyWithoutHouseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutHouseNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUncheckedUpdateManyWithoutHouseNestedInput
    history?: HistoryUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type HouseCreateManyInput = {
    id?: number
    name: string
    code: string
    admin_id: number
  }

  export type HouseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type HouseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password_hash: string
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    profile: ProfileCreateNestedOneWithoutUsersInput
    house?: HouseCreateNestedOneWithoutMembersInput
    house_admin?: HouseCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutCreateNestedManyWithoutUserInput
    accounts_paid?: AccountCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    house_admin?: HouseUncheckedCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskUncheckedCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewUncheckedCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutUserInput
    accounts_paid?: AccountUncheckedCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    house?: HouseUpdateOneWithoutMembersNestedInput
    house_admin?: HouseUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house_admin?: HouseUncheckedUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUncheckedUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUncheckedUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUncheckedUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
    house: HouseCreateNestedOneWithoutTasksInput
    responsible?: UserCreateNestedOneWithoutTasks_responsibleInput
    reviews?: TaskReviewCreateNestedManyWithoutTaskInput
    buyouts?: BuyoutCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id?: number
    house_id: number
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    responsible_id?: number | null
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
    reviews?: TaskReviewUncheckedCreateNestedManyWithoutTaskInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    house?: HouseUpdateOneRequiredWithoutTasksNestedInput
    responsible?: UserUpdateOneWithoutTasks_responsibleNestedInput
    reviews?: TaskReviewUpdateManyWithoutTaskNestedInput
    buyouts?: BuyoutUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reviews?: TaskReviewUncheckedUpdateManyWithoutTaskNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: number
    house_id: number
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    responsible_id?: number | null
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
  }

  export type TaskUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type TaskReviewCreateInput = {
    stars: number
    task: TaskCreateNestedOneWithoutReviewsInput
    reviewer: UserCreateNestedOneWithoutTask_reviewsInput
  }

  export type TaskReviewUncheckedCreateInput = {
    task_id: number
    reviewer_id: number
    stars: number
  }

  export type TaskReviewUpdateInput = {
    stars?: IntFieldUpdateOperationsInput | number
    task?: TaskUpdateOneRequiredWithoutReviewsNestedInput
    reviewer?: UserUpdateOneRequiredWithoutTask_reviewsNestedInput
  }

  export type TaskReviewUncheckedUpdateInput = {
    task_id?: IntFieldUpdateOperationsInput | number
    reviewer_id?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type TaskReviewCreateManyInput = {
    task_id: number
    reviewer_id: number
    stars: number
  }

  export type TaskReviewUpdateManyMutationInput = {
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type TaskReviewUncheckedUpdateManyInput = {
    task_id?: IntFieldUpdateOperationsInput | number
    reviewer_id?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type BuyoutCreateInput = {
    cycle_start_date: Date | string
    user: UserCreateNestedOneWithoutBuyoutsInput
    task: TaskCreateNestedOneWithoutBuyoutsInput
  }

  export type BuyoutUncheckedCreateInput = {
    user_id: number
    task_id: number
    cycle_start_date: Date | string
  }

  export type BuyoutUpdateInput = {
    cycle_start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBuyoutsNestedInput
    task?: TaskUpdateOneRequiredWithoutBuyoutsNestedInput
  }

  export type BuyoutUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
    cycle_start_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyoutCreateManyInput = {
    user_id: number
    task_id: number
    cycle_start_date: Date | string
  }

  export type BuyoutUpdateManyMutationInput = {
    cycle_start_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyoutUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
    cycle_start_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PunishmentCreateInput = {
    description: string
    penalty_points: number
    is_active?: boolean
    created_at?: Date | string
    house: HouseCreateNestedOneWithoutPunishmentsInput
  }

  export type PunishmentUncheckedCreateInput = {
    id?: number
    house_id: number
    description: string
    penalty_points: number
    is_active?: boolean
    created_at?: Date | string
  }

  export type PunishmentUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    penalty_points?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house?: HouseUpdateOneRequiredWithoutPunishmentsNestedInput
  }

  export type PunishmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    penalty_points?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PunishmentCreateManyInput = {
    id?: number
    house_id: number
    description: string
    penalty_points: number
    is_active?: boolean
    created_at?: Date | string
  }

  export type PunishmentUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    penalty_points?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PunishmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    penalty_points?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryCreateInput = {
    event_type: $Enums.HistoryEventType
    description: string
    created_at?: Date | string
    house: HouseCreateNestedOneWithoutHistoryInput
    user?: UserCreateNestedOneWithoutHistoryInput
  }

  export type HistoryUncheckedCreateInput = {
    id?: number
    house_id: number
    user_id?: number | null
    event_type: $Enums.HistoryEventType
    description: string
    created_at?: Date | string
  }

  export type HistoryUpdateInput = {
    event_type?: EnumHistoryEventTypeFieldUpdateOperationsInput | $Enums.HistoryEventType
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house?: HouseUpdateOneRequiredWithoutHistoryNestedInput
    user?: UserUpdateOneWithoutHistoryNestedInput
  }

  export type HistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_type?: EnumHistoryEventTypeFieldUpdateOperationsInput | $Enums.HistoryEventType
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryCreateManyInput = {
    id?: number
    house_id: number
    user_id?: number | null
    event_type: $Enums.HistoryEventType
    description: string
    created_at?: Date | string
  }

  export type HistoryUpdateManyMutationInput = {
    event_type?: EnumHistoryEventTypeFieldUpdateOperationsInput | $Enums.HistoryEventType
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_type?: EnumHistoryEventTypeFieldUpdateOperationsInput | $Enums.HistoryEventType
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
    house: HouseCreateNestedOneWithoutAccountsInput
    paid_by: UserCreateNestedOneWithoutAccounts_paidInput
    payment_shares?: PaymentShareCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: number
    house_id: number
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
    paid_by_id: number
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    house?: HouseUpdateOneRequiredWithoutAccountsNestedInput
    paid_by?: UserUpdateOneRequiredWithoutAccounts_paidNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    paid_by_id?: IntFieldUpdateOperationsInput | number
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: number
    house_id: number
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
    paid_by_id: number
  }

  export type AccountUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    paid_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentShareCreateInput = {
    share_amount: Decimal | DecimalJsLike | number | string
    is_paid?: boolean
    account: AccountCreateNestedOneWithoutPayment_sharesInput
    user: UserCreateNestedOneWithoutPayment_sharesInput
  }

  export type PaymentShareUncheckedCreateInput = {
    account_id: number
    user_id: number
    share_amount: Decimal | DecimalJsLike | number | string
    is_paid?: boolean
  }

  export type PaymentShareUpdateInput = {
    share_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    account?: AccountUpdateOneRequiredWithoutPayment_sharesNestedInput
    user?: UserUpdateOneRequiredWithoutPayment_sharesNestedInput
  }

  export type PaymentShareUncheckedUpdateInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    share_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentShareCreateManyInput = {
    account_id: number
    user_id: number
    share_amount: Decimal | DecimalJsLike | number | string
    is_paid?: boolean
  }

  export type PaymentShareUpdateManyMutationInput = {
    share_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentShareUncheckedUpdateManyInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    share_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type PunishmentListRelationFilter = {
    every?: PunishmentWhereInput
    some?: PunishmentWhereInput
    none?: PunishmentWhereInput
  }

  export type HistoryListRelationFilter = {
    every?: HistoryWhereInput
    some?: HistoryWhereInput
    none?: HistoryWhereInput
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PunishmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HouseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    admin_id?: SortOrder
  }

  export type HouseAvgOrderByAggregateInput = {
    id?: SortOrder
    admin_id?: SortOrder
  }

  export type HouseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    admin_id?: SortOrder
  }

  export type HouseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    admin_id?: SortOrder
  }

  export type HouseSumOrderByAggregateInput = {
    id?: SortOrder
    admin_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumHouseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HouseStatus | EnumHouseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HouseStatus[] | ListEnumHouseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HouseStatus[] | ListEnumHouseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHouseStatusFilter<$PrismaModel> | $Enums.HouseStatus
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProfileScalarRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type HouseNullableScalarRelationFilter = {
    is?: HouseWhereInput | null
    isNot?: HouseWhereInput | null
  }

  export type HouseListRelationFilter = {
    every?: HouseWhereInput
    some?: HouseWhereInput
    none?: HouseWhereInput
  }

  export type TaskReviewListRelationFilter = {
    every?: TaskReviewWhereInput
    some?: TaskReviewWhereInput
    none?: TaskReviewWhereInput
  }

  export type BuyoutListRelationFilter = {
    every?: BuyoutWhereInput
    some?: BuyoutWhereInput
    none?: BuyoutWhereInput
  }

  export type PaymentShareListRelationFilter = {
    every?: PaymentShareWhereInput
    some?: PaymentShareWhereInput
    none?: PaymentShareWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HouseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuyoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    profile_id?: SortOrder
    house_id?: SortOrder
    house_status?: SortOrder
    score?: SortOrder
    star_avg?: SortOrder
    avatar_color?: SortOrder
    created_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    profile_id?: SortOrder
    house_id?: SortOrder
    score?: SortOrder
    star_avg?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    profile_id?: SortOrder
    house_id?: SortOrder
    house_status?: SortOrder
    score?: SortOrder
    star_avg?: SortOrder
    avatar_color?: SortOrder
    created_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    profile_id?: SortOrder
    house_id?: SortOrder
    house_status?: SortOrder
    score?: SortOrder
    star_avg?: SortOrder
    avatar_color?: SortOrder
    created_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    profile_id?: SortOrder
    house_id?: SortOrder
    score?: SortOrder
    star_avg?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumHouseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HouseStatus | EnumHouseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HouseStatus[] | ListEnumHouseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HouseStatus[] | ListEnumHouseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHouseStatusWithAggregatesFilter<$PrismaModel> | $Enums.HouseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHouseStatusFilter<$PrismaModel>
    _max?: NestedEnumHouseStatusFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumTaskFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskFrequency | EnumTaskFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.TaskFrequency[] | ListEnumTaskFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskFrequency[] | ListEnumTaskFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskFrequencyFilter<$PrismaModel> | $Enums.TaskFrequency
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type HouseScalarRelationFilter = {
    is?: HouseWhereInput
    isNot?: HouseWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    frequency?: SortOrder
    points?: SortOrder
    responsible_id?: SortOrder
    due_date?: SortOrder
    status?: SortOrder
    can_buy_out?: SortOrder
    star_average?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    points?: SortOrder
    responsible_id?: SortOrder
    star_average?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    frequency?: SortOrder
    points?: SortOrder
    responsible_id?: SortOrder
    due_date?: SortOrder
    status?: SortOrder
    can_buy_out?: SortOrder
    star_average?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    frequency?: SortOrder
    points?: SortOrder
    responsible_id?: SortOrder
    due_date?: SortOrder
    status?: SortOrder
    can_buy_out?: SortOrder
    star_average?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    points?: SortOrder
    responsible_id?: SortOrder
    star_average?: SortOrder
  }

  export type EnumTaskFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskFrequency | EnumTaskFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.TaskFrequency[] | ListEnumTaskFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskFrequency[] | ListEnumTaskFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.TaskFrequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskFrequencyFilter<$PrismaModel>
    _max?: NestedEnumTaskFrequencyFilter<$PrismaModel>
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TaskScalarRelationFilter = {
    is?: TaskWhereInput
    isNot?: TaskWhereInput
  }

  export type TaskReviewTask_idReviewer_idCompoundUniqueInput = {
    task_id: number
    reviewer_id: number
  }

  export type TaskReviewCountOrderByAggregateInput = {
    task_id?: SortOrder
    reviewer_id?: SortOrder
    stars?: SortOrder
  }

  export type TaskReviewAvgOrderByAggregateInput = {
    task_id?: SortOrder
    reviewer_id?: SortOrder
    stars?: SortOrder
  }

  export type TaskReviewMaxOrderByAggregateInput = {
    task_id?: SortOrder
    reviewer_id?: SortOrder
    stars?: SortOrder
  }

  export type TaskReviewMinOrderByAggregateInput = {
    task_id?: SortOrder
    reviewer_id?: SortOrder
    stars?: SortOrder
  }

  export type TaskReviewSumOrderByAggregateInput = {
    task_id?: SortOrder
    reviewer_id?: SortOrder
    stars?: SortOrder
  }

  export type BuyoutUser_idTask_idCycle_start_dateCompoundUniqueInput = {
    user_id: number
    task_id: number
    cycle_start_date: Date | string
  }

  export type BuyoutCountOrderByAggregateInput = {
    user_id?: SortOrder
    task_id?: SortOrder
    cycle_start_date?: SortOrder
  }

  export type BuyoutAvgOrderByAggregateInput = {
    user_id?: SortOrder
    task_id?: SortOrder
  }

  export type BuyoutMaxOrderByAggregateInput = {
    user_id?: SortOrder
    task_id?: SortOrder
    cycle_start_date?: SortOrder
  }

  export type BuyoutMinOrderByAggregateInput = {
    user_id?: SortOrder
    task_id?: SortOrder
    cycle_start_date?: SortOrder
  }

  export type BuyoutSumOrderByAggregateInput = {
    user_id?: SortOrder
    task_id?: SortOrder
  }

  export type PunishmentCountOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    description?: SortOrder
    penalty_points?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
  }

  export type PunishmentAvgOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    penalty_points?: SortOrder
  }

  export type PunishmentMaxOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    description?: SortOrder
    penalty_points?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
  }

  export type PunishmentMinOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    description?: SortOrder
    penalty_points?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
  }

  export type PunishmentSumOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    penalty_points?: SortOrder
  }

  export type EnumHistoryEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.HistoryEventType | EnumHistoryEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HistoryEventType[] | ListEnumHistoryEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HistoryEventType[] | ListEnumHistoryEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHistoryEventTypeFilter<$PrismaModel> | $Enums.HistoryEventType
  }

  export type HistoryCountOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    user_id?: SortOrder
    event_type?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type HistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    user_id?: SortOrder
  }

  export type HistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    user_id?: SortOrder
    event_type?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type HistoryMinOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    user_id?: SortOrder
    event_type?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
  }

  export type HistorySumOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    user_id?: SortOrder
  }

  export type EnumHistoryEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HistoryEventType | EnumHistoryEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HistoryEventType[] | ListEnumHistoryEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HistoryEventType[] | ListEnumHistoryEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHistoryEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.HistoryEventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHistoryEventTypeFilter<$PrismaModel>
    _max?: NestedEnumHistoryEventTypeFilter<$PrismaModel>
  }

  export type EnumAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeFilter<$PrismaModel> | $Enums.AccountType
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    due_date?: SortOrder
    paid_by_id?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    amount?: SortOrder
    paid_by_id?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    due_date?: SortOrder
    paid_by_id?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    due_date?: SortOrder
    paid_by_id?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    id?: SortOrder
    house_id?: SortOrder
    amount?: SortOrder
    paid_by_id?: SortOrder
  }

  export type EnumAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type AccountScalarRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type PaymentShareAccount_idUser_idCompoundUniqueInput = {
    account_id: number
    user_id: number
  }

  export type PaymentShareCountOrderByAggregateInput = {
    account_id?: SortOrder
    user_id?: SortOrder
    share_amount?: SortOrder
    is_paid?: SortOrder
  }

  export type PaymentShareAvgOrderByAggregateInput = {
    account_id?: SortOrder
    user_id?: SortOrder
    share_amount?: SortOrder
  }

  export type PaymentShareMaxOrderByAggregateInput = {
    account_id?: SortOrder
    user_id?: SortOrder
    share_amount?: SortOrder
    is_paid?: SortOrder
  }

  export type PaymentShareMinOrderByAggregateInput = {
    account_id?: SortOrder
    user_id?: SortOrder
    share_amount?: SortOrder
    is_paid?: SortOrder
  }

  export type PaymentShareSumOrderByAggregateInput = {
    account_id?: SortOrder
    user_id?: SortOrder
    share_amount?: SortOrder
  }

  export type UserCreateNestedManyWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput> | UserCreateWithoutProfileInput[] | UserUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput | UserCreateOrConnectWithoutProfileInput[]
    createMany?: UserCreateManyProfileInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput> | UserCreateWithoutProfileInput[] | UserUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput | UserCreateOrConnectWithoutProfileInput[]
    createMany?: UserCreateManyProfileInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput> | UserCreateWithoutProfileInput[] | UserUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput | UserCreateOrConnectWithoutProfileInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfileInput | UserUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: UserCreateManyProfileInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfileInput | UserUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfileInput | UserUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput> | UserCreateWithoutProfileInput[] | UserUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput | UserCreateOrConnectWithoutProfileInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfileInput | UserUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: UserCreateManyProfileInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfileInput | UserUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfileInput | UserUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutHouse_adminInput = {
    create?: XOR<UserCreateWithoutHouse_adminInput, UserUncheckedCreateWithoutHouse_adminInput>
    connectOrCreate?: UserCreateOrConnectWithoutHouse_adminInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutHouseInput = {
    create?: XOR<UserCreateWithoutHouseInput, UserUncheckedCreateWithoutHouseInput> | UserCreateWithoutHouseInput[] | UserUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: UserCreateOrConnectWithoutHouseInput | UserCreateOrConnectWithoutHouseInput[]
    createMany?: UserCreateManyHouseInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutHouseInput = {
    create?: XOR<TaskCreateWithoutHouseInput, TaskUncheckedCreateWithoutHouseInput> | TaskCreateWithoutHouseInput[] | TaskUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutHouseInput | TaskCreateOrConnectWithoutHouseInput[]
    createMany?: TaskCreateManyHouseInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutHouseInput = {
    create?: XOR<AccountCreateWithoutHouseInput, AccountUncheckedCreateWithoutHouseInput> | AccountCreateWithoutHouseInput[] | AccountUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutHouseInput | AccountCreateOrConnectWithoutHouseInput[]
    createMany?: AccountCreateManyHouseInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type PunishmentCreateNestedManyWithoutHouseInput = {
    create?: XOR<PunishmentCreateWithoutHouseInput, PunishmentUncheckedCreateWithoutHouseInput> | PunishmentCreateWithoutHouseInput[] | PunishmentUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: PunishmentCreateOrConnectWithoutHouseInput | PunishmentCreateOrConnectWithoutHouseInput[]
    createMany?: PunishmentCreateManyHouseInputEnvelope
    connect?: PunishmentWhereUniqueInput | PunishmentWhereUniqueInput[]
  }

  export type HistoryCreateNestedManyWithoutHouseInput = {
    create?: XOR<HistoryCreateWithoutHouseInput, HistoryUncheckedCreateWithoutHouseInput> | HistoryCreateWithoutHouseInput[] | HistoryUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutHouseInput | HistoryCreateOrConnectWithoutHouseInput[]
    createMany?: HistoryCreateManyHouseInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutHouseInput = {
    create?: XOR<UserCreateWithoutHouseInput, UserUncheckedCreateWithoutHouseInput> | UserCreateWithoutHouseInput[] | UserUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: UserCreateOrConnectWithoutHouseInput | UserCreateOrConnectWithoutHouseInput[]
    createMany?: UserCreateManyHouseInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutHouseInput = {
    create?: XOR<TaskCreateWithoutHouseInput, TaskUncheckedCreateWithoutHouseInput> | TaskCreateWithoutHouseInput[] | TaskUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutHouseInput | TaskCreateOrConnectWithoutHouseInput[]
    createMany?: TaskCreateManyHouseInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutHouseInput = {
    create?: XOR<AccountCreateWithoutHouseInput, AccountUncheckedCreateWithoutHouseInput> | AccountCreateWithoutHouseInput[] | AccountUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutHouseInput | AccountCreateOrConnectWithoutHouseInput[]
    createMany?: AccountCreateManyHouseInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type PunishmentUncheckedCreateNestedManyWithoutHouseInput = {
    create?: XOR<PunishmentCreateWithoutHouseInput, PunishmentUncheckedCreateWithoutHouseInput> | PunishmentCreateWithoutHouseInput[] | PunishmentUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: PunishmentCreateOrConnectWithoutHouseInput | PunishmentCreateOrConnectWithoutHouseInput[]
    createMany?: PunishmentCreateManyHouseInputEnvelope
    connect?: PunishmentWhereUniqueInput | PunishmentWhereUniqueInput[]
  }

  export type HistoryUncheckedCreateNestedManyWithoutHouseInput = {
    create?: XOR<HistoryCreateWithoutHouseInput, HistoryUncheckedCreateWithoutHouseInput> | HistoryCreateWithoutHouseInput[] | HistoryUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutHouseInput | HistoryCreateOrConnectWithoutHouseInput[]
    createMany?: HistoryCreateManyHouseInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutHouse_adminNestedInput = {
    create?: XOR<UserCreateWithoutHouse_adminInput, UserUncheckedCreateWithoutHouse_adminInput>
    connectOrCreate?: UserCreateOrConnectWithoutHouse_adminInput
    upsert?: UserUpsertWithoutHouse_adminInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHouse_adminInput, UserUpdateWithoutHouse_adminInput>, UserUncheckedUpdateWithoutHouse_adminInput>
  }

  export type UserUpdateManyWithoutHouseNestedInput = {
    create?: XOR<UserCreateWithoutHouseInput, UserUncheckedCreateWithoutHouseInput> | UserCreateWithoutHouseInput[] | UserUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: UserCreateOrConnectWithoutHouseInput | UserCreateOrConnectWithoutHouseInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutHouseInput | UserUpsertWithWhereUniqueWithoutHouseInput[]
    createMany?: UserCreateManyHouseInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutHouseInput | UserUpdateWithWhereUniqueWithoutHouseInput[]
    updateMany?: UserUpdateManyWithWhereWithoutHouseInput | UserUpdateManyWithWhereWithoutHouseInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutHouseNestedInput = {
    create?: XOR<TaskCreateWithoutHouseInput, TaskUncheckedCreateWithoutHouseInput> | TaskCreateWithoutHouseInput[] | TaskUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutHouseInput | TaskCreateOrConnectWithoutHouseInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutHouseInput | TaskUpsertWithWhereUniqueWithoutHouseInput[]
    createMany?: TaskCreateManyHouseInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutHouseInput | TaskUpdateWithWhereUniqueWithoutHouseInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutHouseInput | TaskUpdateManyWithWhereWithoutHouseInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutHouseNestedInput = {
    create?: XOR<AccountCreateWithoutHouseInput, AccountUncheckedCreateWithoutHouseInput> | AccountCreateWithoutHouseInput[] | AccountUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutHouseInput | AccountCreateOrConnectWithoutHouseInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutHouseInput | AccountUpsertWithWhereUniqueWithoutHouseInput[]
    createMany?: AccountCreateManyHouseInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutHouseInput | AccountUpdateWithWhereUniqueWithoutHouseInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutHouseInput | AccountUpdateManyWithWhereWithoutHouseInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type PunishmentUpdateManyWithoutHouseNestedInput = {
    create?: XOR<PunishmentCreateWithoutHouseInput, PunishmentUncheckedCreateWithoutHouseInput> | PunishmentCreateWithoutHouseInput[] | PunishmentUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: PunishmentCreateOrConnectWithoutHouseInput | PunishmentCreateOrConnectWithoutHouseInput[]
    upsert?: PunishmentUpsertWithWhereUniqueWithoutHouseInput | PunishmentUpsertWithWhereUniqueWithoutHouseInput[]
    createMany?: PunishmentCreateManyHouseInputEnvelope
    set?: PunishmentWhereUniqueInput | PunishmentWhereUniqueInput[]
    disconnect?: PunishmentWhereUniqueInput | PunishmentWhereUniqueInput[]
    delete?: PunishmentWhereUniqueInput | PunishmentWhereUniqueInput[]
    connect?: PunishmentWhereUniqueInput | PunishmentWhereUniqueInput[]
    update?: PunishmentUpdateWithWhereUniqueWithoutHouseInput | PunishmentUpdateWithWhereUniqueWithoutHouseInput[]
    updateMany?: PunishmentUpdateManyWithWhereWithoutHouseInput | PunishmentUpdateManyWithWhereWithoutHouseInput[]
    deleteMany?: PunishmentScalarWhereInput | PunishmentScalarWhereInput[]
  }

  export type HistoryUpdateManyWithoutHouseNestedInput = {
    create?: XOR<HistoryCreateWithoutHouseInput, HistoryUncheckedCreateWithoutHouseInput> | HistoryCreateWithoutHouseInput[] | HistoryUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutHouseInput | HistoryCreateOrConnectWithoutHouseInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutHouseInput | HistoryUpsertWithWhereUniqueWithoutHouseInput[]
    createMany?: HistoryCreateManyHouseInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutHouseInput | HistoryUpdateWithWhereUniqueWithoutHouseInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutHouseInput | HistoryUpdateManyWithWhereWithoutHouseInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutHouseNestedInput = {
    create?: XOR<UserCreateWithoutHouseInput, UserUncheckedCreateWithoutHouseInput> | UserCreateWithoutHouseInput[] | UserUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: UserCreateOrConnectWithoutHouseInput | UserCreateOrConnectWithoutHouseInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutHouseInput | UserUpsertWithWhereUniqueWithoutHouseInput[]
    createMany?: UserCreateManyHouseInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutHouseInput | UserUpdateWithWhereUniqueWithoutHouseInput[]
    updateMany?: UserUpdateManyWithWhereWithoutHouseInput | UserUpdateManyWithWhereWithoutHouseInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutHouseNestedInput = {
    create?: XOR<TaskCreateWithoutHouseInput, TaskUncheckedCreateWithoutHouseInput> | TaskCreateWithoutHouseInput[] | TaskUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutHouseInput | TaskCreateOrConnectWithoutHouseInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutHouseInput | TaskUpsertWithWhereUniqueWithoutHouseInput[]
    createMany?: TaskCreateManyHouseInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutHouseInput | TaskUpdateWithWhereUniqueWithoutHouseInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutHouseInput | TaskUpdateManyWithWhereWithoutHouseInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutHouseNestedInput = {
    create?: XOR<AccountCreateWithoutHouseInput, AccountUncheckedCreateWithoutHouseInput> | AccountCreateWithoutHouseInput[] | AccountUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutHouseInput | AccountCreateOrConnectWithoutHouseInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutHouseInput | AccountUpsertWithWhereUniqueWithoutHouseInput[]
    createMany?: AccountCreateManyHouseInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutHouseInput | AccountUpdateWithWhereUniqueWithoutHouseInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutHouseInput | AccountUpdateManyWithWhereWithoutHouseInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type PunishmentUncheckedUpdateManyWithoutHouseNestedInput = {
    create?: XOR<PunishmentCreateWithoutHouseInput, PunishmentUncheckedCreateWithoutHouseInput> | PunishmentCreateWithoutHouseInput[] | PunishmentUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: PunishmentCreateOrConnectWithoutHouseInput | PunishmentCreateOrConnectWithoutHouseInput[]
    upsert?: PunishmentUpsertWithWhereUniqueWithoutHouseInput | PunishmentUpsertWithWhereUniqueWithoutHouseInput[]
    createMany?: PunishmentCreateManyHouseInputEnvelope
    set?: PunishmentWhereUniqueInput | PunishmentWhereUniqueInput[]
    disconnect?: PunishmentWhereUniqueInput | PunishmentWhereUniqueInput[]
    delete?: PunishmentWhereUniqueInput | PunishmentWhereUniqueInput[]
    connect?: PunishmentWhereUniqueInput | PunishmentWhereUniqueInput[]
    update?: PunishmentUpdateWithWhereUniqueWithoutHouseInput | PunishmentUpdateWithWhereUniqueWithoutHouseInput[]
    updateMany?: PunishmentUpdateManyWithWhereWithoutHouseInput | PunishmentUpdateManyWithWhereWithoutHouseInput[]
    deleteMany?: PunishmentScalarWhereInput | PunishmentScalarWhereInput[]
  }

  export type HistoryUncheckedUpdateManyWithoutHouseNestedInput = {
    create?: XOR<HistoryCreateWithoutHouseInput, HistoryUncheckedCreateWithoutHouseInput> | HistoryCreateWithoutHouseInput[] | HistoryUncheckedCreateWithoutHouseInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutHouseInput | HistoryCreateOrConnectWithoutHouseInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutHouseInput | HistoryUpsertWithWhereUniqueWithoutHouseInput[]
    createMany?: HistoryCreateManyHouseInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutHouseInput | HistoryUpdateWithWhereUniqueWithoutHouseInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutHouseInput | HistoryUpdateManyWithWhereWithoutHouseInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutUsersInput = {
    create?: XOR<ProfileCreateWithoutUsersInput, ProfileUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUsersInput
    connect?: ProfileWhereUniqueInput
  }

  export type HouseCreateNestedOneWithoutMembersInput = {
    create?: XOR<HouseCreateWithoutMembersInput, HouseUncheckedCreateWithoutMembersInput>
    connectOrCreate?: HouseCreateOrConnectWithoutMembersInput
    connect?: HouseWhereUniqueInput
  }

  export type HouseCreateNestedManyWithoutAdminInput = {
    create?: XOR<HouseCreateWithoutAdminInput, HouseUncheckedCreateWithoutAdminInput> | HouseCreateWithoutAdminInput[] | HouseUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: HouseCreateOrConnectWithoutAdminInput | HouseCreateOrConnectWithoutAdminInput[]
    createMany?: HouseCreateManyAdminInputEnvelope
    connect?: HouseWhereUniqueInput | HouseWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<TaskCreateWithoutResponsibleInput, TaskUncheckedCreateWithoutResponsibleInput> | TaskCreateWithoutResponsibleInput[] | TaskUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutResponsibleInput | TaskCreateOrConnectWithoutResponsibleInput[]
    createMany?: TaskCreateManyResponsibleInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskReviewCreateNestedManyWithoutReviewerInput = {
    create?: XOR<TaskReviewCreateWithoutReviewerInput, TaskReviewUncheckedCreateWithoutReviewerInput> | TaskReviewCreateWithoutReviewerInput[] | TaskReviewUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: TaskReviewCreateOrConnectWithoutReviewerInput | TaskReviewCreateOrConnectWithoutReviewerInput[]
    createMany?: TaskReviewCreateManyReviewerInputEnvelope
    connect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
  }

  export type BuyoutCreateNestedManyWithoutUserInput = {
    create?: XOR<BuyoutCreateWithoutUserInput, BuyoutUncheckedCreateWithoutUserInput> | BuyoutCreateWithoutUserInput[] | BuyoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyoutCreateOrConnectWithoutUserInput | BuyoutCreateOrConnectWithoutUserInput[]
    createMany?: BuyoutCreateManyUserInputEnvelope
    connect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutPaid_byInput = {
    create?: XOR<AccountCreateWithoutPaid_byInput, AccountUncheckedCreateWithoutPaid_byInput> | AccountCreateWithoutPaid_byInput[] | AccountUncheckedCreateWithoutPaid_byInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutPaid_byInput | AccountCreateOrConnectWithoutPaid_byInput[]
    createMany?: AccountCreateManyPaid_byInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type PaymentShareCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentShareCreateWithoutUserInput, PaymentShareUncheckedCreateWithoutUserInput> | PaymentShareCreateWithoutUserInput[] | PaymentShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentShareCreateOrConnectWithoutUserInput | PaymentShareCreateOrConnectWithoutUserInput[]
    createMany?: PaymentShareCreateManyUserInputEnvelope
    connect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
  }

  export type HistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type HouseUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<HouseCreateWithoutAdminInput, HouseUncheckedCreateWithoutAdminInput> | HouseCreateWithoutAdminInput[] | HouseUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: HouseCreateOrConnectWithoutAdminInput | HouseCreateOrConnectWithoutAdminInput[]
    createMany?: HouseCreateManyAdminInputEnvelope
    connect?: HouseWhereUniqueInput | HouseWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<TaskCreateWithoutResponsibleInput, TaskUncheckedCreateWithoutResponsibleInput> | TaskCreateWithoutResponsibleInput[] | TaskUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutResponsibleInput | TaskCreateOrConnectWithoutResponsibleInput[]
    createMany?: TaskCreateManyResponsibleInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskReviewUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<TaskReviewCreateWithoutReviewerInput, TaskReviewUncheckedCreateWithoutReviewerInput> | TaskReviewCreateWithoutReviewerInput[] | TaskReviewUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: TaskReviewCreateOrConnectWithoutReviewerInput | TaskReviewCreateOrConnectWithoutReviewerInput[]
    createMany?: TaskReviewCreateManyReviewerInputEnvelope
    connect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
  }

  export type BuyoutUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BuyoutCreateWithoutUserInput, BuyoutUncheckedCreateWithoutUserInput> | BuyoutCreateWithoutUserInput[] | BuyoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyoutCreateOrConnectWithoutUserInput | BuyoutCreateOrConnectWithoutUserInput[]
    createMany?: BuyoutCreateManyUserInputEnvelope
    connect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutPaid_byInput = {
    create?: XOR<AccountCreateWithoutPaid_byInput, AccountUncheckedCreateWithoutPaid_byInput> | AccountCreateWithoutPaid_byInput[] | AccountUncheckedCreateWithoutPaid_byInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutPaid_byInput | AccountCreateOrConnectWithoutPaid_byInput[]
    createMany?: AccountCreateManyPaid_byInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type PaymentShareUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentShareCreateWithoutUserInput, PaymentShareUncheckedCreateWithoutUserInput> | PaymentShareCreateWithoutUserInput[] | PaymentShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentShareCreateOrConnectWithoutUserInput | PaymentShareCreateOrConnectWithoutUserInput[]
    createMany?: PaymentShareCreateManyUserInputEnvelope
    connect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
  }

  export type HistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type EnumHouseStatusFieldUpdateOperationsInput = {
    set?: $Enums.HouseStatus
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProfileUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ProfileCreateWithoutUsersInput, ProfileUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUsersInput
    upsert?: ProfileUpsertWithoutUsersInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUsersInput, ProfileUpdateWithoutUsersInput>, ProfileUncheckedUpdateWithoutUsersInput>
  }

  export type HouseUpdateOneWithoutMembersNestedInput = {
    create?: XOR<HouseCreateWithoutMembersInput, HouseUncheckedCreateWithoutMembersInput>
    connectOrCreate?: HouseCreateOrConnectWithoutMembersInput
    upsert?: HouseUpsertWithoutMembersInput
    disconnect?: HouseWhereInput | boolean
    delete?: HouseWhereInput | boolean
    connect?: HouseWhereUniqueInput
    update?: XOR<XOR<HouseUpdateToOneWithWhereWithoutMembersInput, HouseUpdateWithoutMembersInput>, HouseUncheckedUpdateWithoutMembersInput>
  }

  export type HouseUpdateManyWithoutAdminNestedInput = {
    create?: XOR<HouseCreateWithoutAdminInput, HouseUncheckedCreateWithoutAdminInput> | HouseCreateWithoutAdminInput[] | HouseUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: HouseCreateOrConnectWithoutAdminInput | HouseCreateOrConnectWithoutAdminInput[]
    upsert?: HouseUpsertWithWhereUniqueWithoutAdminInput | HouseUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: HouseCreateManyAdminInputEnvelope
    set?: HouseWhereUniqueInput | HouseWhereUniqueInput[]
    disconnect?: HouseWhereUniqueInput | HouseWhereUniqueInput[]
    delete?: HouseWhereUniqueInput | HouseWhereUniqueInput[]
    connect?: HouseWhereUniqueInput | HouseWhereUniqueInput[]
    update?: HouseUpdateWithWhereUniqueWithoutAdminInput | HouseUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: HouseUpdateManyWithWhereWithoutAdminInput | HouseUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: HouseScalarWhereInput | HouseScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<TaskCreateWithoutResponsibleInput, TaskUncheckedCreateWithoutResponsibleInput> | TaskCreateWithoutResponsibleInput[] | TaskUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutResponsibleInput | TaskCreateOrConnectWithoutResponsibleInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutResponsibleInput | TaskUpsertWithWhereUniqueWithoutResponsibleInput[]
    createMany?: TaskCreateManyResponsibleInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutResponsibleInput | TaskUpdateWithWhereUniqueWithoutResponsibleInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutResponsibleInput | TaskUpdateManyWithWhereWithoutResponsibleInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskReviewUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<TaskReviewCreateWithoutReviewerInput, TaskReviewUncheckedCreateWithoutReviewerInput> | TaskReviewCreateWithoutReviewerInput[] | TaskReviewUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: TaskReviewCreateOrConnectWithoutReviewerInput | TaskReviewCreateOrConnectWithoutReviewerInput[]
    upsert?: TaskReviewUpsertWithWhereUniqueWithoutReviewerInput | TaskReviewUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: TaskReviewCreateManyReviewerInputEnvelope
    set?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    disconnect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    delete?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    connect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    update?: TaskReviewUpdateWithWhereUniqueWithoutReviewerInput | TaskReviewUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: TaskReviewUpdateManyWithWhereWithoutReviewerInput | TaskReviewUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: TaskReviewScalarWhereInput | TaskReviewScalarWhereInput[]
  }

  export type BuyoutUpdateManyWithoutUserNestedInput = {
    create?: XOR<BuyoutCreateWithoutUserInput, BuyoutUncheckedCreateWithoutUserInput> | BuyoutCreateWithoutUserInput[] | BuyoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyoutCreateOrConnectWithoutUserInput | BuyoutCreateOrConnectWithoutUserInput[]
    upsert?: BuyoutUpsertWithWhereUniqueWithoutUserInput | BuyoutUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BuyoutCreateManyUserInputEnvelope
    set?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    disconnect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    delete?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    connect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    update?: BuyoutUpdateWithWhereUniqueWithoutUserInput | BuyoutUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BuyoutUpdateManyWithWhereWithoutUserInput | BuyoutUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BuyoutScalarWhereInput | BuyoutScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutPaid_byNestedInput = {
    create?: XOR<AccountCreateWithoutPaid_byInput, AccountUncheckedCreateWithoutPaid_byInput> | AccountCreateWithoutPaid_byInput[] | AccountUncheckedCreateWithoutPaid_byInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutPaid_byInput | AccountCreateOrConnectWithoutPaid_byInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutPaid_byInput | AccountUpsertWithWhereUniqueWithoutPaid_byInput[]
    createMany?: AccountCreateManyPaid_byInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutPaid_byInput | AccountUpdateWithWhereUniqueWithoutPaid_byInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutPaid_byInput | AccountUpdateManyWithWhereWithoutPaid_byInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type PaymentShareUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentShareCreateWithoutUserInput, PaymentShareUncheckedCreateWithoutUserInput> | PaymentShareCreateWithoutUserInput[] | PaymentShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentShareCreateOrConnectWithoutUserInput | PaymentShareCreateOrConnectWithoutUserInput[]
    upsert?: PaymentShareUpsertWithWhereUniqueWithoutUserInput | PaymentShareUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentShareCreateManyUserInputEnvelope
    set?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    disconnect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    delete?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    connect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    update?: PaymentShareUpdateWithWhereUniqueWithoutUserInput | PaymentShareUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentShareUpdateManyWithWhereWithoutUserInput | PaymentShareUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentShareScalarWhereInput | PaymentShareScalarWhereInput[]
  }

  export type HistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutUserInput | HistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutUserInput | HistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutUserInput | HistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HouseUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<HouseCreateWithoutAdminInput, HouseUncheckedCreateWithoutAdminInput> | HouseCreateWithoutAdminInput[] | HouseUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: HouseCreateOrConnectWithoutAdminInput | HouseCreateOrConnectWithoutAdminInput[]
    upsert?: HouseUpsertWithWhereUniqueWithoutAdminInput | HouseUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: HouseCreateManyAdminInputEnvelope
    set?: HouseWhereUniqueInput | HouseWhereUniqueInput[]
    disconnect?: HouseWhereUniqueInput | HouseWhereUniqueInput[]
    delete?: HouseWhereUniqueInput | HouseWhereUniqueInput[]
    connect?: HouseWhereUniqueInput | HouseWhereUniqueInput[]
    update?: HouseUpdateWithWhereUniqueWithoutAdminInput | HouseUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: HouseUpdateManyWithWhereWithoutAdminInput | HouseUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: HouseScalarWhereInput | HouseScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<TaskCreateWithoutResponsibleInput, TaskUncheckedCreateWithoutResponsibleInput> | TaskCreateWithoutResponsibleInput[] | TaskUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutResponsibleInput | TaskCreateOrConnectWithoutResponsibleInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutResponsibleInput | TaskUpsertWithWhereUniqueWithoutResponsibleInput[]
    createMany?: TaskCreateManyResponsibleInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutResponsibleInput | TaskUpdateWithWhereUniqueWithoutResponsibleInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutResponsibleInput | TaskUpdateManyWithWhereWithoutResponsibleInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskReviewUncheckedUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<TaskReviewCreateWithoutReviewerInput, TaskReviewUncheckedCreateWithoutReviewerInput> | TaskReviewCreateWithoutReviewerInput[] | TaskReviewUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: TaskReviewCreateOrConnectWithoutReviewerInput | TaskReviewCreateOrConnectWithoutReviewerInput[]
    upsert?: TaskReviewUpsertWithWhereUniqueWithoutReviewerInput | TaskReviewUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: TaskReviewCreateManyReviewerInputEnvelope
    set?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    disconnect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    delete?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    connect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    update?: TaskReviewUpdateWithWhereUniqueWithoutReviewerInput | TaskReviewUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: TaskReviewUpdateManyWithWhereWithoutReviewerInput | TaskReviewUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: TaskReviewScalarWhereInput | TaskReviewScalarWhereInput[]
  }

  export type BuyoutUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BuyoutCreateWithoutUserInput, BuyoutUncheckedCreateWithoutUserInput> | BuyoutCreateWithoutUserInput[] | BuyoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyoutCreateOrConnectWithoutUserInput | BuyoutCreateOrConnectWithoutUserInput[]
    upsert?: BuyoutUpsertWithWhereUniqueWithoutUserInput | BuyoutUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BuyoutCreateManyUserInputEnvelope
    set?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    disconnect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    delete?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    connect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    update?: BuyoutUpdateWithWhereUniqueWithoutUserInput | BuyoutUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BuyoutUpdateManyWithWhereWithoutUserInput | BuyoutUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BuyoutScalarWhereInput | BuyoutScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutPaid_byNestedInput = {
    create?: XOR<AccountCreateWithoutPaid_byInput, AccountUncheckedCreateWithoutPaid_byInput> | AccountCreateWithoutPaid_byInput[] | AccountUncheckedCreateWithoutPaid_byInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutPaid_byInput | AccountCreateOrConnectWithoutPaid_byInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutPaid_byInput | AccountUpsertWithWhereUniqueWithoutPaid_byInput[]
    createMany?: AccountCreateManyPaid_byInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutPaid_byInput | AccountUpdateWithWhereUniqueWithoutPaid_byInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutPaid_byInput | AccountUpdateManyWithWhereWithoutPaid_byInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type PaymentShareUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentShareCreateWithoutUserInput, PaymentShareUncheckedCreateWithoutUserInput> | PaymentShareCreateWithoutUserInput[] | PaymentShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentShareCreateOrConnectWithoutUserInput | PaymentShareCreateOrConnectWithoutUserInput[]
    upsert?: PaymentShareUpsertWithWhereUniqueWithoutUserInput | PaymentShareUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentShareCreateManyUserInputEnvelope
    set?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    disconnect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    delete?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    connect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    update?: PaymentShareUpdateWithWhereUniqueWithoutUserInput | PaymentShareUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentShareUpdateManyWithWhereWithoutUserInput | PaymentShareUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentShareScalarWhereInput | PaymentShareScalarWhereInput[]
  }

  export type HistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutUserInput | HistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutUserInput | HistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutUserInput | HistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type HouseCreateNestedOneWithoutTasksInput = {
    create?: XOR<HouseCreateWithoutTasksInput, HouseUncheckedCreateWithoutTasksInput>
    connectOrCreate?: HouseCreateOrConnectWithoutTasksInput
    connect?: HouseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTasks_responsibleInput = {
    create?: XOR<UserCreateWithoutTasks_responsibleInput, UserUncheckedCreateWithoutTasks_responsibleInput>
    connectOrCreate?: UserCreateOrConnectWithoutTasks_responsibleInput
    connect?: UserWhereUniqueInput
  }

  export type TaskReviewCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskReviewCreateWithoutTaskInput, TaskReviewUncheckedCreateWithoutTaskInput> | TaskReviewCreateWithoutTaskInput[] | TaskReviewUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskReviewCreateOrConnectWithoutTaskInput | TaskReviewCreateOrConnectWithoutTaskInput[]
    createMany?: TaskReviewCreateManyTaskInputEnvelope
    connect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
  }

  export type BuyoutCreateNestedManyWithoutTaskInput = {
    create?: XOR<BuyoutCreateWithoutTaskInput, BuyoutUncheckedCreateWithoutTaskInput> | BuyoutCreateWithoutTaskInput[] | BuyoutUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: BuyoutCreateOrConnectWithoutTaskInput | BuyoutCreateOrConnectWithoutTaskInput[]
    createMany?: BuyoutCreateManyTaskInputEnvelope
    connect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
  }

  export type TaskReviewUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskReviewCreateWithoutTaskInput, TaskReviewUncheckedCreateWithoutTaskInput> | TaskReviewCreateWithoutTaskInput[] | TaskReviewUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskReviewCreateOrConnectWithoutTaskInput | TaskReviewCreateOrConnectWithoutTaskInput[]
    createMany?: TaskReviewCreateManyTaskInputEnvelope
    connect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
  }

  export type BuyoutUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<BuyoutCreateWithoutTaskInput, BuyoutUncheckedCreateWithoutTaskInput> | BuyoutCreateWithoutTaskInput[] | BuyoutUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: BuyoutCreateOrConnectWithoutTaskInput | BuyoutCreateOrConnectWithoutTaskInput[]
    createMany?: BuyoutCreateManyTaskInputEnvelope
    connect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
  }

  export type EnumTaskFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.TaskFrequency
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type HouseUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<HouseCreateWithoutTasksInput, HouseUncheckedCreateWithoutTasksInput>
    connectOrCreate?: HouseCreateOrConnectWithoutTasksInput
    upsert?: HouseUpsertWithoutTasksInput
    connect?: HouseWhereUniqueInput
    update?: XOR<XOR<HouseUpdateToOneWithWhereWithoutTasksInput, HouseUpdateWithoutTasksInput>, HouseUncheckedUpdateWithoutTasksInput>
  }

  export type UserUpdateOneWithoutTasks_responsibleNestedInput = {
    create?: XOR<UserCreateWithoutTasks_responsibleInput, UserUncheckedCreateWithoutTasks_responsibleInput>
    connectOrCreate?: UserCreateOrConnectWithoutTasks_responsibleInput
    upsert?: UserUpsertWithoutTasks_responsibleInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTasks_responsibleInput, UserUpdateWithoutTasks_responsibleInput>, UserUncheckedUpdateWithoutTasks_responsibleInput>
  }

  export type TaskReviewUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskReviewCreateWithoutTaskInput, TaskReviewUncheckedCreateWithoutTaskInput> | TaskReviewCreateWithoutTaskInput[] | TaskReviewUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskReviewCreateOrConnectWithoutTaskInput | TaskReviewCreateOrConnectWithoutTaskInput[]
    upsert?: TaskReviewUpsertWithWhereUniqueWithoutTaskInput | TaskReviewUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TaskReviewCreateManyTaskInputEnvelope
    set?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    disconnect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    delete?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    connect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    update?: TaskReviewUpdateWithWhereUniqueWithoutTaskInput | TaskReviewUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskReviewUpdateManyWithWhereWithoutTaskInput | TaskReviewUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskReviewScalarWhereInput | TaskReviewScalarWhereInput[]
  }

  export type BuyoutUpdateManyWithoutTaskNestedInput = {
    create?: XOR<BuyoutCreateWithoutTaskInput, BuyoutUncheckedCreateWithoutTaskInput> | BuyoutCreateWithoutTaskInput[] | BuyoutUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: BuyoutCreateOrConnectWithoutTaskInput | BuyoutCreateOrConnectWithoutTaskInput[]
    upsert?: BuyoutUpsertWithWhereUniqueWithoutTaskInput | BuyoutUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: BuyoutCreateManyTaskInputEnvelope
    set?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    disconnect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    delete?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    connect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    update?: BuyoutUpdateWithWhereUniqueWithoutTaskInput | BuyoutUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: BuyoutUpdateManyWithWhereWithoutTaskInput | BuyoutUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: BuyoutScalarWhereInput | BuyoutScalarWhereInput[]
  }

  export type TaskReviewUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskReviewCreateWithoutTaskInput, TaskReviewUncheckedCreateWithoutTaskInput> | TaskReviewCreateWithoutTaskInput[] | TaskReviewUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskReviewCreateOrConnectWithoutTaskInput | TaskReviewCreateOrConnectWithoutTaskInput[]
    upsert?: TaskReviewUpsertWithWhereUniqueWithoutTaskInput | TaskReviewUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TaskReviewCreateManyTaskInputEnvelope
    set?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    disconnect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    delete?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    connect?: TaskReviewWhereUniqueInput | TaskReviewWhereUniqueInput[]
    update?: TaskReviewUpdateWithWhereUniqueWithoutTaskInput | TaskReviewUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskReviewUpdateManyWithWhereWithoutTaskInput | TaskReviewUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskReviewScalarWhereInput | TaskReviewScalarWhereInput[]
  }

  export type BuyoutUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<BuyoutCreateWithoutTaskInput, BuyoutUncheckedCreateWithoutTaskInput> | BuyoutCreateWithoutTaskInput[] | BuyoutUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: BuyoutCreateOrConnectWithoutTaskInput | BuyoutCreateOrConnectWithoutTaskInput[]
    upsert?: BuyoutUpsertWithWhereUniqueWithoutTaskInput | BuyoutUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: BuyoutCreateManyTaskInputEnvelope
    set?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    disconnect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    delete?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    connect?: BuyoutWhereUniqueInput | BuyoutWhereUniqueInput[]
    update?: BuyoutUpdateWithWhereUniqueWithoutTaskInput | BuyoutUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: BuyoutUpdateManyWithWhereWithoutTaskInput | BuyoutUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: BuyoutScalarWhereInput | BuyoutScalarWhereInput[]
  }

  export type TaskCreateNestedOneWithoutReviewsInput = {
    create?: XOR<TaskCreateWithoutReviewsInput, TaskUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutReviewsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTask_reviewsInput = {
    create?: XOR<UserCreateWithoutTask_reviewsInput, UserUncheckedCreateWithoutTask_reviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTask_reviewsInput
    connect?: UserWhereUniqueInput
  }

  export type TaskUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<TaskCreateWithoutReviewsInput, TaskUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutReviewsInput
    upsert?: TaskUpsertWithoutReviewsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutReviewsInput, TaskUpdateWithoutReviewsInput>, TaskUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutTask_reviewsNestedInput = {
    create?: XOR<UserCreateWithoutTask_reviewsInput, UserUncheckedCreateWithoutTask_reviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTask_reviewsInput
    upsert?: UserUpsertWithoutTask_reviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTask_reviewsInput, UserUpdateWithoutTask_reviewsInput>, UserUncheckedUpdateWithoutTask_reviewsInput>
  }

  export type UserCreateNestedOneWithoutBuyoutsInput = {
    create?: XOR<UserCreateWithoutBuyoutsInput, UserUncheckedCreateWithoutBuyoutsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBuyoutsInput
    connect?: UserWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutBuyoutsInput = {
    create?: XOR<TaskCreateWithoutBuyoutsInput, TaskUncheckedCreateWithoutBuyoutsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutBuyoutsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBuyoutsNestedInput = {
    create?: XOR<UserCreateWithoutBuyoutsInput, UserUncheckedCreateWithoutBuyoutsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBuyoutsInput
    upsert?: UserUpsertWithoutBuyoutsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBuyoutsInput, UserUpdateWithoutBuyoutsInput>, UserUncheckedUpdateWithoutBuyoutsInput>
  }

  export type TaskUpdateOneRequiredWithoutBuyoutsNestedInput = {
    create?: XOR<TaskCreateWithoutBuyoutsInput, TaskUncheckedCreateWithoutBuyoutsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutBuyoutsInput
    upsert?: TaskUpsertWithoutBuyoutsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutBuyoutsInput, TaskUpdateWithoutBuyoutsInput>, TaskUncheckedUpdateWithoutBuyoutsInput>
  }

  export type HouseCreateNestedOneWithoutPunishmentsInput = {
    create?: XOR<HouseCreateWithoutPunishmentsInput, HouseUncheckedCreateWithoutPunishmentsInput>
    connectOrCreate?: HouseCreateOrConnectWithoutPunishmentsInput
    connect?: HouseWhereUniqueInput
  }

  export type HouseUpdateOneRequiredWithoutPunishmentsNestedInput = {
    create?: XOR<HouseCreateWithoutPunishmentsInput, HouseUncheckedCreateWithoutPunishmentsInput>
    connectOrCreate?: HouseCreateOrConnectWithoutPunishmentsInput
    upsert?: HouseUpsertWithoutPunishmentsInput
    connect?: HouseWhereUniqueInput
    update?: XOR<XOR<HouseUpdateToOneWithWhereWithoutPunishmentsInput, HouseUpdateWithoutPunishmentsInput>, HouseUncheckedUpdateWithoutPunishmentsInput>
  }

  export type HouseCreateNestedOneWithoutHistoryInput = {
    create?: XOR<HouseCreateWithoutHistoryInput, HouseUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: HouseCreateOrConnectWithoutHistoryInput
    connect?: HouseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutHistoryInput = {
    create?: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type EnumHistoryEventTypeFieldUpdateOperationsInput = {
    set?: $Enums.HistoryEventType
  }

  export type HouseUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<HouseCreateWithoutHistoryInput, HouseUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: HouseCreateOrConnectWithoutHistoryInput
    upsert?: HouseUpsertWithoutHistoryInput
    connect?: HouseWhereUniqueInput
    update?: XOR<XOR<HouseUpdateToOneWithWhereWithoutHistoryInput, HouseUpdateWithoutHistoryInput>, HouseUncheckedUpdateWithoutHistoryInput>
  }

  export type UserUpdateOneWithoutHistoryNestedInput = {
    create?: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoryInput
    upsert?: UserUpsertWithoutHistoryInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHistoryInput, UserUpdateWithoutHistoryInput>, UserUncheckedUpdateWithoutHistoryInput>
  }

  export type HouseCreateNestedOneWithoutAccountsInput = {
    create?: XOR<HouseCreateWithoutAccountsInput, HouseUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: HouseCreateOrConnectWithoutAccountsInput
    connect?: HouseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAccounts_paidInput = {
    create?: XOR<UserCreateWithoutAccounts_paidInput, UserUncheckedCreateWithoutAccounts_paidInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccounts_paidInput
    connect?: UserWhereUniqueInput
  }

  export type PaymentShareCreateNestedManyWithoutAccountInput = {
    create?: XOR<PaymentShareCreateWithoutAccountInput, PaymentShareUncheckedCreateWithoutAccountInput> | PaymentShareCreateWithoutAccountInput[] | PaymentShareUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: PaymentShareCreateOrConnectWithoutAccountInput | PaymentShareCreateOrConnectWithoutAccountInput[]
    createMany?: PaymentShareCreateManyAccountInputEnvelope
    connect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
  }

  export type PaymentShareUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<PaymentShareCreateWithoutAccountInput, PaymentShareUncheckedCreateWithoutAccountInput> | PaymentShareCreateWithoutAccountInput[] | PaymentShareUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: PaymentShareCreateOrConnectWithoutAccountInput | PaymentShareCreateOrConnectWithoutAccountInput[]
    createMany?: PaymentShareCreateManyAccountInputEnvelope
    connect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
  }

  export type EnumAccountTypeFieldUpdateOperationsInput = {
    set?: $Enums.AccountType
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type HouseUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<HouseCreateWithoutAccountsInput, HouseUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: HouseCreateOrConnectWithoutAccountsInput
    upsert?: HouseUpsertWithoutAccountsInput
    connect?: HouseWhereUniqueInput
    update?: XOR<XOR<HouseUpdateToOneWithWhereWithoutAccountsInput, HouseUpdateWithoutAccountsInput>, HouseUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateOneRequiredWithoutAccounts_paidNestedInput = {
    create?: XOR<UserCreateWithoutAccounts_paidInput, UserUncheckedCreateWithoutAccounts_paidInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccounts_paidInput
    upsert?: UserUpsertWithoutAccounts_paidInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccounts_paidInput, UserUpdateWithoutAccounts_paidInput>, UserUncheckedUpdateWithoutAccounts_paidInput>
  }

  export type PaymentShareUpdateManyWithoutAccountNestedInput = {
    create?: XOR<PaymentShareCreateWithoutAccountInput, PaymentShareUncheckedCreateWithoutAccountInput> | PaymentShareCreateWithoutAccountInput[] | PaymentShareUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: PaymentShareCreateOrConnectWithoutAccountInput | PaymentShareCreateOrConnectWithoutAccountInput[]
    upsert?: PaymentShareUpsertWithWhereUniqueWithoutAccountInput | PaymentShareUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: PaymentShareCreateManyAccountInputEnvelope
    set?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    disconnect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    delete?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    connect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    update?: PaymentShareUpdateWithWhereUniqueWithoutAccountInput | PaymentShareUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: PaymentShareUpdateManyWithWhereWithoutAccountInput | PaymentShareUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: PaymentShareScalarWhereInput | PaymentShareScalarWhereInput[]
  }

  export type PaymentShareUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<PaymentShareCreateWithoutAccountInput, PaymentShareUncheckedCreateWithoutAccountInput> | PaymentShareCreateWithoutAccountInput[] | PaymentShareUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: PaymentShareCreateOrConnectWithoutAccountInput | PaymentShareCreateOrConnectWithoutAccountInput[]
    upsert?: PaymentShareUpsertWithWhereUniqueWithoutAccountInput | PaymentShareUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: PaymentShareCreateManyAccountInputEnvelope
    set?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    disconnect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    delete?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    connect?: PaymentShareWhereUniqueInput | PaymentShareWhereUniqueInput[]
    update?: PaymentShareUpdateWithWhereUniqueWithoutAccountInput | PaymentShareUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: PaymentShareUpdateManyWithWhereWithoutAccountInput | PaymentShareUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: PaymentShareScalarWhereInput | PaymentShareScalarWhereInput[]
  }

  export type AccountCreateNestedOneWithoutPayment_sharesInput = {
    create?: XOR<AccountCreateWithoutPayment_sharesInput, AccountUncheckedCreateWithoutPayment_sharesInput>
    connectOrCreate?: AccountCreateOrConnectWithoutPayment_sharesInput
    connect?: AccountWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPayment_sharesInput = {
    create?: XOR<UserCreateWithoutPayment_sharesInput, UserUncheckedCreateWithoutPayment_sharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPayment_sharesInput
    connect?: UserWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutPayment_sharesNestedInput = {
    create?: XOR<AccountCreateWithoutPayment_sharesInput, AccountUncheckedCreateWithoutPayment_sharesInput>
    connectOrCreate?: AccountCreateOrConnectWithoutPayment_sharesInput
    upsert?: AccountUpsertWithoutPayment_sharesInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutPayment_sharesInput, AccountUpdateWithoutPayment_sharesInput>, AccountUncheckedUpdateWithoutPayment_sharesInput>
  }

  export type UserUpdateOneRequiredWithoutPayment_sharesNestedInput = {
    create?: XOR<UserCreateWithoutPayment_sharesInput, UserUncheckedCreateWithoutPayment_sharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPayment_sharesInput
    upsert?: UserUpsertWithoutPayment_sharesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPayment_sharesInput, UserUpdateWithoutPayment_sharesInput>, UserUncheckedUpdateWithoutPayment_sharesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumHouseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HouseStatus | EnumHouseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HouseStatus[] | ListEnumHouseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HouseStatus[] | ListEnumHouseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHouseStatusFilter<$PrismaModel> | $Enums.HouseStatus
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumHouseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HouseStatus | EnumHouseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HouseStatus[] | ListEnumHouseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HouseStatus[] | ListEnumHouseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHouseStatusWithAggregatesFilter<$PrismaModel> | $Enums.HouseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHouseStatusFilter<$PrismaModel>
    _max?: NestedEnumHouseStatusFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTaskFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskFrequency | EnumTaskFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.TaskFrequency[] | ListEnumTaskFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskFrequency[] | ListEnumTaskFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskFrequencyFilter<$PrismaModel> | $Enums.TaskFrequency
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumTaskFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskFrequency | EnumTaskFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.TaskFrequency[] | ListEnumTaskFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskFrequency[] | ListEnumTaskFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.TaskFrequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskFrequencyFilter<$PrismaModel>
    _max?: NestedEnumTaskFrequencyFilter<$PrismaModel>
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumHistoryEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.HistoryEventType | EnumHistoryEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HistoryEventType[] | ListEnumHistoryEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HistoryEventType[] | ListEnumHistoryEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHistoryEventTypeFilter<$PrismaModel> | $Enums.HistoryEventType
  }

  export type NestedEnumHistoryEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HistoryEventType | EnumHistoryEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HistoryEventType[] | ListEnumHistoryEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HistoryEventType[] | ListEnumHistoryEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHistoryEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.HistoryEventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHistoryEventTypeFilter<$PrismaModel>
    _max?: NestedEnumHistoryEventTypeFilter<$PrismaModel>
  }

  export type NestedEnumAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeFilter<$PrismaModel> | $Enums.AccountType
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UserCreateWithoutProfileInput = {
    name: string
    email: string
    password_hash: string
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    house?: HouseCreateNestedOneWithoutMembersInput
    house_admin?: HouseCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutCreateNestedManyWithoutUserInput
    accounts_paid?: AccountCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    house_admin?: HouseUncheckedCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskUncheckedCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewUncheckedCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutUserInput
    accounts_paid?: AccountUncheckedCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserCreateManyProfileInputEnvelope = {
    data: UserCreateManyProfileInput | UserCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutProfileInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithWhereUniqueWithoutProfileInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateManyWithWhereWithoutProfileInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutProfileInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    profile_id?: IntFilter<"User"> | number
    house_id?: IntNullableFilter<"User"> | number | null
    house_status?: EnumHouseStatusFilter<"User"> | $Enums.HouseStatus
    score?: IntFilter<"User"> | number
    star_avg?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    avatar_color?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
  }

  export type UserCreateWithoutHouse_adminInput = {
    name: string
    email: string
    password_hash: string
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    profile: ProfileCreateNestedOneWithoutUsersInput
    house?: HouseCreateNestedOneWithoutMembersInput
    tasks_responsible?: TaskCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutCreateNestedManyWithoutUserInput
    accounts_paid?: AccountCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHouse_adminInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    tasks_responsible?: TaskUncheckedCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewUncheckedCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutUserInput
    accounts_paid?: AccountUncheckedCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHouse_adminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHouse_adminInput, UserUncheckedCreateWithoutHouse_adminInput>
  }

  export type UserCreateWithoutHouseInput = {
    name: string
    email: string
    password_hash: string
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    profile: ProfileCreateNestedOneWithoutUsersInput
    house_admin?: HouseCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutCreateNestedManyWithoutUserInput
    accounts_paid?: AccountCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHouseInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    house_admin?: HouseUncheckedCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskUncheckedCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewUncheckedCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutUserInput
    accounts_paid?: AccountUncheckedCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHouseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHouseInput, UserUncheckedCreateWithoutHouseInput>
  }

  export type UserCreateManyHouseInputEnvelope = {
    data: UserCreateManyHouseInput | UserCreateManyHouseInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutHouseInput = {
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
    responsible?: UserCreateNestedOneWithoutTasks_responsibleInput
    reviews?: TaskReviewCreateNestedManyWithoutTaskInput
    buyouts?: BuyoutCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutHouseInput = {
    id?: number
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    responsible_id?: number | null
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
    reviews?: TaskReviewUncheckedCreateNestedManyWithoutTaskInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutHouseInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutHouseInput, TaskUncheckedCreateWithoutHouseInput>
  }

  export type TaskCreateManyHouseInputEnvelope = {
    data: TaskCreateManyHouseInput | TaskCreateManyHouseInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutHouseInput = {
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
    paid_by: UserCreateNestedOneWithoutAccounts_paidInput
    payment_shares?: PaymentShareCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutHouseInput = {
    id?: number
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
    paid_by_id: number
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutHouseInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutHouseInput, AccountUncheckedCreateWithoutHouseInput>
  }

  export type AccountCreateManyHouseInputEnvelope = {
    data: AccountCreateManyHouseInput | AccountCreateManyHouseInput[]
    skipDuplicates?: boolean
  }

  export type PunishmentCreateWithoutHouseInput = {
    description: string
    penalty_points: number
    is_active?: boolean
    created_at?: Date | string
  }

  export type PunishmentUncheckedCreateWithoutHouseInput = {
    id?: number
    description: string
    penalty_points: number
    is_active?: boolean
    created_at?: Date | string
  }

  export type PunishmentCreateOrConnectWithoutHouseInput = {
    where: PunishmentWhereUniqueInput
    create: XOR<PunishmentCreateWithoutHouseInput, PunishmentUncheckedCreateWithoutHouseInput>
  }

  export type PunishmentCreateManyHouseInputEnvelope = {
    data: PunishmentCreateManyHouseInput | PunishmentCreateManyHouseInput[]
    skipDuplicates?: boolean
  }

  export type HistoryCreateWithoutHouseInput = {
    event_type: $Enums.HistoryEventType
    description: string
    created_at?: Date | string
    user?: UserCreateNestedOneWithoutHistoryInput
  }

  export type HistoryUncheckedCreateWithoutHouseInput = {
    id?: number
    user_id?: number | null
    event_type: $Enums.HistoryEventType
    description: string
    created_at?: Date | string
  }

  export type HistoryCreateOrConnectWithoutHouseInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutHouseInput, HistoryUncheckedCreateWithoutHouseInput>
  }

  export type HistoryCreateManyHouseInputEnvelope = {
    data: HistoryCreateManyHouseInput | HistoryCreateManyHouseInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutHouse_adminInput = {
    update: XOR<UserUpdateWithoutHouse_adminInput, UserUncheckedUpdateWithoutHouse_adminInput>
    create: XOR<UserCreateWithoutHouse_adminInput, UserUncheckedCreateWithoutHouse_adminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHouse_adminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHouse_adminInput, UserUncheckedUpdateWithoutHouse_adminInput>
  }

  export type UserUpdateWithoutHouse_adminInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    house?: HouseUpdateOneWithoutMembersNestedInput
    tasks_responsible?: TaskUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHouse_adminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks_responsible?: TaskUncheckedUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUncheckedUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUncheckedUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutHouseInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutHouseInput, UserUncheckedUpdateWithoutHouseInput>
    create: XOR<UserCreateWithoutHouseInput, UserUncheckedCreateWithoutHouseInput>
  }

  export type UserUpdateWithWhereUniqueWithoutHouseInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutHouseInput, UserUncheckedUpdateWithoutHouseInput>
  }

  export type UserUpdateManyWithWhereWithoutHouseInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutHouseInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutHouseInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutHouseInput, TaskUncheckedUpdateWithoutHouseInput>
    create: XOR<TaskCreateWithoutHouseInput, TaskUncheckedCreateWithoutHouseInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutHouseInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutHouseInput, TaskUncheckedUpdateWithoutHouseInput>
  }

  export type TaskUpdateManyWithWhereWithoutHouseInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutHouseInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: IntFilter<"Task"> | number
    house_id?: IntFilter<"Task"> | number
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    frequency?: EnumTaskFrequencyFilter<"Task"> | $Enums.TaskFrequency
    points?: IntFilter<"Task"> | number
    responsible_id?: IntNullableFilter<"Task"> | number | null
    due_date?: DateTimeFilter<"Task"> | Date | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    can_buy_out?: BoolFilter<"Task"> | boolean
    star_average?: DecimalNullableFilter<"Task"> | Decimal | DecimalJsLike | number | string | null
  }

  export type AccountUpsertWithWhereUniqueWithoutHouseInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutHouseInput, AccountUncheckedUpdateWithoutHouseInput>
    create: XOR<AccountCreateWithoutHouseInput, AccountUncheckedCreateWithoutHouseInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutHouseInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutHouseInput, AccountUncheckedUpdateWithoutHouseInput>
  }

  export type AccountUpdateManyWithWhereWithoutHouseInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutHouseInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: IntFilter<"Account"> | number
    house_id?: IntFilter<"Account"> | number
    name?: StringFilter<"Account"> | string
    type?: EnumAccountTypeFilter<"Account"> | $Enums.AccountType
    amount?: DecimalFilter<"Account"> | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFilter<"Account"> | Date | string
    paid_by_id?: IntFilter<"Account"> | number
  }

  export type PunishmentUpsertWithWhereUniqueWithoutHouseInput = {
    where: PunishmentWhereUniqueInput
    update: XOR<PunishmentUpdateWithoutHouseInput, PunishmentUncheckedUpdateWithoutHouseInput>
    create: XOR<PunishmentCreateWithoutHouseInput, PunishmentUncheckedCreateWithoutHouseInput>
  }

  export type PunishmentUpdateWithWhereUniqueWithoutHouseInput = {
    where: PunishmentWhereUniqueInput
    data: XOR<PunishmentUpdateWithoutHouseInput, PunishmentUncheckedUpdateWithoutHouseInput>
  }

  export type PunishmentUpdateManyWithWhereWithoutHouseInput = {
    where: PunishmentScalarWhereInput
    data: XOR<PunishmentUpdateManyMutationInput, PunishmentUncheckedUpdateManyWithoutHouseInput>
  }

  export type PunishmentScalarWhereInput = {
    AND?: PunishmentScalarWhereInput | PunishmentScalarWhereInput[]
    OR?: PunishmentScalarWhereInput[]
    NOT?: PunishmentScalarWhereInput | PunishmentScalarWhereInput[]
    id?: IntFilter<"Punishment"> | number
    house_id?: IntFilter<"Punishment"> | number
    description?: StringFilter<"Punishment"> | string
    penalty_points?: IntFilter<"Punishment"> | number
    is_active?: BoolFilter<"Punishment"> | boolean
    created_at?: DateTimeFilter<"Punishment"> | Date | string
  }

  export type HistoryUpsertWithWhereUniqueWithoutHouseInput = {
    where: HistoryWhereUniqueInput
    update: XOR<HistoryUpdateWithoutHouseInput, HistoryUncheckedUpdateWithoutHouseInput>
    create: XOR<HistoryCreateWithoutHouseInput, HistoryUncheckedCreateWithoutHouseInput>
  }

  export type HistoryUpdateWithWhereUniqueWithoutHouseInput = {
    where: HistoryWhereUniqueInput
    data: XOR<HistoryUpdateWithoutHouseInput, HistoryUncheckedUpdateWithoutHouseInput>
  }

  export type HistoryUpdateManyWithWhereWithoutHouseInput = {
    where: HistoryScalarWhereInput
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyWithoutHouseInput>
  }

  export type HistoryScalarWhereInput = {
    AND?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
    OR?: HistoryScalarWhereInput[]
    NOT?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
    id?: IntFilter<"History"> | number
    house_id?: IntFilter<"History"> | number
    user_id?: IntNullableFilter<"History"> | number | null
    event_type?: EnumHistoryEventTypeFilter<"History"> | $Enums.HistoryEventType
    description?: StringFilter<"History"> | string
    created_at?: DateTimeFilter<"History"> | Date | string
  }

  export type ProfileCreateWithoutUsersInput = {
    name: string
  }

  export type ProfileUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type ProfileCreateOrConnectWithoutUsersInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUsersInput, ProfileUncheckedCreateWithoutUsersInput>
  }

  export type HouseCreateWithoutMembersInput = {
    name: string
    code: string
    admin: UserCreateNestedOneWithoutHouse_adminInput
    tasks?: TaskCreateNestedManyWithoutHouseInput
    accounts?: AccountCreateNestedManyWithoutHouseInput
    punishments?: PunishmentCreateNestedManyWithoutHouseInput
    history?: HistoryCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    code: string
    admin_id: number
    tasks?: TaskUncheckedCreateNestedManyWithoutHouseInput
    accounts?: AccountUncheckedCreateNestedManyWithoutHouseInput
    punishments?: PunishmentUncheckedCreateNestedManyWithoutHouseInput
    history?: HistoryUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseCreateOrConnectWithoutMembersInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutMembersInput, HouseUncheckedCreateWithoutMembersInput>
  }

  export type HouseCreateWithoutAdminInput = {
    name: string
    code: string
    members?: UserCreateNestedManyWithoutHouseInput
    tasks?: TaskCreateNestedManyWithoutHouseInput
    accounts?: AccountCreateNestedManyWithoutHouseInput
    punishments?: PunishmentCreateNestedManyWithoutHouseInput
    history?: HistoryCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateWithoutAdminInput = {
    id?: number
    name: string
    code: string
    members?: UserUncheckedCreateNestedManyWithoutHouseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutHouseInput
    accounts?: AccountUncheckedCreateNestedManyWithoutHouseInput
    punishments?: PunishmentUncheckedCreateNestedManyWithoutHouseInput
    history?: HistoryUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseCreateOrConnectWithoutAdminInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutAdminInput, HouseUncheckedCreateWithoutAdminInput>
  }

  export type HouseCreateManyAdminInputEnvelope = {
    data: HouseCreateManyAdminInput | HouseCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutResponsibleInput = {
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
    house: HouseCreateNestedOneWithoutTasksInput
    reviews?: TaskReviewCreateNestedManyWithoutTaskInput
    buyouts?: BuyoutCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutResponsibleInput = {
    id?: number
    house_id: number
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
    reviews?: TaskReviewUncheckedCreateNestedManyWithoutTaskInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutResponsibleInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutResponsibleInput, TaskUncheckedCreateWithoutResponsibleInput>
  }

  export type TaskCreateManyResponsibleInputEnvelope = {
    data: TaskCreateManyResponsibleInput | TaskCreateManyResponsibleInput[]
    skipDuplicates?: boolean
  }

  export type TaskReviewCreateWithoutReviewerInput = {
    stars: number
    task: TaskCreateNestedOneWithoutReviewsInput
  }

  export type TaskReviewUncheckedCreateWithoutReviewerInput = {
    task_id: number
    stars: number
  }

  export type TaskReviewCreateOrConnectWithoutReviewerInput = {
    where: TaskReviewWhereUniqueInput
    create: XOR<TaskReviewCreateWithoutReviewerInput, TaskReviewUncheckedCreateWithoutReviewerInput>
  }

  export type TaskReviewCreateManyReviewerInputEnvelope = {
    data: TaskReviewCreateManyReviewerInput | TaskReviewCreateManyReviewerInput[]
    skipDuplicates?: boolean
  }

  export type BuyoutCreateWithoutUserInput = {
    cycle_start_date: Date | string
    task: TaskCreateNestedOneWithoutBuyoutsInput
  }

  export type BuyoutUncheckedCreateWithoutUserInput = {
    task_id: number
    cycle_start_date: Date | string
  }

  export type BuyoutCreateOrConnectWithoutUserInput = {
    where: BuyoutWhereUniqueInput
    create: XOR<BuyoutCreateWithoutUserInput, BuyoutUncheckedCreateWithoutUserInput>
  }

  export type BuyoutCreateManyUserInputEnvelope = {
    data: BuyoutCreateManyUserInput | BuyoutCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutPaid_byInput = {
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
    house: HouseCreateNestedOneWithoutAccountsInput
    payment_shares?: PaymentShareCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutPaid_byInput = {
    id?: number
    house_id: number
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutPaid_byInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutPaid_byInput, AccountUncheckedCreateWithoutPaid_byInput>
  }

  export type AccountCreateManyPaid_byInputEnvelope = {
    data: AccountCreateManyPaid_byInput | AccountCreateManyPaid_byInput[]
    skipDuplicates?: boolean
  }

  export type PaymentShareCreateWithoutUserInput = {
    share_amount: Decimal | DecimalJsLike | number | string
    is_paid?: boolean
    account: AccountCreateNestedOneWithoutPayment_sharesInput
  }

  export type PaymentShareUncheckedCreateWithoutUserInput = {
    account_id: number
    share_amount: Decimal | DecimalJsLike | number | string
    is_paid?: boolean
  }

  export type PaymentShareCreateOrConnectWithoutUserInput = {
    where: PaymentShareWhereUniqueInput
    create: XOR<PaymentShareCreateWithoutUserInput, PaymentShareUncheckedCreateWithoutUserInput>
  }

  export type PaymentShareCreateManyUserInputEnvelope = {
    data: PaymentShareCreateManyUserInput | PaymentShareCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HistoryCreateWithoutUserInput = {
    event_type: $Enums.HistoryEventType
    description: string
    created_at?: Date | string
    house: HouseCreateNestedOneWithoutHistoryInput
  }

  export type HistoryUncheckedCreateWithoutUserInput = {
    id?: number
    house_id: number
    event_type: $Enums.HistoryEventType
    description: string
    created_at?: Date | string
  }

  export type HistoryCreateOrConnectWithoutUserInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput>
  }

  export type HistoryCreateManyUserInputEnvelope = {
    data: HistoryCreateManyUserInput | HistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutUsersInput = {
    update: XOR<ProfileUpdateWithoutUsersInput, ProfileUncheckedUpdateWithoutUsersInput>
    create: XOR<ProfileCreateWithoutUsersInput, ProfileUncheckedCreateWithoutUsersInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUsersInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUsersInput, ProfileUncheckedUpdateWithoutUsersInput>
  }

  export type ProfileUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type HouseUpsertWithoutMembersInput = {
    update: XOR<HouseUpdateWithoutMembersInput, HouseUncheckedUpdateWithoutMembersInput>
    create: XOR<HouseCreateWithoutMembersInput, HouseUncheckedCreateWithoutMembersInput>
    where?: HouseWhereInput
  }

  export type HouseUpdateToOneWithWhereWithoutMembersInput = {
    where?: HouseWhereInput
    data: XOR<HouseUpdateWithoutMembersInput, HouseUncheckedUpdateWithoutMembersInput>
  }

  export type HouseUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin?: UserUpdateOneRequiredWithoutHouse_adminNestedInput
    tasks?: TaskUpdateManyWithoutHouseNestedInput
    accounts?: AccountUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUpdateManyWithoutHouseNestedInput
    history?: HistoryUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin_id?: IntFieldUpdateOperationsInput | number
    tasks?: TaskUncheckedUpdateManyWithoutHouseNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUncheckedUpdateManyWithoutHouseNestedInput
    history?: HistoryUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type HouseUpsertWithWhereUniqueWithoutAdminInput = {
    where: HouseWhereUniqueInput
    update: XOR<HouseUpdateWithoutAdminInput, HouseUncheckedUpdateWithoutAdminInput>
    create: XOR<HouseCreateWithoutAdminInput, HouseUncheckedCreateWithoutAdminInput>
  }

  export type HouseUpdateWithWhereUniqueWithoutAdminInput = {
    where: HouseWhereUniqueInput
    data: XOR<HouseUpdateWithoutAdminInput, HouseUncheckedUpdateWithoutAdminInput>
  }

  export type HouseUpdateManyWithWhereWithoutAdminInput = {
    where: HouseScalarWhereInput
    data: XOR<HouseUpdateManyMutationInput, HouseUncheckedUpdateManyWithoutAdminInput>
  }

  export type HouseScalarWhereInput = {
    AND?: HouseScalarWhereInput | HouseScalarWhereInput[]
    OR?: HouseScalarWhereInput[]
    NOT?: HouseScalarWhereInput | HouseScalarWhereInput[]
    id?: IntFilter<"House"> | number
    name?: StringFilter<"House"> | string
    code?: StringFilter<"House"> | string
    admin_id?: IntFilter<"House"> | number
  }

  export type TaskUpsertWithWhereUniqueWithoutResponsibleInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutResponsibleInput, TaskUncheckedUpdateWithoutResponsibleInput>
    create: XOR<TaskCreateWithoutResponsibleInput, TaskUncheckedCreateWithoutResponsibleInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutResponsibleInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutResponsibleInput, TaskUncheckedUpdateWithoutResponsibleInput>
  }

  export type TaskUpdateManyWithWhereWithoutResponsibleInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutResponsibleInput>
  }

  export type TaskReviewUpsertWithWhereUniqueWithoutReviewerInput = {
    where: TaskReviewWhereUniqueInput
    update: XOR<TaskReviewUpdateWithoutReviewerInput, TaskReviewUncheckedUpdateWithoutReviewerInput>
    create: XOR<TaskReviewCreateWithoutReviewerInput, TaskReviewUncheckedCreateWithoutReviewerInput>
  }

  export type TaskReviewUpdateWithWhereUniqueWithoutReviewerInput = {
    where: TaskReviewWhereUniqueInput
    data: XOR<TaskReviewUpdateWithoutReviewerInput, TaskReviewUncheckedUpdateWithoutReviewerInput>
  }

  export type TaskReviewUpdateManyWithWhereWithoutReviewerInput = {
    where: TaskReviewScalarWhereInput
    data: XOR<TaskReviewUpdateManyMutationInput, TaskReviewUncheckedUpdateManyWithoutReviewerInput>
  }

  export type TaskReviewScalarWhereInput = {
    AND?: TaskReviewScalarWhereInput | TaskReviewScalarWhereInput[]
    OR?: TaskReviewScalarWhereInput[]
    NOT?: TaskReviewScalarWhereInput | TaskReviewScalarWhereInput[]
    task_id?: IntFilter<"TaskReview"> | number
    reviewer_id?: IntFilter<"TaskReview"> | number
    stars?: IntFilter<"TaskReview"> | number
  }

  export type BuyoutUpsertWithWhereUniqueWithoutUserInput = {
    where: BuyoutWhereUniqueInput
    update: XOR<BuyoutUpdateWithoutUserInput, BuyoutUncheckedUpdateWithoutUserInput>
    create: XOR<BuyoutCreateWithoutUserInput, BuyoutUncheckedCreateWithoutUserInput>
  }

  export type BuyoutUpdateWithWhereUniqueWithoutUserInput = {
    where: BuyoutWhereUniqueInput
    data: XOR<BuyoutUpdateWithoutUserInput, BuyoutUncheckedUpdateWithoutUserInput>
  }

  export type BuyoutUpdateManyWithWhereWithoutUserInput = {
    where: BuyoutScalarWhereInput
    data: XOR<BuyoutUpdateManyMutationInput, BuyoutUncheckedUpdateManyWithoutUserInput>
  }

  export type BuyoutScalarWhereInput = {
    AND?: BuyoutScalarWhereInput | BuyoutScalarWhereInput[]
    OR?: BuyoutScalarWhereInput[]
    NOT?: BuyoutScalarWhereInput | BuyoutScalarWhereInput[]
    user_id?: IntFilter<"Buyout"> | number
    task_id?: IntFilter<"Buyout"> | number
    cycle_start_date?: DateTimeFilter<"Buyout"> | Date | string
  }

  export type AccountUpsertWithWhereUniqueWithoutPaid_byInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutPaid_byInput, AccountUncheckedUpdateWithoutPaid_byInput>
    create: XOR<AccountCreateWithoutPaid_byInput, AccountUncheckedCreateWithoutPaid_byInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutPaid_byInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutPaid_byInput, AccountUncheckedUpdateWithoutPaid_byInput>
  }

  export type AccountUpdateManyWithWhereWithoutPaid_byInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutPaid_byInput>
  }

  export type PaymentShareUpsertWithWhereUniqueWithoutUserInput = {
    where: PaymentShareWhereUniqueInput
    update: XOR<PaymentShareUpdateWithoutUserInput, PaymentShareUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentShareCreateWithoutUserInput, PaymentShareUncheckedCreateWithoutUserInput>
  }

  export type PaymentShareUpdateWithWhereUniqueWithoutUserInput = {
    where: PaymentShareWhereUniqueInput
    data: XOR<PaymentShareUpdateWithoutUserInput, PaymentShareUncheckedUpdateWithoutUserInput>
  }

  export type PaymentShareUpdateManyWithWhereWithoutUserInput = {
    where: PaymentShareScalarWhereInput
    data: XOR<PaymentShareUpdateManyMutationInput, PaymentShareUncheckedUpdateManyWithoutUserInput>
  }

  export type PaymentShareScalarWhereInput = {
    AND?: PaymentShareScalarWhereInput | PaymentShareScalarWhereInput[]
    OR?: PaymentShareScalarWhereInput[]
    NOT?: PaymentShareScalarWhereInput | PaymentShareScalarWhereInput[]
    account_id?: IntFilter<"PaymentShare"> | number
    user_id?: IntFilter<"PaymentShare"> | number
    share_amount?: DecimalFilter<"PaymentShare"> | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFilter<"PaymentShare"> | boolean
  }

  export type HistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: HistoryWhereUniqueInput
    update: XOR<HistoryUpdateWithoutUserInput, HistoryUncheckedUpdateWithoutUserInput>
    create: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput>
  }

  export type HistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: HistoryWhereUniqueInput
    data: XOR<HistoryUpdateWithoutUserInput, HistoryUncheckedUpdateWithoutUserInput>
  }

  export type HistoryUpdateManyWithWhereWithoutUserInput = {
    where: HistoryScalarWhereInput
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type HouseCreateWithoutTasksInput = {
    name: string
    code: string
    admin: UserCreateNestedOneWithoutHouse_adminInput
    members?: UserCreateNestedManyWithoutHouseInput
    accounts?: AccountCreateNestedManyWithoutHouseInput
    punishments?: PunishmentCreateNestedManyWithoutHouseInput
    history?: HistoryCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateWithoutTasksInput = {
    id?: number
    name: string
    code: string
    admin_id: number
    members?: UserUncheckedCreateNestedManyWithoutHouseInput
    accounts?: AccountUncheckedCreateNestedManyWithoutHouseInput
    punishments?: PunishmentUncheckedCreateNestedManyWithoutHouseInput
    history?: HistoryUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseCreateOrConnectWithoutTasksInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutTasksInput, HouseUncheckedCreateWithoutTasksInput>
  }

  export type UserCreateWithoutTasks_responsibleInput = {
    name: string
    email: string
    password_hash: string
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    profile: ProfileCreateNestedOneWithoutUsersInput
    house?: HouseCreateNestedOneWithoutMembersInput
    house_admin?: HouseCreateNestedManyWithoutAdminInput
    task_reviews?: TaskReviewCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutCreateNestedManyWithoutUserInput
    accounts_paid?: AccountCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTasks_responsibleInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    house_admin?: HouseUncheckedCreateNestedManyWithoutAdminInput
    task_reviews?: TaskReviewUncheckedCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutUserInput
    accounts_paid?: AccountUncheckedCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTasks_responsibleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTasks_responsibleInput, UserUncheckedCreateWithoutTasks_responsibleInput>
  }

  export type TaskReviewCreateWithoutTaskInput = {
    stars: number
    reviewer: UserCreateNestedOneWithoutTask_reviewsInput
  }

  export type TaskReviewUncheckedCreateWithoutTaskInput = {
    reviewer_id: number
    stars: number
  }

  export type TaskReviewCreateOrConnectWithoutTaskInput = {
    where: TaskReviewWhereUniqueInput
    create: XOR<TaskReviewCreateWithoutTaskInput, TaskReviewUncheckedCreateWithoutTaskInput>
  }

  export type TaskReviewCreateManyTaskInputEnvelope = {
    data: TaskReviewCreateManyTaskInput | TaskReviewCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type BuyoutCreateWithoutTaskInput = {
    cycle_start_date: Date | string
    user: UserCreateNestedOneWithoutBuyoutsInput
  }

  export type BuyoutUncheckedCreateWithoutTaskInput = {
    user_id: number
    cycle_start_date: Date | string
  }

  export type BuyoutCreateOrConnectWithoutTaskInput = {
    where: BuyoutWhereUniqueInput
    create: XOR<BuyoutCreateWithoutTaskInput, BuyoutUncheckedCreateWithoutTaskInput>
  }

  export type BuyoutCreateManyTaskInputEnvelope = {
    data: BuyoutCreateManyTaskInput | BuyoutCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type HouseUpsertWithoutTasksInput = {
    update: XOR<HouseUpdateWithoutTasksInput, HouseUncheckedUpdateWithoutTasksInput>
    create: XOR<HouseCreateWithoutTasksInput, HouseUncheckedCreateWithoutTasksInput>
    where?: HouseWhereInput
  }

  export type HouseUpdateToOneWithWhereWithoutTasksInput = {
    where?: HouseWhereInput
    data: XOR<HouseUpdateWithoutTasksInput, HouseUncheckedUpdateWithoutTasksInput>
  }

  export type HouseUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin?: UserUpdateOneRequiredWithoutHouse_adminNestedInput
    members?: UserUpdateManyWithoutHouseNestedInput
    accounts?: AccountUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUpdateManyWithoutHouseNestedInput
    history?: HistoryUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin_id?: IntFieldUpdateOperationsInput | number
    members?: UserUncheckedUpdateManyWithoutHouseNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUncheckedUpdateManyWithoutHouseNestedInput
    history?: HistoryUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type UserUpsertWithoutTasks_responsibleInput = {
    update: XOR<UserUpdateWithoutTasks_responsibleInput, UserUncheckedUpdateWithoutTasks_responsibleInput>
    create: XOR<UserCreateWithoutTasks_responsibleInput, UserUncheckedCreateWithoutTasks_responsibleInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTasks_responsibleInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTasks_responsibleInput, UserUncheckedUpdateWithoutTasks_responsibleInput>
  }

  export type UserUpdateWithoutTasks_responsibleInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    house?: HouseUpdateOneWithoutMembersNestedInput
    house_admin?: HouseUpdateManyWithoutAdminNestedInput
    task_reviews?: TaskReviewUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTasks_responsibleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house_admin?: HouseUncheckedUpdateManyWithoutAdminNestedInput
    task_reviews?: TaskReviewUncheckedUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUncheckedUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TaskReviewUpsertWithWhereUniqueWithoutTaskInput = {
    where: TaskReviewWhereUniqueInput
    update: XOR<TaskReviewUpdateWithoutTaskInput, TaskReviewUncheckedUpdateWithoutTaskInput>
    create: XOR<TaskReviewCreateWithoutTaskInput, TaskReviewUncheckedCreateWithoutTaskInput>
  }

  export type TaskReviewUpdateWithWhereUniqueWithoutTaskInput = {
    where: TaskReviewWhereUniqueInput
    data: XOR<TaskReviewUpdateWithoutTaskInput, TaskReviewUncheckedUpdateWithoutTaskInput>
  }

  export type TaskReviewUpdateManyWithWhereWithoutTaskInput = {
    where: TaskReviewScalarWhereInput
    data: XOR<TaskReviewUpdateManyMutationInput, TaskReviewUncheckedUpdateManyWithoutTaskInput>
  }

  export type BuyoutUpsertWithWhereUniqueWithoutTaskInput = {
    where: BuyoutWhereUniqueInput
    update: XOR<BuyoutUpdateWithoutTaskInput, BuyoutUncheckedUpdateWithoutTaskInput>
    create: XOR<BuyoutCreateWithoutTaskInput, BuyoutUncheckedCreateWithoutTaskInput>
  }

  export type BuyoutUpdateWithWhereUniqueWithoutTaskInput = {
    where: BuyoutWhereUniqueInput
    data: XOR<BuyoutUpdateWithoutTaskInput, BuyoutUncheckedUpdateWithoutTaskInput>
  }

  export type BuyoutUpdateManyWithWhereWithoutTaskInput = {
    where: BuyoutScalarWhereInput
    data: XOR<BuyoutUpdateManyMutationInput, BuyoutUncheckedUpdateManyWithoutTaskInput>
  }

  export type TaskCreateWithoutReviewsInput = {
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
    house: HouseCreateNestedOneWithoutTasksInput
    responsible?: UserCreateNestedOneWithoutTasks_responsibleInput
    buyouts?: BuyoutCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutReviewsInput = {
    id?: number
    house_id: number
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    responsible_id?: number | null
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutReviewsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutReviewsInput, TaskUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutTask_reviewsInput = {
    name: string
    email: string
    password_hash: string
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    profile: ProfileCreateNestedOneWithoutUsersInput
    house?: HouseCreateNestedOneWithoutMembersInput
    house_admin?: HouseCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskCreateNestedManyWithoutResponsibleInput
    buyouts?: BuyoutCreateNestedManyWithoutUserInput
    accounts_paid?: AccountCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTask_reviewsInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    house_admin?: HouseUncheckedCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskUncheckedCreateNestedManyWithoutResponsibleInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutUserInput
    accounts_paid?: AccountUncheckedCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTask_reviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTask_reviewsInput, UserUncheckedCreateWithoutTask_reviewsInput>
  }

  export type TaskUpsertWithoutReviewsInput = {
    update: XOR<TaskUpdateWithoutReviewsInput, TaskUncheckedUpdateWithoutReviewsInput>
    create: XOR<TaskCreateWithoutReviewsInput, TaskUncheckedCreateWithoutReviewsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutReviewsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutReviewsInput, TaskUncheckedUpdateWithoutReviewsInput>
  }

  export type TaskUpdateWithoutReviewsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    house?: HouseUpdateOneRequiredWithoutTasksNestedInput
    responsible?: UserUpdateOneWithoutTasks_responsibleNestedInput
    buyouts?: BuyoutUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    buyouts?: BuyoutUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type UserUpsertWithoutTask_reviewsInput = {
    update: XOR<UserUpdateWithoutTask_reviewsInput, UserUncheckedUpdateWithoutTask_reviewsInput>
    create: XOR<UserCreateWithoutTask_reviewsInput, UserUncheckedCreateWithoutTask_reviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTask_reviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTask_reviewsInput, UserUncheckedUpdateWithoutTask_reviewsInput>
  }

  export type UserUpdateWithoutTask_reviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    house?: HouseUpdateOneWithoutMembersNestedInput
    house_admin?: HouseUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUpdateManyWithoutResponsibleNestedInput
    buyouts?: BuyoutUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTask_reviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house_admin?: HouseUncheckedUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUncheckedUpdateManyWithoutResponsibleNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUncheckedUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBuyoutsInput = {
    name: string
    email: string
    password_hash: string
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    profile: ProfileCreateNestedOneWithoutUsersInput
    house?: HouseCreateNestedOneWithoutMembersInput
    house_admin?: HouseCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewCreateNestedManyWithoutReviewerInput
    accounts_paid?: AccountCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBuyoutsInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    house_admin?: HouseUncheckedCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskUncheckedCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewUncheckedCreateNestedManyWithoutReviewerInput
    accounts_paid?: AccountUncheckedCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBuyoutsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBuyoutsInput, UserUncheckedCreateWithoutBuyoutsInput>
  }

  export type TaskCreateWithoutBuyoutsInput = {
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
    house: HouseCreateNestedOneWithoutTasksInput
    responsible?: UserCreateNestedOneWithoutTasks_responsibleInput
    reviews?: TaskReviewCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutBuyoutsInput = {
    id?: number
    house_id: number
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    responsible_id?: number | null
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
    reviews?: TaskReviewUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutBuyoutsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutBuyoutsInput, TaskUncheckedCreateWithoutBuyoutsInput>
  }

  export type UserUpsertWithoutBuyoutsInput = {
    update: XOR<UserUpdateWithoutBuyoutsInput, UserUncheckedUpdateWithoutBuyoutsInput>
    create: XOR<UserCreateWithoutBuyoutsInput, UserUncheckedCreateWithoutBuyoutsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBuyoutsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBuyoutsInput, UserUncheckedUpdateWithoutBuyoutsInput>
  }

  export type UserUpdateWithoutBuyoutsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    house?: HouseUpdateOneWithoutMembersNestedInput
    house_admin?: HouseUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUpdateManyWithoutReviewerNestedInput
    accounts_paid?: AccountUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBuyoutsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house_admin?: HouseUncheckedUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUncheckedUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUncheckedUpdateManyWithoutReviewerNestedInput
    accounts_paid?: AccountUncheckedUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TaskUpsertWithoutBuyoutsInput = {
    update: XOR<TaskUpdateWithoutBuyoutsInput, TaskUncheckedUpdateWithoutBuyoutsInput>
    create: XOR<TaskCreateWithoutBuyoutsInput, TaskUncheckedCreateWithoutBuyoutsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutBuyoutsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutBuyoutsInput, TaskUncheckedUpdateWithoutBuyoutsInput>
  }

  export type TaskUpdateWithoutBuyoutsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    house?: HouseUpdateOneRequiredWithoutTasksNestedInput
    responsible?: UserUpdateOneWithoutTasks_responsibleNestedInput
    reviews?: TaskReviewUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutBuyoutsInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reviews?: TaskReviewUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type HouseCreateWithoutPunishmentsInput = {
    name: string
    code: string
    admin: UserCreateNestedOneWithoutHouse_adminInput
    members?: UserCreateNestedManyWithoutHouseInput
    tasks?: TaskCreateNestedManyWithoutHouseInput
    accounts?: AccountCreateNestedManyWithoutHouseInput
    history?: HistoryCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateWithoutPunishmentsInput = {
    id?: number
    name: string
    code: string
    admin_id: number
    members?: UserUncheckedCreateNestedManyWithoutHouseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutHouseInput
    accounts?: AccountUncheckedCreateNestedManyWithoutHouseInput
    history?: HistoryUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseCreateOrConnectWithoutPunishmentsInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutPunishmentsInput, HouseUncheckedCreateWithoutPunishmentsInput>
  }

  export type HouseUpsertWithoutPunishmentsInput = {
    update: XOR<HouseUpdateWithoutPunishmentsInput, HouseUncheckedUpdateWithoutPunishmentsInput>
    create: XOR<HouseCreateWithoutPunishmentsInput, HouseUncheckedCreateWithoutPunishmentsInput>
    where?: HouseWhereInput
  }

  export type HouseUpdateToOneWithWhereWithoutPunishmentsInput = {
    where?: HouseWhereInput
    data: XOR<HouseUpdateWithoutPunishmentsInput, HouseUncheckedUpdateWithoutPunishmentsInput>
  }

  export type HouseUpdateWithoutPunishmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin?: UserUpdateOneRequiredWithoutHouse_adminNestedInput
    members?: UserUpdateManyWithoutHouseNestedInput
    tasks?: TaskUpdateManyWithoutHouseNestedInput
    accounts?: AccountUpdateManyWithoutHouseNestedInput
    history?: HistoryUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateWithoutPunishmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin_id?: IntFieldUpdateOperationsInput | number
    members?: UserUncheckedUpdateManyWithoutHouseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutHouseNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutHouseNestedInput
    history?: HistoryUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type HouseCreateWithoutHistoryInput = {
    name: string
    code: string
    admin: UserCreateNestedOneWithoutHouse_adminInput
    members?: UserCreateNestedManyWithoutHouseInput
    tasks?: TaskCreateNestedManyWithoutHouseInput
    accounts?: AccountCreateNestedManyWithoutHouseInput
    punishments?: PunishmentCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateWithoutHistoryInput = {
    id?: number
    name: string
    code: string
    admin_id: number
    members?: UserUncheckedCreateNestedManyWithoutHouseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutHouseInput
    accounts?: AccountUncheckedCreateNestedManyWithoutHouseInput
    punishments?: PunishmentUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseCreateOrConnectWithoutHistoryInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutHistoryInput, HouseUncheckedCreateWithoutHistoryInput>
  }

  export type UserCreateWithoutHistoryInput = {
    name: string
    email: string
    password_hash: string
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    profile: ProfileCreateNestedOneWithoutUsersInput
    house?: HouseCreateNestedOneWithoutMembersInput
    house_admin?: HouseCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutCreateNestedManyWithoutUserInput
    accounts_paid?: AccountCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHistoryInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    house_admin?: HouseUncheckedCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskUncheckedCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewUncheckedCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutUserInput
    accounts_paid?: AccountUncheckedCreateNestedManyWithoutPaid_byInput
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
  }

  export type HouseUpsertWithoutHistoryInput = {
    update: XOR<HouseUpdateWithoutHistoryInput, HouseUncheckedUpdateWithoutHistoryInput>
    create: XOR<HouseCreateWithoutHistoryInput, HouseUncheckedCreateWithoutHistoryInput>
    where?: HouseWhereInput
  }

  export type HouseUpdateToOneWithWhereWithoutHistoryInput = {
    where?: HouseWhereInput
    data: XOR<HouseUpdateWithoutHistoryInput, HouseUncheckedUpdateWithoutHistoryInput>
  }

  export type HouseUpdateWithoutHistoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin?: UserUpdateOneRequiredWithoutHouse_adminNestedInput
    members?: UserUpdateManyWithoutHouseNestedInput
    tasks?: TaskUpdateManyWithoutHouseNestedInput
    accounts?: AccountUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin_id?: IntFieldUpdateOperationsInput | number
    members?: UserUncheckedUpdateManyWithoutHouseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutHouseNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type UserUpsertWithoutHistoryInput = {
    update: XOR<UserUpdateWithoutHistoryInput, UserUncheckedUpdateWithoutHistoryInput>
    create: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHistoryInput, UserUncheckedUpdateWithoutHistoryInput>
  }

  export type UserUpdateWithoutHistoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    house?: HouseUpdateOneWithoutMembersNestedInput
    house_admin?: HouseUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house_admin?: HouseUncheckedUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUncheckedUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUncheckedUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUncheckedUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HouseCreateWithoutAccountsInput = {
    name: string
    code: string
    admin: UserCreateNestedOneWithoutHouse_adminInput
    members?: UserCreateNestedManyWithoutHouseInput
    tasks?: TaskCreateNestedManyWithoutHouseInput
    punishments?: PunishmentCreateNestedManyWithoutHouseInput
    history?: HistoryCreateNestedManyWithoutHouseInput
  }

  export type HouseUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
    code: string
    admin_id: number
    members?: UserUncheckedCreateNestedManyWithoutHouseInput
    tasks?: TaskUncheckedCreateNestedManyWithoutHouseInput
    punishments?: PunishmentUncheckedCreateNestedManyWithoutHouseInput
    history?: HistoryUncheckedCreateNestedManyWithoutHouseInput
  }

  export type HouseCreateOrConnectWithoutAccountsInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutAccountsInput, HouseUncheckedCreateWithoutAccountsInput>
  }

  export type UserCreateWithoutAccounts_paidInput = {
    name: string
    email: string
    password_hash: string
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    profile: ProfileCreateNestedOneWithoutUsersInput
    house?: HouseCreateNestedOneWithoutMembersInput
    house_admin?: HouseCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutCreateNestedManyWithoutUserInput
    payment_shares?: PaymentShareCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccounts_paidInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    house_admin?: HouseUncheckedCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskUncheckedCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewUncheckedCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutUserInput
    payment_shares?: PaymentShareUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccounts_paidInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccounts_paidInput, UserUncheckedCreateWithoutAccounts_paidInput>
  }

  export type PaymentShareCreateWithoutAccountInput = {
    share_amount: Decimal | DecimalJsLike | number | string
    is_paid?: boolean
    user: UserCreateNestedOneWithoutPayment_sharesInput
  }

  export type PaymentShareUncheckedCreateWithoutAccountInput = {
    user_id: number
    share_amount: Decimal | DecimalJsLike | number | string
    is_paid?: boolean
  }

  export type PaymentShareCreateOrConnectWithoutAccountInput = {
    where: PaymentShareWhereUniqueInput
    create: XOR<PaymentShareCreateWithoutAccountInput, PaymentShareUncheckedCreateWithoutAccountInput>
  }

  export type PaymentShareCreateManyAccountInputEnvelope = {
    data: PaymentShareCreateManyAccountInput | PaymentShareCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type HouseUpsertWithoutAccountsInput = {
    update: XOR<HouseUpdateWithoutAccountsInput, HouseUncheckedUpdateWithoutAccountsInput>
    create: XOR<HouseCreateWithoutAccountsInput, HouseUncheckedCreateWithoutAccountsInput>
    where?: HouseWhereInput
  }

  export type HouseUpdateToOneWithWhereWithoutAccountsInput = {
    where?: HouseWhereInput
    data: XOR<HouseUpdateWithoutAccountsInput, HouseUncheckedUpdateWithoutAccountsInput>
  }

  export type HouseUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin?: UserUpdateOneRequiredWithoutHouse_adminNestedInput
    members?: UserUpdateManyWithoutHouseNestedInput
    tasks?: TaskUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUpdateManyWithoutHouseNestedInput
    history?: HistoryUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    admin_id?: IntFieldUpdateOperationsInput | number
    members?: UserUncheckedUpdateManyWithoutHouseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUncheckedUpdateManyWithoutHouseNestedInput
    history?: HistoryUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type UserUpsertWithoutAccounts_paidInput = {
    update: XOR<UserUpdateWithoutAccounts_paidInput, UserUncheckedUpdateWithoutAccounts_paidInput>
    create: XOR<UserCreateWithoutAccounts_paidInput, UserUncheckedCreateWithoutAccounts_paidInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccounts_paidInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccounts_paidInput, UserUncheckedUpdateWithoutAccounts_paidInput>
  }

  export type UserUpdateWithoutAccounts_paidInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    house?: HouseUpdateOneWithoutMembersNestedInput
    house_admin?: HouseUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUpdateManyWithoutUserNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccounts_paidInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house_admin?: HouseUncheckedUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUncheckedUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUncheckedUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutUserNestedInput
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PaymentShareUpsertWithWhereUniqueWithoutAccountInput = {
    where: PaymentShareWhereUniqueInput
    update: XOR<PaymentShareUpdateWithoutAccountInput, PaymentShareUncheckedUpdateWithoutAccountInput>
    create: XOR<PaymentShareCreateWithoutAccountInput, PaymentShareUncheckedCreateWithoutAccountInput>
  }

  export type PaymentShareUpdateWithWhereUniqueWithoutAccountInput = {
    where: PaymentShareWhereUniqueInput
    data: XOR<PaymentShareUpdateWithoutAccountInput, PaymentShareUncheckedUpdateWithoutAccountInput>
  }

  export type PaymentShareUpdateManyWithWhereWithoutAccountInput = {
    where: PaymentShareScalarWhereInput
    data: XOR<PaymentShareUpdateManyMutationInput, PaymentShareUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountCreateWithoutPayment_sharesInput = {
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
    house: HouseCreateNestedOneWithoutAccountsInput
    paid_by: UserCreateNestedOneWithoutAccounts_paidInput
  }

  export type AccountUncheckedCreateWithoutPayment_sharesInput = {
    id?: number
    house_id: number
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
    paid_by_id: number
  }

  export type AccountCreateOrConnectWithoutPayment_sharesInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutPayment_sharesInput, AccountUncheckedCreateWithoutPayment_sharesInput>
  }

  export type UserCreateWithoutPayment_sharesInput = {
    name: string
    email: string
    password_hash: string
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    profile: ProfileCreateNestedOneWithoutUsersInput
    house?: HouseCreateNestedOneWithoutMembersInput
    house_admin?: HouseCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutCreateNestedManyWithoutUserInput
    accounts_paid?: AccountCreateNestedManyWithoutPaid_byInput
    history?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPayment_sharesInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
    house_admin?: HouseUncheckedCreateNestedManyWithoutAdminInput
    tasks_responsible?: TaskUncheckedCreateNestedManyWithoutResponsibleInput
    task_reviews?: TaskReviewUncheckedCreateNestedManyWithoutReviewerInput
    buyouts?: BuyoutUncheckedCreateNestedManyWithoutUserInput
    accounts_paid?: AccountUncheckedCreateNestedManyWithoutPaid_byInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPayment_sharesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPayment_sharesInput, UserUncheckedCreateWithoutPayment_sharesInput>
  }

  export type AccountUpsertWithoutPayment_sharesInput = {
    update: XOR<AccountUpdateWithoutPayment_sharesInput, AccountUncheckedUpdateWithoutPayment_sharesInput>
    create: XOR<AccountCreateWithoutPayment_sharesInput, AccountUncheckedCreateWithoutPayment_sharesInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutPayment_sharesInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutPayment_sharesInput, AccountUncheckedUpdateWithoutPayment_sharesInput>
  }

  export type AccountUpdateWithoutPayment_sharesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    house?: HouseUpdateOneRequiredWithoutAccountsNestedInput
    paid_by?: UserUpdateOneRequiredWithoutAccounts_paidNestedInput
  }

  export type AccountUncheckedUpdateWithoutPayment_sharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    paid_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutPayment_sharesInput = {
    update: XOR<UserUpdateWithoutPayment_sharesInput, UserUncheckedUpdateWithoutPayment_sharesInput>
    create: XOR<UserCreateWithoutPayment_sharesInput, UserUncheckedCreateWithoutPayment_sharesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPayment_sharesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPayment_sharesInput, UserUncheckedUpdateWithoutPayment_sharesInput>
  }

  export type UserUpdateWithoutPayment_sharesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    house?: HouseUpdateOneWithoutMembersNestedInput
    house_admin?: HouseUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUpdateManyWithoutPaid_byNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPayment_sharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house_admin?: HouseUncheckedUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUncheckedUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUncheckedUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUncheckedUpdateManyWithoutPaid_byNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyProfileInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    house_id?: number | null
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
  }

  export type UserUpdateWithoutProfileInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house?: HouseUpdateOneWithoutMembersNestedInput
    house_admin?: HouseUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house_admin?: HouseUncheckedUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUncheckedUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUncheckedUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUncheckedUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_id?: NullableIntFieldUpdateOperationsInput | number | null
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyHouseInput = {
    id?: number
    name: string
    email: string
    password_hash: string
    profile_id: number
    house_status?: $Enums.HouseStatus
    score?: number
    star_avg?: Decimal | DecimalJsLike | number | string | null
    avatar_color?: string | null
    created_at?: Date | string
  }

  export type TaskCreateManyHouseInput = {
    id?: number
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    responsible_id?: number | null
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
  }

  export type AccountCreateManyHouseInput = {
    id?: number
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
    paid_by_id: number
  }

  export type PunishmentCreateManyHouseInput = {
    id?: number
    description: string
    penalty_points: number
    is_active?: boolean
    created_at?: Date | string
  }

  export type HistoryCreateManyHouseInput = {
    id?: number
    user_id?: number | null
    event_type: $Enums.HistoryEventType
    description: string
    created_at?: Date | string
  }

  export type UserUpdateWithoutHouseInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    house_admin?: HouseUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house_admin?: HouseUncheckedUpdateManyWithoutAdminNestedInput
    tasks_responsible?: TaskUncheckedUpdateManyWithoutResponsibleNestedInput
    task_reviews?: TaskReviewUncheckedUpdateManyWithoutReviewerNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutUserNestedInput
    accounts_paid?: AccountUncheckedUpdateManyWithoutPaid_byNestedInput
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    house_status?: EnumHouseStatusFieldUpdateOperationsInput | $Enums.HouseStatus
    score?: IntFieldUpdateOperationsInput | number
    star_avg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avatar_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutHouseInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    responsible?: UserUpdateOneWithoutTasks_responsibleNestedInput
    reviews?: TaskReviewUpdateManyWithoutTaskNestedInput
    buyouts?: BuyoutUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reviews?: TaskReviewUncheckedUpdateManyWithoutTaskNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    responsible_id?: NullableIntFieldUpdateOperationsInput | number | null
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type AccountUpdateWithoutHouseInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    paid_by?: UserUpdateOneRequiredWithoutAccounts_paidNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    paid_by_id?: IntFieldUpdateOperationsInput | number
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateManyWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    paid_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type PunishmentUpdateWithoutHouseInput = {
    description?: StringFieldUpdateOperationsInput | string
    penalty_points?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PunishmentUncheckedUpdateWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    penalty_points?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PunishmentUncheckedUpdateManyWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    penalty_points?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUpdateWithoutHouseInput = {
    event_type?: EnumHistoryEventTypeFieldUpdateOperationsInput | $Enums.HistoryEventType
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutHistoryNestedInput
  }

  export type HistoryUncheckedUpdateWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_type?: EnumHistoryEventTypeFieldUpdateOperationsInput | $Enums.HistoryEventType
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUncheckedUpdateManyWithoutHouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_type?: EnumHistoryEventTypeFieldUpdateOperationsInput | $Enums.HistoryEventType
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HouseCreateManyAdminInput = {
    id?: number
    name: string
    code: string
  }

  export type TaskCreateManyResponsibleInput = {
    id?: number
    house_id: number
    title: string
    description?: string | null
    frequency: $Enums.TaskFrequency
    points: number
    due_date: Date | string
    status?: $Enums.TaskStatus
    can_buy_out?: boolean
    star_average?: Decimal | DecimalJsLike | number | string | null
  }

  export type TaskReviewCreateManyReviewerInput = {
    task_id: number
    stars: number
  }

  export type BuyoutCreateManyUserInput = {
    task_id: number
    cycle_start_date: Date | string
  }

  export type AccountCreateManyPaid_byInput = {
    id?: number
    house_id: number
    name: string
    type: $Enums.AccountType
    amount: Decimal | DecimalJsLike | number | string
    due_date: Date | string
  }

  export type PaymentShareCreateManyUserInput = {
    account_id: number
    share_amount: Decimal | DecimalJsLike | number | string
    is_paid?: boolean
  }

  export type HistoryCreateManyUserInput = {
    id?: number
    house_id: number
    event_type: $Enums.HistoryEventType
    description: string
    created_at?: Date | string
  }

  export type HouseUpdateWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    members?: UserUpdateManyWithoutHouseNestedInput
    tasks?: TaskUpdateManyWithoutHouseNestedInput
    accounts?: AccountUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUpdateManyWithoutHouseNestedInput
    history?: HistoryUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    members?: UserUncheckedUpdateManyWithoutHouseNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutHouseNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutHouseNestedInput
    punishments?: PunishmentUncheckedUpdateManyWithoutHouseNestedInput
    history?: HistoryUncheckedUpdateManyWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUpdateWithoutResponsibleInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    house?: HouseUpdateOneRequiredWithoutTasksNestedInput
    reviews?: TaskReviewUpdateManyWithoutTaskNestedInput
    buyouts?: BuyoutUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutResponsibleInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    reviews?: TaskReviewUncheckedUpdateManyWithoutTaskNestedInput
    buyouts?: BuyoutUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutResponsibleInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumTaskFrequencyFieldUpdateOperationsInput | $Enums.TaskFrequency
    points?: IntFieldUpdateOperationsInput | number
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    can_buy_out?: BoolFieldUpdateOperationsInput | boolean
    star_average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type TaskReviewUpdateWithoutReviewerInput = {
    stars?: IntFieldUpdateOperationsInput | number
    task?: TaskUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type TaskReviewUncheckedUpdateWithoutReviewerInput = {
    task_id?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type TaskReviewUncheckedUpdateManyWithoutReviewerInput = {
    task_id?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type BuyoutUpdateWithoutUserInput = {
    cycle_start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutBuyoutsNestedInput
  }

  export type BuyoutUncheckedUpdateWithoutUserInput = {
    task_id?: IntFieldUpdateOperationsInput | number
    cycle_start_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyoutUncheckedUpdateManyWithoutUserInput = {
    task_id?: IntFieldUpdateOperationsInput | number
    cycle_start_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUpdateWithoutPaid_byInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    house?: HouseUpdateOneRequiredWithoutAccountsNestedInput
    payment_shares?: PaymentShareUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutPaid_byInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_shares?: PaymentShareUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateManyWithoutPaid_byInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentShareUpdateWithoutUserInput = {
    share_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    account?: AccountUpdateOneRequiredWithoutPayment_sharesNestedInput
  }

  export type PaymentShareUncheckedUpdateWithoutUserInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    share_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentShareUncheckedUpdateManyWithoutUserInput = {
    account_id?: IntFieldUpdateOperationsInput | number
    share_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HistoryUpdateWithoutUserInput = {
    event_type?: EnumHistoryEventTypeFieldUpdateOperationsInput | $Enums.HistoryEventType
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    house?: HouseUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type HistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    event_type?: EnumHistoryEventTypeFieldUpdateOperationsInput | $Enums.HistoryEventType
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    house_id?: IntFieldUpdateOperationsInput | number
    event_type?: EnumHistoryEventTypeFieldUpdateOperationsInput | $Enums.HistoryEventType
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskReviewCreateManyTaskInput = {
    reviewer_id: number
    stars: number
  }

  export type BuyoutCreateManyTaskInput = {
    user_id: number
    cycle_start_date: Date | string
  }

  export type TaskReviewUpdateWithoutTaskInput = {
    stars?: IntFieldUpdateOperationsInput | number
    reviewer?: UserUpdateOneRequiredWithoutTask_reviewsNestedInput
  }

  export type TaskReviewUncheckedUpdateWithoutTaskInput = {
    reviewer_id?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type TaskReviewUncheckedUpdateManyWithoutTaskInput = {
    reviewer_id?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type BuyoutUpdateWithoutTaskInput = {
    cycle_start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBuyoutsNestedInput
  }

  export type BuyoutUncheckedUpdateWithoutTaskInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    cycle_start_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyoutUncheckedUpdateManyWithoutTaskInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    cycle_start_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentShareCreateManyAccountInput = {
    user_id: number
    share_amount: Decimal | DecimalJsLike | number | string
    is_paid?: boolean
  }

  export type PaymentShareUpdateWithoutAccountInput = {
    share_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPayment_sharesNestedInput
  }

  export type PaymentShareUncheckedUpdateWithoutAccountInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    share_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentShareUncheckedUpdateManyWithoutAccountInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    share_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_paid?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}